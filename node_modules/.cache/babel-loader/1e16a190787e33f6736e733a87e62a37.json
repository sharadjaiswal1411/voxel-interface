{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assert_1 = require(\"@0x/assert\");\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar EthereumTx = require(\"ethereumjs-tx\");\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar HDNode = require(\"hdkey\");\n\nvar _ = require(\"lodash\");\n\nvar semaphore_async_await_1 = require(\"semaphore-async-await\");\n\nvar types_1 = require(\"../types\");\n\nvar wallet_utils_1 = require(\"../utils/wallet_utils\");\n\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\n\nvar DEFAULT_BASE_DERIVATION_PATH = \"44'/60'/0'\";\nvar ASK_FOR_ON_DEVICE_CONFIRMATION = false;\nvar SHOULD_GET_CHAIN_CODE = true;\nvar DEFAULT_NUM_ADDRESSES_TO_FETCH = 10;\nvar DEFAULT_ADDRESS_SEARCH_LIMIT = 1000;\n/**\n * Subprovider for interfacing with a user's [Ledger Nano S](https://www.ledgerwallet.com/products/ledger-nano-s).\n * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and\n * re-routes them to a Ledger device plugged into the users computer.\n */\n\nvar LedgerSubprovider =\n/** @class */\nfunction (_super) {\n  __extends(LedgerSubprovider, _super);\n  /**\n   * Instantiates a LedgerSubprovider. Defaults to derivationPath set to `44'/60'/0'`.\n   * TestRPC/Ganache defaults to `m/44'/60'/0'/0`, so set this in the configs if desired.\n   * @param config Several available configurations\n   * @return LedgerSubprovider instance\n   */\n\n\n  function LedgerSubprovider(config) {\n    var _this = _super.call(this) || this; // tslint:disable-next-line:no-unused-variable\n\n\n    _this._connectionLock = new semaphore_async_await_1.Lock();\n    _this._networkId = config.networkId;\n    _this._ledgerEthereumClientFactoryAsync = config.ledgerEthereumClientFactoryAsync;\n    _this._baseDerivationPath = config.baseDerivationPath || DEFAULT_BASE_DERIVATION_PATH;\n    _this._shouldAlwaysAskForConfirmation = config.accountFetchingConfigs !== undefined && config.accountFetchingConfigs.shouldAskForOnDeviceConfirmation !== undefined ? config.accountFetchingConfigs.shouldAskForOnDeviceConfirmation : ASK_FOR_ON_DEVICE_CONFIRMATION;\n    _this._addressSearchLimit = config.accountFetchingConfigs !== undefined && config.accountFetchingConfigs.addressSearchLimit !== undefined ? config.accountFetchingConfigs.addressSearchLimit : DEFAULT_ADDRESS_SEARCH_LIMIT;\n    return _this;\n  }\n  /**\n   * Retrieve the set derivation path\n   * @returns derivation path\n   */\n\n\n  LedgerSubprovider.prototype.getPath = function () {\n    return this._baseDerivationPath;\n  };\n  /**\n   * Set a desired derivation path when computing the available user addresses\n   * @param basDerivationPath The desired derivation path (e.g `44'/60'/0'`)\n   */\n\n\n  LedgerSubprovider.prototype.setPath = function (basDerivationPath) {\n    this._baseDerivationPath = basDerivationPath;\n  };\n  /**\n   * Retrieve a users Ledger accounts. The accounts are derived from the derivationPath,\n   * master public key and chain code. Because of this, you can request as many accounts\n   * as you wish and it only requires a single request to the Ledger device. This method\n   * is automatically called when issuing a `eth_accounts` JSON RPC request via your providerEngine\n   * instance.\n   * @param numberOfAccounts Number of accounts to retrieve (default: 10)\n   * @return An array of accounts\n   */\n\n\n  LedgerSubprovider.prototype.getAccountsAsync = function (numberOfAccounts) {\n    if (numberOfAccounts === void 0) {\n      numberOfAccounts = DEFAULT_NUM_ADDRESSES_TO_FETCH;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var initialDerivedKeyInfo, derivedKeyInfos, accounts;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._initialDerivedKeyInfoAsync()];\n\n          case 1:\n            initialDerivedKeyInfo = _a.sent();\n            derivedKeyInfos = wallet_utils_1.walletUtils.calculateDerivedHDKeyInfos(initialDerivedKeyInfo, numberOfAccounts);\n            accounts = _.map(derivedKeyInfos, function (k) {\n              return k.address;\n            });\n            return [2\n            /*return*/\n            , accounts];\n        }\n      });\n    });\n  };\n  /**\n   * Signs a transaction on the Ledger with the account specificed by the `from` field in txParams.\n   * If you've added the LedgerSubprovider to your app's provider, you can simply send an `eth_sendTransaction`\n   * JSON RPC request, and this method will be called auto-magically. If you are not using this via a ProviderEngine\n   * instance, you can call it directly.\n   * @param txParams Parameters of the transaction to sign\n   * @return Signed transaction hex string\n   */\n\n\n  LedgerSubprovider.prototype.signTransactionAsync = function (txParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var initialDerivedKeyInfo, derivedKeyInfo, _a, tx, vIndex, rIndex, sIndex, txHex, fullDerivationPath, result, eip55Constant, signedChainId, err, signedTxHex, err_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            LedgerSubprovider._validateTxParams(txParams);\n\n            if (txParams.from === undefined || !utils_1.addressUtils.isAddress(txParams.from)) {\n              throw new Error(types_1.WalletSubproviderErrors.FromAddressMissingOrInvalid);\n            }\n\n            return [4\n            /*yield*/\n            , this._initialDerivedKeyInfoAsync()];\n\n          case 1:\n            initialDerivedKeyInfo = _b.sent();\n            derivedKeyInfo = this._findDerivedKeyInfoForAddress(initialDerivedKeyInfo, txParams.from);\n            _a = this;\n            return [4\n            /*yield*/\n            , this._createLedgerClientAsync()];\n\n          case 2:\n            _a._ledgerClientIfExists = _b.sent();\n            tx = new EthereumTx(txParams);\n            vIndex = 6;\n            tx.raw[vIndex] = Buffer.from([this._networkId]); // v\n\n            rIndex = 7;\n            tx.raw[rIndex] = Buffer.from([]); // r\n\n            sIndex = 8;\n            tx.raw[sIndex] = Buffer.from([]); // s\n\n            txHex = tx.serialize().toString('hex');\n            _b.label = 3;\n\n          case 3:\n            _b.trys.push([3, 8,, 10]);\n\n            fullDerivationPath = derivedKeyInfo.derivationPath;\n            return [4\n            /*yield*/\n            , this._ledgerClientIfExists.signTransaction(fullDerivationPath, txHex)];\n\n          case 4:\n            result = _b.sent(); // Store signature in transaction\n\n            tx.r = Buffer.from(result.r, 'hex');\n            tx.s = Buffer.from(result.s, 'hex');\n            tx.v = Buffer.from(result.v, 'hex');\n            eip55Constant = 35;\n            signedChainId = Math.floor((tx.v[0] - eip55Constant) / 2);\n            if (!(signedChainId !== this._networkId)) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this._destroyLedgerClientAsync()];\n\n          case 5:\n            _b.sent();\n\n            err = new Error(types_1.LedgerSubproviderErrors.TooOldLedgerFirmware);\n            throw err;\n\n          case 6:\n            signedTxHex = \"0x\" + tx.serialize().toString('hex');\n            return [4\n            /*yield*/\n            , this._destroyLedgerClientAsync()];\n\n          case 7:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , signedTxHex];\n\n          case 8:\n            err_1 = _b.sent();\n            return [4\n            /*yield*/\n            , this._destroyLedgerClientAsync()];\n\n          case 9:\n            _b.sent();\n\n            throw err_1;\n\n          case 10:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sign a personal Ethereum signed message. The signing account will be the account\n   * associated with the provided address.\n   * The Ledger adds the Ethereum signed message prefix on-device.  If you've added\n   * the LedgerSubprovider to your app's provider, you can simply send an `eth_sign`\n   * or `personal_sign` JSON RPC request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param data Hex string message to sign\n   * @param address Address of the account to sign with\n   * @return Signature hex string (order: rsv)\n   */\n\n\n  LedgerSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var initialDerivedKeyInfo, derivedKeyInfo, _a, fullDerivationPath, result, lowestValidV, v, hexBase, vHex, signature, err_2;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (data === undefined) {\n              throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n            }\n\n            assert_1.assert.isHexString('data', data);\n            assert_1.assert.isETHAddressHex('address', address);\n            return [4\n            /*yield*/\n            , this._initialDerivedKeyInfoAsync()];\n\n          case 1:\n            initialDerivedKeyInfo = _b.sent();\n            derivedKeyInfo = this._findDerivedKeyInfoForAddress(initialDerivedKeyInfo, address);\n            _a = this;\n            return [4\n            /*yield*/\n            , this._createLedgerClientAsync()];\n\n          case 2:\n            _a._ledgerClientIfExists = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            _b.trys.push([3, 6,, 8]);\n\n            fullDerivationPath = derivedKeyInfo.derivationPath;\n            return [4\n            /*yield*/\n            , this._ledgerClientIfExists.signPersonalMessage(fullDerivationPath, ethUtil.stripHexPrefix(data))];\n\n          case 4:\n            result = _b.sent();\n            lowestValidV = 27;\n            v = result.v - lowestValidV;\n            hexBase = 16;\n            vHex = v.toString(hexBase);\n\n            if (vHex.length < 2) {\n              vHex = \"0\" + v;\n            }\n\n            signature = \"0x\" + result.r + result.s + vHex;\n            return [4\n            /*yield*/\n            , this._destroyLedgerClientAsync()];\n\n          case 5:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , signature];\n\n          case 6:\n            err_2 = _b.sent();\n            return [4\n            /*yield*/\n            , this._destroyLedgerClientAsync()];\n\n          case 7:\n            _b.sent();\n\n            throw err_2;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * eth_signTypedData is currently not supported on Ledger devices.\n   * @param address Address of the account to sign with\n   * @param data the typed data object\n   * @return Signature hex string (order: rsv)\n   */\n  // tslint:disable-next-line:prefer-function-over-method\n\n\n  LedgerSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(types_1.WalletSubproviderErrors.MethodNotSupported);\n      });\n    });\n  };\n\n  LedgerSubprovider.prototype._createLedgerClientAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var ledgerEthereumClient;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._connectionLock.acquire()];\n\n          case 1:\n            _a.sent();\n\n            if (this._ledgerClientIfExists !== undefined) {\n              this._connectionLock.release();\n\n              throw new Error(types_1.LedgerSubproviderErrors.MultipleOpenConnectionsDisallowed);\n            }\n\n            return [4\n            /*yield*/\n            , this._ledgerEthereumClientFactoryAsync()];\n\n          case 2:\n            ledgerEthereumClient = _a.sent();\n\n            this._connectionLock.release();\n\n            return [2\n            /*return*/\n            , ledgerEthereumClient];\n        }\n      });\n    });\n  };\n\n  LedgerSubprovider.prototype._destroyLedgerClientAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._connectionLock.acquire()];\n\n          case 1:\n            _a.sent();\n\n            if (this._ledgerClientIfExists === undefined) {\n              this._connectionLock.release();\n\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , this._ledgerClientIfExists.transport.close()];\n\n          case 2:\n            _a.sent();\n\n            this._ledgerClientIfExists = undefined;\n\n            this._connectionLock.release();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  LedgerSubprovider.prototype._initialDerivedKeyInfoAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, parentKeyDerivationPath, ledgerResponse, hdKey, address, initialDerivedKeyInfo;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , this._createLedgerClientAsync()];\n\n          case 1:\n            _a._ledgerClientIfExists = _b.sent();\n            parentKeyDerivationPath = \"m/\" + this._baseDerivationPath;\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2,, 4, 6]);\n\n            return [4\n            /*yield*/\n            , this._ledgerClientIfExists.getAddress(parentKeyDerivationPath, this._shouldAlwaysAskForConfirmation, SHOULD_GET_CHAIN_CODE)];\n\n          case 3:\n            ledgerResponse = _b.sent();\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this._destroyLedgerClientAsync()];\n\n          case 5:\n            _b.sent();\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 6:\n            hdKey = new HDNode();\n            hdKey.publicKey = new Buffer(ledgerResponse.publicKey, 'hex');\n            hdKey.chainCode = new Buffer(ledgerResponse.chainCode, 'hex');\n            address = wallet_utils_1.walletUtils.addressOfHDKey(hdKey);\n            initialDerivedKeyInfo = {\n              hdKey: hdKey,\n              address: address,\n              derivationPath: parentKeyDerivationPath,\n              baseDerivationPath: this._baseDerivationPath\n            };\n            return [2\n            /*return*/\n            , initialDerivedKeyInfo];\n        }\n      });\n    });\n  };\n\n  LedgerSubprovider.prototype._findDerivedKeyInfoForAddress = function (initalHDKey, address) {\n    var matchedDerivedKeyInfo = wallet_utils_1.walletUtils.findDerivedKeyInfoForAddressIfExists(address, initalHDKey, this._addressSearchLimit);\n\n    if (matchedDerivedKeyInfo === undefined) {\n      throw new Error(types_1.WalletSubproviderErrors.AddressNotFound + \": \" + address);\n    }\n\n    return matchedDerivedKeyInfo;\n  };\n\n  return LedgerSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider);\n\nexports.LedgerSubprovider = LedgerSubprovider;","map":null,"metadata":{},"sourceType":"script"}