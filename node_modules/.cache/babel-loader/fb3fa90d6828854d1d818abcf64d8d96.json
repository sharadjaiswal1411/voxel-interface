{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { uuid4, dateTimestampInSeconds, consoleSandbox, logger, getGlobalObject, getGlobalSingleton, isNodeEnv } from '@sentry/utils';\nimport { Scope } from './scope.js';\nimport { closeSession, makeSession, updateSession } from './session.js';\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\n\nvar API_VERSION = 4;\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\n\nvar DEFAULT_BREADCRUMBS = 100;\n/**\n * A layer in the process stack.\n * @hidden\n */\n\n/**\n * @inheritDoc\n */\n\nvar Hub = /*#__PURE__*/function () {\n  /** Contains the last event id of a captured event.  */\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  function Hub(client) {\n    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Scope();\n\n    var _version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : API_VERSION;\n\n    _classCallCheck(this, Hub);\n\n    ;\n    this._version = _version;\n\n    Hub.prototype.__init.call(this);\n\n    this.getStackTop().scope = scope;\n\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(Hub, [{\n    key: \"__init\",\n    value:\n    /** Is a {@link Layer}[] containing the client and scope */\n    function __init() {\n      this._stack = [{}];\n    }\n  }, {\n    key: \"isOlderThan\",\n    value: function isOlderThan(version) {\n      return this._version < version;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"bindClient\",\n    value: function bindClient(client) {\n      var top = this.getStackTop();\n      top.client = client;\n\n      if (client && client.setupIntegrations) {\n        client.setupIntegrations();\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"pushScope\",\n    value: function pushScope() {\n      // We want to clone the content of prev scope\n      var scope = Scope.clone(this.getScope());\n      this.getStack().push({\n        client: this.getClient(),\n        scope: scope\n      });\n      return scope;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"popScope\",\n    value: function popScope() {\n      if (this.getStack().length <= 1) return false;\n      return !!this.getStack().pop();\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"withScope\",\n    value: function withScope(callback) {\n      var scope = this.pushScope();\n\n      try {\n        callback(scope);\n      } finally {\n        this.popScope();\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getClient\",\n    value: function getClient() {\n      return this.getStackTop().client;\n    }\n    /** Returns the scope of the top stack. */\n\n  }, {\n    key: \"getScope\",\n    value: function getScope() {\n      return this.getStackTop().scope;\n    }\n    /** Returns the scope stack for domains or the process. */\n\n  }, {\n    key: \"getStack\",\n    value: function getStack() {\n      return this._stack;\n    }\n    /** Returns the topmost scope layer in the order domain > local > process. */\n\n  }, {\n    key: \"getStackTop\",\n    value: function getStackTop() {\n      return this._stack[this._stack.length - 1];\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"captureException\",\n    value: function captureException(exception, hint) {\n      var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();\n      var syntheticException = new Error('Sentry syntheticException');\n\n      this._withClient(function (client, scope) {\n        client.captureException(exception, _objectSpread(_objectSpread({\n          originalException: exception,\n          syntheticException: syntheticException\n        }, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n\n      return eventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"captureMessage\",\n    value: function captureMessage(message, level, hint) {\n      var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();\n      var syntheticException = new Error(message);\n\n      this._withClient(function (client, scope) {\n        client.captureMessage(message, level, _objectSpread(_objectSpread({\n          originalException: message,\n          syntheticException: syntheticException\n        }, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n\n      return eventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"captureEvent\",\n    value: function captureEvent(event, hint) {\n      var eventId = hint && hint.event_id ? hint.event_id : uuid4();\n\n      if (event.type !== 'transaction') {\n        this._lastEventId = eventId;\n      }\n\n      this._withClient(function (client, scope) {\n        client.captureEvent(event, _objectSpread(_objectSpread({}, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n\n      return eventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"lastEventId\",\n    value: function lastEventId() {\n      return this._lastEventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"addBreadcrumb\",\n    value: function addBreadcrumb(breadcrumb, hint) {\n      var _this$getStackTop = this.getStackTop(),\n          scope = _this$getStackTop.scope,\n          client = _this$getStackTop.client;\n\n      if (!scope || !client) return;\n\n      var _ref = client.getOptions && client.getOptions() || {},\n          _ref$beforeBreadcrumb = _ref.beforeBreadcrumb,\n          beforeBreadcrumb = _ref$beforeBreadcrumb === void 0 ? null : _ref$beforeBreadcrumb,\n          _ref$maxBreadcrumbs = _ref.maxBreadcrumbs,\n          maxBreadcrumbs = _ref$maxBreadcrumbs === void 0 ? DEFAULT_BREADCRUMBS : _ref$maxBreadcrumbs;\n\n      if (maxBreadcrumbs <= 0) return;\n      var timestamp = dateTimestampInSeconds();\n\n      var mergedBreadcrumb = _objectSpread({\n        timestamp: timestamp\n      }, breadcrumb);\n\n      var finalBreadcrumb = beforeBreadcrumb ? consoleSandbox(function () {\n        return beforeBreadcrumb(mergedBreadcrumb, hint);\n      }) : mergedBreadcrumb;\n      if (finalBreadcrumb === null) return;\n      scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setUser\",\n    value: function setUser(user) {\n      var scope = this.getScope();\n      if (scope) scope.setUser(user);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setTags\",\n    value: function setTags(tags) {\n      var scope = this.getScope();\n      if (scope) scope.setTags(tags);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setExtras\",\n    value: function setExtras(extras) {\n      var scope = this.getScope();\n      if (scope) scope.setExtras(extras);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setTag\",\n    value: function setTag(key, value) {\n      var scope = this.getScope();\n      if (scope) scope.setTag(key, value);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, extra) {\n      var scope = this.getScope();\n      if (scope) scope.setExtra(key, extra);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setContext\",\n    value: function setContext(name, context) {\n      var scope = this.getScope();\n      if (scope) scope.setContext(name, context);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"configureScope\",\n    value: function configureScope(callback) {\n      var _this$getStackTop2 = this.getStackTop(),\n          scope = _this$getStackTop2.scope,\n          client = _this$getStackTop2.client;\n\n      if (scope && client) {\n        callback(scope);\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(callback) {\n      var oldHub = makeMain(this);\n\n      try {\n        callback(this);\n      } finally {\n        makeMain(oldHub);\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getIntegration\",\n    value: function getIntegration(integration) {\n      var client = this.getClient();\n      if (!client) return null;\n\n      try {\n        return client.getIntegration(integration);\n      } catch (_oO) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Cannot retrieve integration \".concat(integration.id, \" from the current Hub\"));\n        return null;\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"startTransaction\",\n    value: function startTransaction(context, customSamplingContext) {\n      return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"traceHeaders\",\n    value: function traceHeaders() {\n      return this._callExtensionMethod('traceHeaders');\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"captureSession\",\n    value: function captureSession() {\n      var endSession = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      // both send the update and pull the session from the scope\n      if (endSession) {\n        return this.endSession();\n      } // only send the update\n\n\n      this._sendSessionUpdate();\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"endSession\",\n    value: function endSession() {\n      var layer = this.getStackTop();\n      var scope = layer && layer.scope;\n      var session = scope && scope.getSession();\n\n      if (session) {\n        closeSession(session);\n      }\n\n      this._sendSessionUpdate(); // the session is over; take it off of the scope\n\n\n      if (scope) {\n        scope.setSession();\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"startSession\",\n    value: function startSession(context) {\n      var _this$getStackTop3 = this.getStackTop(),\n          scope = _this$getStackTop3.scope,\n          client = _this$getStackTop3.client;\n\n      var _ref2 = client && client.getOptions() || {},\n          release = _ref2.release,\n          environment = _ref2.environment; // Will fetch userAgent if called from browser sdk\n\n\n      var global = getGlobalObject();\n\n      var _ref3 = global.navigator || {},\n          userAgent = _ref3.userAgent;\n\n      var session = makeSession(_objectSpread(_objectSpread(_objectSpread({\n        release: release,\n        environment: environment\n      }, scope && {\n        user: scope.getUser()\n      }), userAgent && {\n        userAgent: userAgent\n      }), context));\n\n      if (scope) {\n        // End existing session if there's one\n        var currentSession = scope.getSession && scope.getSession();\n\n        if (currentSession && currentSession.status === 'ok') {\n          updateSession(currentSession, {\n            status: 'exited'\n          });\n        }\n\n        this.endSession(); // Afterwards we set the new session on the scope\n\n        scope.setSession(session);\n      }\n\n      return session;\n    }\n    /**\n     * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n     * when Tracing is used.\n     */\n\n  }, {\n    key: \"shouldSendDefaultPii\",\n    value: function shouldSendDefaultPii() {\n      var client = this.getClient();\n      var options = client && client.getOptions();\n      return Boolean(options && options.sendDefaultPii);\n    }\n    /**\n     * Sends the current Session on the scope\n     */\n\n  }, {\n    key: \"_sendSessionUpdate\",\n    value: function _sendSessionUpdate() {\n      var _this$getStackTop4 = this.getStackTop(),\n          scope = _this$getStackTop4.scope,\n          client = _this$getStackTop4.client;\n\n      if (!scope) return;\n      var session = scope.getSession();\n\n      if (session) {\n        if (client && client.captureSession) {\n          client.captureSession(session);\n        }\n      }\n    }\n    /**\n     * Internal helper function to call a method on the top client if it exists.\n     *\n     * @param method The method to call on the client.\n     * @param args Arguments to pass to the client function.\n     */\n\n  }, {\n    key: \"_withClient\",\n    value: function _withClient(callback) {\n      var _this$getStackTop5 = this.getStackTop(),\n          scope = _this$getStackTop5.scope,\n          client = _this$getStackTop5.client;\n\n      if (client) {\n        callback(client, scope);\n      }\n    }\n    /**\n     * Calls global extension method and binding current instance to the function call\n     */\n    // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n\n  }, {\n    key: \"_callExtensionMethod\",\n    value: function _callExtensionMethod(method) {\n      var carrier = getMainCarrier();\n      var sentry = carrier.__SENTRY__;\n\n      if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return sentry.extensions[method].apply(this, args);\n      }\n\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Extension method \".concat(method, \" couldn't be found, doing nothing.\"));\n    }\n  }]);\n\n  return Hub;\n}();\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\n\n\nfunction getMainCarrier() {\n  var carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined\n  };\n  return carrier;\n}\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\n\n\nfunction makeMain(hub) {\n  var registry = getMainCarrier();\n  var oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\n\n\nfunction getCurrentHub() {\n  // Get main carrier (global for every environment)\n  var registry = getMainCarrier(); // If there's no hub, or its an old API, assign a new one\n\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  } // Prefer domains over global if they are there (applicable only to Node environment)\n\n\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  } // Return hub that lives on a global object\n\n\n  return getHubFromCarrier(registry);\n}\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\n\n\nfunction getHubFromActiveDomain(registry) {\n  try {\n    var sentry = getMainCarrier().__SENTRY__;\n\n    var activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active; // If there's no active domain, just return global hub\n\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    } // If there's no hub on current domain, or it's an old API, assign a new one\n\n\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      var registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    } // Return hub that lives on a domain\n\n\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\n\n\nfunction hasHubOnCarrier(carrier) {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\n\n\nfunction getHubFromCarrier(carrier) {\n  return getGlobalSingleton('hub', function () {\n    return new Hub();\n  }, carrier);\n}\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\n\n\nfunction setHubOnCarrier(carrier, hub) {\n  if (!carrier) return false;\n\n  var __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n\n  __SENTRY__.hub = hub;\n  return true;\n}\n\nexport { API_VERSION, Hub, getCurrentHub, getHubFromCarrier, getMainCarrier, makeMain, setHubOnCarrier };","map":null,"metadata":{},"sourceType":"module"}