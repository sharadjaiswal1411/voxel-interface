{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _s = $RefreshSig$();\n\nimport { Trans } from \"@lingui/react\";\nimport { TradeType } from '@kyberswap/ks-sdk-core';\nimport React, { useMemo } from 'react';\nimport { useActiveWeb3React } from 'hooks';\nimport { useCurrency } from 'hooks/Tokens';\nimport useENS from 'hooks/useENS';\nimport { useProAmmBestTrade } from 'hooks/useProAmmBestTrade';\nimport { useUserSlippageTolerance } from 'state/user/hooks';\nimport { useCurrencyBalances } from 'state/wallet/hooks';\nimport { BAD_RECIPIENT_ADDRESSES } from '../../../constants';\nimport { basisPointsToPercent, isAddress } from '../../../utils';\nimport { Field } from '../actions';\nimport { tryParseAmount, useSwapState } from '../hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function useProAmmDerivedSwapInfo() {\n  _s();\n\n  var _ref, _ref3, _currencyBalances, _currencies, _trade$trade;\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      account = _useActiveWeb3React.account;\n\n  var _useSwapState = useSwapState(),\n      independentField = _useSwapState.independentField,\n      typedValue = _useSwapState.typedValue,\n      inputCurrencyId = _useSwapState[Field.INPUT].currencyId,\n      outputCurrencyId = _useSwapState[Field.OUTPUT].currencyId,\n      recipient = _useSwapState.recipient;\n\n  var inputCurrency = useCurrency(inputCurrencyId);\n  var outputCurrency = useCurrency(outputCurrencyId);\n  var recipientLookup = useENS(recipient !== null && recipient !== void 0 ? recipient : undefined);\n  var to = (_ref = recipient === null ? account : recipientLookup.address) !== null && _ref !== void 0 ? _ref : null;\n  var relevantTokenBalances = useCurrencyBalances(account !== null && account !== void 0 ? account : undefined, useMemo(function () {\n    return [inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined];\n  }, [inputCurrency, outputCurrency]));\n  var isExactIn = independentField === Field.INPUT;\n  var parsedAmount = useMemo(function () {\n    var _ref2;\n\n    return tryParseAmount(typedValue, (_ref2 = isExactIn ? inputCurrency : outputCurrency) !== null && _ref2 !== void 0 ? _ref2 : undefined);\n  }, [inputCurrency, isExactIn, outputCurrency, typedValue]);\n  var trade = useProAmmBestTrade(isExactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT, parsedAmount, (_ref3 = isExactIn ? outputCurrency : inputCurrency) !== null && _ref3 !== void 0 ? _ref3 : undefined);\n  var currencyBalances = (_currencyBalances = {}, _defineProperty(_currencyBalances, Field.INPUT, relevantTokenBalances[0]), _defineProperty(_currencyBalances, Field.OUTPUT, relevantTokenBalances[1]), _currencyBalances);\n  var currencies = (_currencies = {}, _defineProperty(_currencies, Field.INPUT, inputCurrency), _defineProperty(_currencies, Field.OUTPUT, outputCurrency), _currencies);\n  var inputError;\n\n  if (!account) {\n    inputError = /*#__PURE__*/_jsxDEV(Trans, {\n      id: \"Connect Wallet\"\n    }, void 0, false, void 0, this);\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    var _inputError;\n\n    inputError = (_inputError = inputError) !== null && _inputError !== void 0 ? _inputError : /*#__PURE__*/_jsxDEV(Trans, {\n      id: \"Select a token\"\n    }, void 0, false, void 0, this);\n  }\n\n  if (!parsedAmount) {\n    var _inputError2;\n\n    inputError = (_inputError2 = inputError) !== null && _inputError2 !== void 0 ? _inputError2 : /*#__PURE__*/_jsxDEV(Trans, {\n      id: \"Enter an amount\"\n    }, void 0, false, void 0, this);\n  }\n\n  var formattedTo = isAddress(to);\n\n  if (!to || !formattedTo) {\n    var _inputError3;\n\n    inputError = (_inputError3 = inputError) !== null && _inputError3 !== void 0 ? _inputError3 : /*#__PURE__*/_jsxDEV(Trans, {\n      id: \"Enter a recipient\"\n    }, void 0, false, void 0, this);\n  } else {\n    if (BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1) {\n      var _inputError4;\n\n      inputError = (_inputError4 = inputError) !== null && _inputError4 !== void 0 ? _inputError4 : /*#__PURE__*/_jsxDEV(Trans, {\n        id: \"Invalid recipient\"\n      }, void 0, false, void 0, this);\n    }\n  }\n\n  var _useUserSlippageToler = useUserSlippageTolerance(),\n      _useUserSlippageToler2 = _slicedToArray(_useUserSlippageToler, 1),\n      allowedSlippage = _useUserSlippageToler2[0]; // compare input balance to max input based on version\n\n\n  var _ref4 = [currencyBalances[Field.INPUT], (_trade$trade = trade.trade) === null || _trade$trade === void 0 ? void 0 : _trade$trade.maximumAmountIn(basisPointsToPercent(allowedSlippage))],\n      balanceIn = _ref4[0],\n      amountIn = _ref4[1];\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = /*#__PURE__*/_jsxDEV(Trans, {\n      id: \"Insufficient {0} balance\",\n      values: {\n        0: amountIn.currency.symbol\n      }\n    }, void 0, false, void 0, this);\n  }\n\n  return {\n    currencies: currencies,\n    currencyBalances: currencyBalances,\n    parsedAmount: parsedAmount,\n    inputError: inputError,\n    trade: trade,\n    allowedSlippage: allowedSlippage\n  };\n}\n\n_s(useProAmmDerivedSwapInfo, \"EhAgsZCIjA18XUYLhQdFY1SXfS0=\", false, function () {\n  return [useActiveWeb3React, useSwapState, useCurrency, useCurrency, useENS, useCurrencyBalances, useProAmmBestTrade, useUserSlippageTolerance];\n});","map":{"version":3,"names":["TradeType","React","useMemo","useActiveWeb3React","useCurrency","useENS","useProAmmBestTrade","useUserSlippageTolerance","useCurrencyBalances","BAD_RECIPIENT_ADDRESSES","basisPointsToPercent","isAddress","Field","tryParseAmount","useSwapState","useProAmmDerivedSwapInfo","account","independentField","typedValue","inputCurrencyId","INPUT","currencyId","outputCurrencyId","OUTPUT","recipient","inputCurrency","outputCurrency","recipientLookup","undefined","to","address","relevantTokenBalances","isExactIn","parsedAmount","trade","EXACT_INPUT","EXACT_OUTPUT","currencyBalances","currencies","inputError","formattedTo","indexOf","allowedSlippage","maximumAmountIn","balanceIn","amountIn","lessThan","currency","symbol"],"sources":["/Applications/XAMPP/voxel-interface/src/state/swap/proamm/hooks.tsx"],"sourcesContent":["import { Currency, CurrencyAmount, TradeType } from '@kyberswap/ks-sdk-core'\nimport { Trade } from '@kyberswap/ks-sdk-elastic'\nimport { Trans } from '@lingui/macro'\nimport React, { ReactNode, useMemo } from 'react'\n\nimport { useActiveWeb3React } from 'hooks'\nimport { useCurrency } from 'hooks/Tokens'\nimport useENS from 'hooks/useENS'\nimport { useProAmmBestTrade } from 'hooks/useProAmmBestTrade'\nimport { TradeState } from 'state/routing/types'\nimport { useUserSlippageTolerance } from 'state/user/hooks'\nimport { useCurrencyBalances } from 'state/wallet/hooks'\n\nimport { BAD_RECIPIENT_ADDRESSES } from '../../../constants'\nimport { basisPointsToPercent, isAddress } from '../../../utils'\nimport { Field } from '../actions'\nimport { tryParseAmount, useSwapState } from '../hooks'\n\nexport function useProAmmDerivedSwapInfo(): {\n  currencies: { [field in Field]?: Currency | null }\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmount: CurrencyAmount<Currency> | undefined\n  inputError?: ReactNode\n  trade: {\n    trade: Trade<Currency, Currency, TradeType> | undefined\n    state: TradeState\n  }\n  allowedSlippage: number\n} {\n  const { account } = useActiveWeb3React()\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n  } = useSwapState()\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(\n    account ?? undefined,\n    useMemo(() => [inputCurrency ?? undefined, outputCurrency ?? undefined], [inputCurrency, outputCurrency]),\n  )\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = useMemo(\n    () => tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined),\n    [inputCurrency, isExactIn, outputCurrency, typedValue],\n  )\n\n  const trade = useProAmmBestTrade(\n    isExactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n    parsedAmount,\n    (isExactIn ? outputCurrency : inputCurrency) ?? undefined,\n  )\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  }\n\n  const currencies: { [field in Field]?: Currency | null } = {\n    [Field.INPUT]: inputCurrency,\n    [Field.OUTPUT]: outputCurrency,\n  }\n\n  let inputError: ReactNode | undefined\n  if (!account) {\n    inputError = <Trans>Connect Wallet</Trans>\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? <Trans>Select a token</Trans>\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? <Trans>Enter an amount</Trans>\n  }\n  const formattedTo = isAddress(to)\n  if (!to || !formattedTo) {\n    inputError = inputError ?? <Trans>Enter a recipient</Trans>\n  } else {\n    if (BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1) {\n      inputError = inputError ?? <Trans>Invalid recipient</Trans>\n    }\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    trade.trade?.maximumAmountIn(basisPointsToPercent(allowedSlippage)),\n  ]\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = <Trans>Insufficient {amountIn.currency.symbol} balance</Trans>\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    inputError,\n    trade,\n    allowedSlippage: allowedSlippage,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}