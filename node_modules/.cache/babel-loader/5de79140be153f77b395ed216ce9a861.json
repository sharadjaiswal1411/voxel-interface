{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* tslint:disable max-classes-per-file */\n\nvar _ = require(\"lodash\");\n\nvar queue_1 = require(\"../utils/queue\");\n\nvar blob_1 = require(\"./blocks/blob\");\n\nvar pointer_1 = require(\"./blocks/pointer\");\n\nvar set_1 = require(\"./blocks/set\");\n/**\n * Iterator class for Calldata Blocks. Blocks follows the order\n * they should be put into calldata that is passed to he EVM.\n *\n * Example #1:\n * Let root = Set {\n *                  Blob{} A,\n *                  Pointer {\n *                      Blob{} a\n *                  } B,\n *                  Blob{} C\n *            }\n * It will iterate as follows: [A, B, C, B.a]\n *\n * Example #2:\n * Let root = Set {\n *                  Blob{} A,\n *                  Pointer {\n *                      Blob{} a\n *                      Pointer {\n *                          Blob{} b\n *                      }\n *                  } B,\n *                  Pointer {\n *                      Blob{} c\n *                  } C\n *            }\n * It will iterate as follows: [A, B, C, B.a, B.b, C.c]\n */\n\n\nvar BaseIterator =\n/** @class */\nfunction () {\n  function BaseIterator(root) {\n    this._root = root;\n    this._queue = BaseIterator._createQueue(root);\n  }\n\n  BaseIterator._createQueue = function (block) {\n    var queue = new queue_1.Queue(); // Base case\n\n    if (!(block instanceof set_1.SetCalldataBlock)) {\n      queue.pushBack(block);\n      return queue;\n    } // This is a set; add members\n\n\n    var set = block;\n\n    _.eachRight(set.getMembers(), function (member) {\n      queue.mergeFront(BaseIterator._createQueue(member));\n    }); // Add children\n\n\n    _.each(set.getMembers(), function (member) {\n      // Traverse child if it is a unique pointer.\n      // A pointer that is an alias for another pointer is ignored.\n      if (member instanceof pointer_1.PointerCalldataBlock && member.getAlias() === undefined) {\n        var dependency = member.getDependency();\n        queue.mergeBack(BaseIterator._createQueue(dependency));\n      }\n    }); // Put set block at the front of the queue\n\n\n    queue.pushFront(set);\n    return queue;\n  };\n\n  BaseIterator.prototype[Symbol.iterator] = function () {\n    var _this = this;\n\n    return {\n      next: function next() {\n        var nextBlock = _this.nextBlock();\n\n        if (nextBlock !== undefined) {\n          return {\n            value: nextBlock,\n            done: false\n          };\n        }\n\n        return {\n          done: true,\n          value: new blob_1.BlobCalldataBlock('', '', '', new Buffer(''))\n        };\n      }\n    };\n  };\n\n  return BaseIterator;\n}();\n\nvar CalldataIterator =\n/** @class */\nfunction (_super) {\n  __extends(CalldataIterator, _super);\n\n  function CalldataIterator(root) {\n    return _super.call(this, root) || this;\n  }\n\n  CalldataIterator.prototype.nextBlock = function () {\n    return this._queue.popFront();\n  };\n\n  return CalldataIterator;\n}(BaseIterator);\n\nexports.CalldataIterator = CalldataIterator;\n\nvar ReverseCalldataIterator =\n/** @class */\nfunction (_super) {\n  __extends(ReverseCalldataIterator, _super);\n\n  function ReverseCalldataIterator(root) {\n    return _super.call(this, root) || this;\n  }\n\n  ReverseCalldataIterator.prototype.nextBlock = function () {\n    return this._queue.popBack();\n  };\n\n  return ReverseCalldataIterator;\n}(BaseIterator);\n\nexports.ReverseCalldataIterator = ReverseCalldataIterator;","map":null,"metadata":{},"sourceType":"script"}