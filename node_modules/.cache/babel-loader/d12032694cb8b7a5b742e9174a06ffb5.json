{"ast":null,"code":"import { Fraction } from '@kyberswap/ks-sdk-core';\nimport JSBI from 'jsbi';\nimport Numeral from 'numeral';\nexport var getFullDisplayBalance = function getFullDisplayBalance(balance) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  var significant = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6;\n  var amount = new Fraction(balance.toString(), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimals)));\n\n  if (amount.lessThan(new Fraction('1'))) {\n    return amount.toSignificant(significant);\n  }\n\n  return amount.toFixed(significant);\n};\nexport var formatJSBIValue = function formatJSBIValue(balance) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  var significant = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6;\n\n  if (!balance) {\n    return '0';\n  }\n\n  return new Fraction(balance.toString(), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimals))).toSignificant(significant);\n};\n/**\n * Format big number of money into easy to read format\n * e.x: 299792458 => 299.8M\n *\n * @param num number\n * @param decimals number\n * @param usd boolean\n * @returns string\n */\n\nexport var formatBigLiquidity = function formatBigLiquidity(num, decimals) {\n  var usd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var lookup = [{\n    value: 1,\n    symbol: ''\n  }, {\n    value: 1e3,\n    symbol: 'k'\n  }, {\n    value: 1e6,\n    symbol: 'M'\n  }, {\n    value: 1e9,\n    symbol: 'B'\n  }, {\n    value: 1e12,\n    symbol: 'T'\n  }, {\n    value: 1e15,\n    symbol: 'P'\n  }, {\n    value: 1e18,\n    symbol: 'E'\n  }];\n  var rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  var item = lookup.slice().reverse().find(function (item) {\n    return parseFloat(num) >= item.value;\n  });\n  var formattedValue = item ? (parseFloat(num) / item.value).toFixed(decimals).replace(rx, '$1') + item.symbol : '0';\n  return usd ? \"$\".concat(formattedValue) : formattedValue;\n};\nexport var formatLongNumber = function formatLongNumber(num, usd) {\n  return usd ? \"$\".concat(Numeral(num).format('0,0')) : Numeral(num).format('0,0');\n};\nexport var formatTokenBalance = function formatTokenBalance(balance) {\n  if (balance === 0) {\n    return '0';\n  }\n\n  if (0 < balance && balance < 1) {\n    return balance.toPrecision(3);\n  }\n\n  return balance.toFixed(3);\n};\nexport var formatBalance = function formatBalance(balance) {\n  if (balance === 0) {\n    return '0';\n  } // if (0 < balance && balance < 1) {\n  //   return balance.toPrecision(2)\n  // }\n\n\n  return balance.toFixed(2).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\nexport var fixedFormatting = function fixedFormatting(value, decimals) {\n  var res = new Fraction(value.toString(), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimals))).toFixed(6);\n  return parseFloat(res).toString();\n};\nexport var formatCurrencyAmount = function formatCurrencyAmount(amount) {\n  if (amount.lessThan(new Fraction('1'))) {\n    return amount.toSignificant(3);\n  }\n\n  return amount.toFixed(3);\n};","map":{"version":3,"names":["Fraction","JSBI","Numeral","getFullDisplayBalance","balance","decimals","significant","amount","toString","exponentiate","BigInt","lessThan","toSignificant","toFixed","formatJSBIValue","formatBigLiquidity","num","usd","lookup","value","symbol","rx","item","slice","reverse","find","parseFloat","formattedValue","replace","formatLongNumber","format","formatTokenBalance","toPrecision","formatBalance","fixedFormatting","res","formatCurrencyAmount"],"sources":["/Applications/XAMPP/voxel-interface/src/utils/formatBalance.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { Currency, CurrencyAmount, Fraction } from '@kyberswap/ks-sdk-core'\nimport JSBI from 'jsbi'\nimport Numeral from 'numeral'\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, significant = 6): string => {\n  const amount = new Fraction(balance.toString(), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimals)))\n  if (amount.lessThan(new Fraction('1'))) {\n    return amount.toSignificant(significant)\n  }\n\n  return amount.toFixed(significant)\n}\n\nexport const formatJSBIValue = (balance?: JSBI, decimals = 18, significant = 6): string => {\n  if (!balance) {\n    return '0'\n  }\n\n  return new Fraction(balance.toString(), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimals))).toSignificant(\n    significant,\n  )\n}\n\n/**\n * Format big number of money into easy to read format\n * e.x: 299792458 => 299.8M\n *\n * @param num number\n * @param decimals number\n * @param usd boolean\n * @returns string\n */\nexport const formatBigLiquidity = (num: string, decimals: number, usd = true): string => {\n  const lookup = [\n    { value: 1, symbol: '' },\n    { value: 1e3, symbol: 'k' },\n    { value: 1e6, symbol: 'M' },\n    { value: 1e9, symbol: 'B' },\n    { value: 1e12, symbol: 'T' },\n    { value: 1e15, symbol: 'P' },\n    { value: 1e18, symbol: 'E' },\n  ]\n\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/\n\n  const item = lookup\n    .slice()\n    .reverse()\n    .find(function (item) {\n      return parseFloat(num) >= item.value\n    })\n\n  const formattedValue = item ? (parseFloat(num) / item.value).toFixed(decimals).replace(rx, '$1') + item.symbol : '0'\n\n  return usd ? `$${formattedValue}` : formattedValue\n}\n\nexport const formatLongNumber = (num: string, usd?: boolean): string => {\n  return usd ? `$${Numeral(num).format('0,0')}` : Numeral(num).format('0,0')\n}\n\nexport const formatTokenBalance = (balance: number): string => {\n  if (balance === 0) {\n    return '0'\n  }\n\n  if (0 < balance && balance < 1) {\n    return balance.toPrecision(3)\n  }\n\n  return balance.toFixed(3)\n}\n\nexport const formatBalance = (balance: number): string => {\n  if (balance === 0) {\n    return '0'\n  }\n\n  // if (0 < balance && balance < 1) {\n  //   return balance.toPrecision(2)\n  // }\n  return balance.toFixed(2).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    \n}\n\nexport const fixedFormatting = (value: BigNumber, decimals: number) => {\n  const res = new Fraction(value.toString(), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimals))).toFixed(6)\n  return parseFloat(res).toString()\n}\n\nexport const formatCurrencyAmount = (amount: CurrencyAmount<Currency>): string => {\n  if (amount.lessThan(new Fraction('1'))) {\n    return amount.toSignificant(3)\n  }\n\n  return amount.toFixed(3)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}