{"ast":null,"code":"import writeText from 'copy-to-clipboard';\nimport { useCallback } from 'react';\nimport useMountedState from './useMountedState';\nimport useSetState from './useSetState';\n\nvar useCopyToClipboard = function useCopyToClipboard() {\n  var isMounted = useMountedState();\n\n  var _a = useSetState({\n    value: undefined,\n    error: undefined,\n    noUserInteraction: true\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var copyToClipboard = useCallback(function (value) {\n    if (!isMounted()) {\n      return;\n    }\n\n    var noUserInteraction;\n    var normalizedValue;\n\n    try {\n      // only strings and numbers casted to strings can be copied to clipboard\n      if (typeof value !== 'string' && typeof value !== 'number') {\n        var error = new Error(\"Cannot copy typeof \" + typeof value + \" to clipboard, must be a string\");\n        if (process.env.NODE_ENV === 'development') console.error(error);\n        setState({\n          value: value,\n          error: error,\n          noUserInteraction: true\n        });\n        return;\n      } // empty strings are also considered invalid\n      else if (value === '') {\n        var error = new Error(\"Cannot copy empty string to clipboard.\");\n        if (process.env.NODE_ENV === 'development') console.error(error);\n        setState({\n          value: value,\n          error: error,\n          noUserInteraction: true\n        });\n        return;\n      }\n\n      normalizedValue = value.toString();\n      noUserInteraction = writeText(normalizedValue);\n      setState({\n        value: normalizedValue,\n        error: undefined,\n        noUserInteraction: noUserInteraction\n      });\n    } catch (error) {\n      setState({\n        value: normalizedValue,\n        error: error,\n        noUserInteraction: noUserInteraction\n      });\n    }\n  }, []);\n  return [state, copyToClipboard];\n};\n\nexport default useCopyToClipboard;","map":null,"metadata":{},"sourceType":"module"}