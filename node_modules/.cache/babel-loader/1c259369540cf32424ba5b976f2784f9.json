{"ast":null,"code":"import _toConsumableArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _s = $RefreshSig$();\n\n/**\n * After claiming rewards, it may take a while for the campaign service to sync data from the subgraph.\n * So we use this hook to disable it when waiting backend to be synced.\n *\n * This hook should be used after claim reward transaction success.\n */\nimport { useCallback, useMemo } from 'react';\nimport { useLocalStorage } from 'react-use';\nexport default function useTemporaryClaimedRefsManager() {\n  _s();\n\n  var _useLocalStorage = useLocalStorage('campaign-claimed-refs', []),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      claimedRefs = _useLocalStorage2[0],\n      setClaimedRefs = _useLocalStorage2[1];\n\n  var onAddClaimedRefs = useCallback(function (claimedRefs) {\n    setClaimedRefs(function (prev) {\n      var newState = [].concat(_toConsumableArray(prev !== null && prev !== void 0 ? prev : []), _toConsumableArray(claimedRefs));\n      return newState;\n    });\n  }, [setClaimedRefs]);\n  return useMemo(function () {\n    return [claimedRefs !== null && claimedRefs !== void 0 ? claimedRefs : [], onAddClaimedRefs];\n  }, [claimedRefs, onAddClaimedRefs]);\n}\n\n_s(useTemporaryClaimedRefsManager, \"WtZF5SmHVdNvI9Kg7gRV8VPn/+U=\", false, function () {\n  return [useLocalStorage];\n});","map":{"version":3,"names":["useCallback","useMemo","useLocalStorage","useTemporaryClaimedRefsManager","claimedRefs","setClaimedRefs","onAddClaimedRefs","prev","newState"],"sources":["/Applications/XAMPP/voxel-interface/src/hooks/campaigns/useTemporaryClaimedRefsManager.ts"],"sourcesContent":["/**\n * After claiming rewards, it may take a while for the campaign service to sync data from the subgraph.\n * So we use this hook to disable it when waiting backend to be synced.\n *\n * This hook should be used after claim reward transaction success.\n */\nimport { useCallback, useMemo } from 'react'\nimport { useLocalStorage } from 'react-use'\n\nexport default function useTemporaryClaimedRefsManager(): [string[], (claimedRefs: string[]) => void] {\n  const [claimedRefs, setClaimedRefs] = useLocalStorage<string[]>('campaign-claimed-refs', [])\n\n  const onAddClaimedRefs = useCallback(\n    (claimedRefs: string[]) => {\n      setClaimedRefs(prev => {\n        const newState = [...(prev ?? []), ...claimedRefs]\n        return newState\n      })\n    },\n    [setClaimedRefs],\n  )\n\n  return useMemo(() => {\n    return [claimedRefs ?? [], onAddClaimedRefs]\n  }, [claimedRefs, onAddClaimedRefs])\n}\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA,eAAe,SAASC,8BAAT,GAAuF;EAAA;;EACpG,uBAAsCD,eAAe,CAAW,uBAAX,EAAoC,EAApC,CAArD;EAAA;EAAA,IAAOE,WAAP;EAAA,IAAoBC,cAApB;;EAEA,IAAMC,gBAAgB,GAAGN,WAAW,CAClC,UAACI,WAAD,EAA2B;IACzBC,cAAc,CAAC,UAAAE,IAAI,EAAI;MACrB,IAAMC,QAAQ,gCAAQD,IAAR,aAAQA,IAAR,cAAQA,IAAR,GAAgB,EAAhB,sBAAwBH,WAAxB,EAAd;MACA,OAAOI,QAAP;IACD,CAHa,CAAd;EAID,CANiC,EAOlC,CAACH,cAAD,CAPkC,CAApC;EAUA,OAAOJ,OAAO,CAAC,YAAM;IACnB,OAAO,CAACG,WAAD,aAACA,WAAD,cAACA,WAAD,GAAgB,EAAhB,EAAoBE,gBAApB,CAAP;EACD,CAFa,EAEX,CAACF,WAAD,EAAcE,gBAAd,CAFW,CAAd;AAGD;;GAhBuBH,8B;UACgBD,e"},"metadata":{},"sourceType":"module"}