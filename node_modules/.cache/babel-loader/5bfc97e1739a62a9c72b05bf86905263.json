{"ast":null,"code":"import _defineProperty from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$();\n\nimport { i18n } from \"@lingui/core\";\nimport { useQuery } from '@apollo/client';\nimport { defaultAbiCoder } from '@ethersproject/abi';\nimport { getCreate2Address } from '@ethersproject/address';\nimport { keccak256 } from '@ethersproject/solidity';\nimport { ChainId, Token, TokenAmount } from '@kyberswap/ks-sdk-core';\nimport { Pool, Position } from '@kyberswap/ks-sdk-elastic';\nimport { BigNumber } from 'ethers';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { PROMM_JOINED_POSITION } from 'apollo/queries/promm';\nimport PROMM_POOL_ABI from 'constants/abis/v2/pool.json';\nimport { ZERO_ADDRESS } from 'constants/index';\nimport { CONTRACT_NOT_FOUND_MSG } from 'constants/messages';\nimport { NETWORKS_INFO } from 'constants/networks';\nimport { FARM_CONTRACTS, VERSION } from 'constants/v2';\nimport { providers, useActiveWeb3React } from 'hooks';\nimport { useAllTokens, useTokens } from 'hooks/Tokens';\nimport { useProAmmNFTPositionManagerContract, useProMMFarmContract, useProMMFarmContracts } from 'hooks/useContract';\nimport { usePools } from 'hooks/usePools';\nimport usePrevious from 'hooks/usePrevious';\nimport { useETHPrice } from 'state/application/hooks';\nimport { useAppDispatch } from 'state/hooks';\nimport { usePoolBlocks } from 'state/prommPools/hooks';\nimport { useTransactionAdder } from 'state/transactions/hooks';\nimport { calculateGasMargin, getContractForReading, isAddressString } from 'utils';\nimport { useRewardTokenPrices } from '../hooks';\nimport { addFailedNFTs, setLoading, updatePrommFarms } from './actions';\nexport var useProMMFarms = function useProMMFarms() {\n  _s();\n\n  return useSelector(function (state) {\n    return state.prommFarms;\n  });\n};\n\n_s(useProMMFarms, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport var useGetProMMFarms = function useGetProMMFarms() {\n  _s2();\n\n  var dispatch = useAppDispatch();\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      chainId = _useActiveWeb3React.chainId,\n      account = _useActiveWeb3React.account;\n\n  var prommFarmContracts = useProMMFarmContracts();\n  var tokens = useAllTokens(); // dont need all tokens on dependency\n\n  var allTokensRef = useRef(tokens);\n  allTokensRef.current = tokens;\n  var positionManager = useProAmmNFTPositionManagerContract();\n  var prevChainId = usePrevious(chainId);\n  var getProMMFarms = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    var farmsAddress, promises, farms;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            farmsAddress = FARM_CONTRACTS[chainId];\n\n            if (farmsAddress) {\n              _context3.next = 4;\n              break;\n            }\n\n            dispatch(updatePrommFarms({}));\n            return _context3.abrupt(\"return\");\n\n          case 4:\n            dispatch(setLoading(true));\n            if (prevChainId !== chainId) dispatch(updatePrommFarms({}));\n            promises = farmsAddress.map( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(address) {\n                var contract, _yield$Promise$all, _yield$Promise$all2, poolLength, userDepositedNFT, rewardLocker, nftInfosFromContract, nftInfos, pids, poolInfos;\n\n                return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        contract = prommFarmContracts === null || prommFarmContracts === void 0 ? void 0 : prommFarmContracts[address];\n\n                        if (!(!contract || !chainId)) {\n                          _context2.next = 3;\n                          break;\n                        }\n\n                        return _context2.abrupt(\"return\");\n\n                      case 3:\n                        _context2.t0 = Promise;\n                        _context2.t1 = contract.poolLength();\n\n                        if (!account) {\n                          _context2.next = 11;\n                          break;\n                        }\n\n                        _context2.next = 8;\n                        return contract.getDepositedNFTs(account);\n\n                      case 8:\n                        _context2.t2 = _context2.sent;\n                        _context2.next = 12;\n                        break;\n\n                      case 11:\n                        _context2.t2 = Promise.resolve([]);\n\n                      case 12:\n                        _context2.t3 = _context2.t2;\n                        _context2.t4 = contract.rewardLocker();\n                        _context2.t5 = [_context2.t1, _context2.t3, _context2.t4];\n                        _context2.next = 17;\n                        return _context2.t0.all.call(_context2.t0, _context2.t5);\n\n                      case 17:\n                        _yield$Promise$all = _context2.sent;\n                        _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);\n                        poolLength = _yield$Promise$all2[0];\n                        userDepositedNFT = _yield$Promise$all2[1];\n                        rewardLocker = _yield$Promise$all2[2];\n                        _context2.next = 24;\n                        return Promise.all(userDepositedNFT.map(function (id) {\n                          return positionManager === null || positionManager === void 0 ? void 0 : positionManager.positions(id);\n                        }));\n\n                      case 24:\n                        nftInfosFromContract = _context2.sent;\n                        nftInfos = nftInfosFromContract.map(function (result, index) {\n                          return {\n                            tokenId: userDepositedNFT[index],\n                            poolId: getCreate2Address(NETWORKS_INFO[chainId || ChainId.MAINNET].elastic.coreFactory, keccak256(['bytes'], [defaultAbiCoder.encode(['address', 'address', 'uint24'], [result.info.token0, result.info.token1, result.info.fee])]), NETWORKS_INFO[chainId || ChainId.MAINNET].elastic.initCodeHash),\n                            feeGrowthInsideLast: result.pos.feeGrowthInsideLast,\n                            nonce: result.pos.nonce,\n                            liquidity: result.pos.liquidity,\n                            operator: result.pos.operator,\n                            tickLower: result.pos.tickLower,\n                            tickUpper: result.pos.tickUpper,\n                            rTokenOwed: result.pos.rTokenOwed,\n                            fee: result.info.fee,\n                            token0: result.info.token0,\n                            token1: result.info.token1\n                          };\n                        });\n                        pids = _toConsumableArray(Array(BigNumber.from(poolLength).toNumber()).keys());\n                        _context2.next = 29;\n                        return Promise.all(pids.map( /*#__PURE__*/function () {\n                          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(pid) {\n                            var _allTokensRef$current, _allTokensRef$current2;\n\n                            var poolInfo, userNFTForPool, userInfo, errorNFTs, userNFTInfo, poolContract, _yield$Promise$all3, _yield$Promise$all4, token0, token1, feeTier, liquidityState, poolState;\n\n                            return _regeneratorRuntime().wrap(function _callee$(_context) {\n                              while (1) {\n                                switch (_context.prev = _context.next) {\n                                  case 0:\n                                    _context.next = 2;\n                                    return contract.getPoolInfo(pid);\n\n                                  case 2:\n                                    poolInfo = _context.sent;\n                                    userNFTForPool = nftInfos.filter(function (item) {\n                                      return item.poolId === poolInfo.poolAddress;\n                                    });\n                                    _context.next = 6;\n                                    return Promise.all(userNFTForPool.map(function (item) {\n                                      return contract.getUserInfo(item.tokenId, pid).then(function (res) {\n                                        return _objectSpread(_objectSpread({}, res), {}, {\n                                          pid: pid,\n                                          tokenId: item.tokenId\n                                        });\n                                      }).catch(function (e) {\n                                        return new Error(JSON.stringify(e));\n                                      });\n                                    }));\n\n                                  case 6:\n                                    userInfo = _context.sent;\n                                    errorNFTs = [];\n                                    userInfo.forEach(function (info, index) {\n                                      if (info instanceof Error && info.message.includes('Panic')) errorNFTs.push(userNFTForPool[index].tokenId.toString());\n                                    });\n\n                                    if (errorNFTs.length) {\n                                      dispatch(addFailedNFTs(errorNFTs));\n                                    }\n\n                                    userNFTInfo = userInfo // .filter(item => item.pid === pid)\n                                    .map(function (item, index) {\n                                      return _objectSpread(_objectSpread({}, userNFTForPool[index]), {}, {\n                                        stakedLiquidity: item instanceof Error ? BigNumber.from(0) : item.liquidity,\n                                        rewardPendings: item instanceof Error ? [] : item.rewardPending\n                                      });\n                                    });\n                                    poolContract = getContractForReading(poolInfo.poolAddress, PROMM_POOL_ABI, providers[chainId]);\n                                    _context.next = 14;\n                                    return Promise.all([poolContract.token0(), poolContract.token1(), poolContract.swapFeeUnits(), poolContract.getLiquidityState(), poolContract.getPoolState()]);\n\n                                  case 14:\n                                    _yield$Promise$all3 = _context.sent;\n                                    _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 5);\n                                    token0 = _yield$Promise$all4[0];\n                                    token1 = _yield$Promise$all4[1];\n                                    feeTier = _yield$Promise$all4[2];\n                                    liquidityState = _yield$Promise$all4[3];\n                                    poolState = _yield$Promise$all4[4];\n                                    return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, poolInfo), {}, {\n                                      token0: token0,\n                                      token1: token1,\n                                      feeTier: feeTier,\n                                      baseL: liquidityState.baseL,\n                                      reinvestL: liquidityState.reinvestL,\n                                      sqrtP: poolState.sqrtP,\n                                      currentTick: poolState.currentTick,\n                                      pid: pid,\n                                      userDepositedNFTs: userNFTInfo,\n                                      rewardLocker: rewardLocker,\n                                      token0Info: (_allTokensRef$current = allTokensRef.current) === null || _allTokensRef$current === void 0 ? void 0 : _allTokensRef$current[token0],\n                                      token1Info: (_allTokensRef$current2 = allTokensRef.current) === null || _allTokensRef$current2 === void 0 ? void 0 : _allTokensRef$current2[token1]\n                                    }));\n\n                                  case 22:\n                                  case \"end\":\n                                    return _context.stop();\n                                }\n                              }\n                            }, _callee);\n                          }));\n\n                          return function (_x2) {\n                            return _ref3.apply(this, arguments);\n                          };\n                        }()));\n\n                      case 29:\n                        poolInfos = _context2.sent;\n                        return _context2.abrupt(\"return\", poolInfos);\n\n                      case 31:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function (_x) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n            _context3.next = 9;\n            return Promise.all(promises);\n\n          case 9:\n            farms = _context3.sent;\n            dispatch(updatePrommFarms(farmsAddress.reduce(function (acc, address, index) {\n              return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, address, farms[index]));\n            }, {})));\n            dispatch(setLoading(false));\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })), [chainId, prevChainId, dispatch, prommFarmContracts, account, positionManager]);\n  return getProMMFarms;\n};\n\n_s2(useGetProMMFarms, \"Kmj5n+EHiA0EnBzbfet4mzOXANw=\", false, function () {\n  return [useAppDispatch, useActiveWeb3React, useProMMFarmContracts, useAllTokens, useProAmmNFTPositionManagerContract, usePrevious];\n});\n\nexport var useProMMFarmsFetchOnlyOne = function useProMMFarmsFetchOnlyOne() {\n  _s3();\n\n  var _useProMMFarms = useProMMFarms(),\n      farms = _useProMMFarms.data;\n\n  var getProMMFarm = useGetProMMFarms();\n  var firstRender = useRef(true);\n\n  var _useActiveWeb3React2 = useActiveWeb3React(),\n      chainId = _useActiveWeb3React2.chainId;\n\n  var previousChainId = usePrevious(chainId);\n  useEffect(function () {\n    if (!Object.keys(farms).length && firstRender.current || chainId !== previousChainId) {\n      getProMMFarm();\n      firstRender.current = false;\n    }\n  }, [previousChainId, farms, getProMMFarm, chainId]);\n  return farms;\n};\n\n_s3(useProMMFarmsFetchOnlyOne, \"zph8CPFUbkJvufkexOYb6j6NjxI=\", false, function () {\n  return [useProMMFarms, useGetProMMFarms, useActiveWeb3React, usePrevious];\n});\n\nexport var useFarmAction = function useFarmAction(address) {\n  _s4();\n\n  var addTransactionWithType = useTransactionAdder();\n  var contract = useProMMFarmContract(address);\n  var posManager = useProAmmNFTPositionManagerContract();\n  var approve = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var estimateGas, tx;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (posManager) {\n              _context4.next = 2;\n              break;\n            }\n\n            throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n          case 2:\n            _context4.next = 4;\n            return posManager.estimateGas.setApprovalForAll(address, true);\n\n          case 4:\n            estimateGas = _context4.sent;\n            _context4.next = 7;\n            return posManager.setApprovalForAll(address, true, {\n              gasLimit: calculateGasMargin(estimateGas)\n            });\n\n          case 7:\n            tx = _context4.sent;\n            addTransactionWithType(tx, {\n              type: 'Approve',\n              summary: \"Elastic Farm\"\n            });\n            return _context4.abrupt(\"return\", tx.hash);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  })), [addTransactionWithType, address, posManager]); // Deposit\n\n  var deposit = useCallback( /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(nftIds) {\n      var estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (contract) {\n                _context5.next = 2;\n                break;\n              }\n\n              throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n            case 2:\n              _context5.next = 4;\n              return contract.estimateGas.deposit(nftIds);\n\n            case 4:\n              estimateGas = _context5.sent;\n              _context5.next = 7;\n              return contract.deposit(nftIds, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 7:\n              tx = _context5.sent;\n              addTransactionWithType(tx, {\n                type: 'Deposit',\n                summary: \"liquidity\"\n              });\n              return _context5.abrupt(\"return\", tx.hash);\n\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x3) {\n      return _ref5.apply(this, arguments);\n    };\n  }(), [addTransactionWithType, contract]);\n  var withdraw = useCallback( /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(nftIds) {\n      var estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (contract) {\n                _context6.next = 2;\n                break;\n              }\n\n              throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n            case 2:\n              _context6.next = 4;\n              return contract.estimateGas.withdraw(nftIds);\n\n            case 4:\n              estimateGas = _context6.sent;\n              _context6.next = 7;\n              return contract.withdraw(nftIds, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 7:\n              tx = _context6.sent;\n              addTransactionWithType(tx, {\n                type: 'Withdraw',\n                summary: \"liquidity\"\n              });\n              return _context6.abrupt(\"return\", tx.hash);\n\n            case 10:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x4) {\n      return _ref6.apply(this, arguments);\n    };\n  }(), [addTransactionWithType, contract]);\n  var emergencyWithdraw = useCallback( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(nftIds) {\n      var estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (contract) {\n                _context7.next = 2;\n                break;\n              }\n\n              throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n            case 2:\n              _context7.next = 4;\n              return contract.estimateGas.emergencyWithdraw(nftIds);\n\n            case 4:\n              estimateGas = _context7.sent;\n              _context7.next = 7;\n              return contract.emergencyWithdraw(nftIds, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 7:\n              tx = _context7.sent;\n              addTransactionWithType(tx, {\n                type: 'ForceWithdraw'\n              });\n              return _context7.abrupt(\"return\", tx.hash);\n\n            case 10:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function (_x5) {\n      return _ref7.apply(this, arguments);\n    };\n  }(), [addTransactionWithType, contract]);\n  var stake = useCallback( /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(pid, nftIds, liqs) {\n      var estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (contract) {\n                _context8.next = 2;\n                break;\n              }\n\n              throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n            case 2:\n              _context8.next = 4;\n              return contract.estimateGas.join(pid, nftIds, liqs);\n\n            case 4:\n              estimateGas = _context8.sent;\n              _context8.next = 7;\n              return contract.join(pid, nftIds, liqs, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 7:\n              tx = _context8.sent;\n              addTransactionWithType(tx, {\n                type: 'Stake',\n                summary: \"liquidity into farm\"\n              });\n              return _context8.abrupt(\"return\", tx.hash);\n\n            case 10:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function (_x6, _x7, _x8) {\n      return _ref8.apply(this, arguments);\n    };\n  }(), [addTransactionWithType, contract]);\n  var unstake = useCallback( /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(pid, nftIds, liqs) {\n      var estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (contract) {\n                _context9.next = 2;\n                break;\n              }\n\n              throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n            case 2:\n              _context9.prev = 2;\n              _context9.next = 5;\n              return contract.estimateGas.exit(pid, nftIds, liqs);\n\n            case 5:\n              estimateGas = _context9.sent;\n              _context9.next = 8;\n              return contract.exit(pid, nftIds, liqs, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 8:\n              tx = _context9.sent;\n              addTransactionWithType(tx, {\n                type: 'Unstake',\n                summary: \"liquidity from farm\"\n              });\n              return _context9.abrupt(\"return\", tx.hash);\n\n            case 13:\n              _context9.prev = 13;\n              _context9.t0 = _context9[\"catch\"](2);\n              console.log(_context9.t0);\n\n            case 16:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, null, [[2, 13]]);\n    }));\n\n    return function (_x9, _x10, _x11) {\n      return _ref9.apply(this, arguments);\n    };\n  }(), [addTransactionWithType, contract]);\n  var harvest = useCallback( /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(nftIds, poolIds) {\n      var encodeData, estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (contract) {\n                _context10.next = 2;\n                break;\n              }\n\n              return _context10.abrupt(\"return\");\n\n            case 2:\n              encodeData = poolIds.map(function (id) {\n                return defaultAbiCoder.encode(['tupple(uint256[] pIds)'], [{\n                  pIds: [id]\n                }]);\n              });\n              _context10.prev = 3;\n              _context10.next = 6;\n              return contract.estimateGas.harvestMultiplePools(nftIds, encodeData);\n\n            case 6:\n              estimateGas = _context10.sent;\n              _context10.next = 9;\n              return contract.harvestMultiplePools(nftIds, encodeData, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 9:\n              tx = _context10.sent;\n              addTransactionWithType(tx, {\n                type: 'Harvest'\n              });\n              return _context10.abrupt(\"return\", tx);\n\n            case 14:\n              _context10.prev = 14;\n              _context10.t0 = _context10[\"catch\"](3);\n              console.log(_context10.t0);\n\n            case 17:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, null, [[3, 14]]);\n    }));\n\n    return function (_x12, _x13) {\n      return _ref10.apply(this, arguments);\n    };\n  }(), [addTransactionWithType, contract]);\n  return {\n    deposit: deposit,\n    withdraw: withdraw,\n    approve: approve,\n    stake: stake,\n    unstake: unstake,\n    harvest: harvest,\n    emergencyWithdraw: emergencyWithdraw\n  };\n};\n\n_s4(useFarmAction, \"qHtj9umA+bKN+fxaeLIXX/vJJ7c=\", false, function () {\n  return [useTransactionAdder, useProMMFarmContract, useProAmmNFTPositionManagerContract];\n});\n\nexport var usePostionFilter = function usePostionFilter(positions, validPools) {\n  _s5();\n\n  var filterOptions = [{\n    code: 'in_rage',\n    value:\n    /*i18n*/\n    i18n._(\"In range\")\n  }, {\n    code: 'out_range',\n    value:\n    /*i18n*/\n    i18n._(\"Out of range\")\n  }, {\n    code: 'all',\n    value:\n    /*i18n*/\n    i18n._(\"All positions\")\n  }];\n\n  var _useState = useState('all'),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeFilter = _useState2[0],\n      setActiveFilter = _useState2[1];\n\n  var tokenList = useMemo(function () {\n    if (!positions) return [];\n    return positions === null || positions === void 0 ? void 0 : positions.map(function (pos) {\n      return [pos.token0, pos.token1];\n    }).flat();\n  }, [positions]);\n  var tokens = useTokens(tokenList);\n  var poolKeys = useMemo(function () {\n    if (!tokens) return [];\n    return positions === null || positions === void 0 ? void 0 : positions.map(function (pos) {\n      return [tokens[pos.token0], tokens[pos.token1], pos.fee];\n    });\n  }, [tokens, positions]);\n  var pools = usePools(poolKeys);\n  var eligiblePositions = useMemo(function () {\n    return positions === null || positions === void 0 ? void 0 : positions.filter(function (pos) {\n      return validPools === null || validPools === void 0 ? void 0 : validPools.includes(pos.poolId.toLowerCase());\n    }).filter(function (pos) {\n      // remove closed position\n      if (pos.liquidity.eq(0)) return false;\n      var pool = pools.find(function (p) {\n        var _p$, _p$2, _p$3;\n\n        return ((_p$ = p[1]) === null || _p$ === void 0 ? void 0 : _p$.token0.address.toLowerCase()) === pos.token0.toLowerCase() && ((_p$2 = p[1]) === null || _p$2 === void 0 ? void 0 : _p$2.token1.address.toLowerCase()) === pos.token1.toLowerCase() && ((_p$3 = p[1]) === null || _p$3 === void 0 ? void 0 : _p$3.fee) === pos.fee;\n      });\n\n      if (activeFilter === 'out_range') {\n        if (pool && pool[1]) {\n          return pool[1].tickCurrent < pos.tickLower || pool[1].tickCurrent > pos.tickUpper;\n        }\n\n        return true;\n      } else if (activeFilter === 'in_rage') {\n        if (pool && pool[1]) {\n          return pool[1].tickCurrent >= pos.tickLower && pool[1].tickCurrent <= pos.tickUpper;\n        }\n\n        return true;\n      }\n\n      return true;\n    });\n  }, [positions, validPools, activeFilter, pools]);\n  return {\n    activeFilter: activeFilter,\n    setActiveFilter: setActiveFilter,\n    eligiblePositions: eligiblePositions,\n    filterOptions: filterOptions\n  };\n};\n\n_s5(usePostionFilter, \"kFHj4q5GsJF6/xFuNwog+I5xl1g=\", false, function () {\n  return [useTokens, usePools];\n});\n\nexport var useProMMFarmTVL = function useProMMFarmTVL(fairlaunchAddress, pid) {\n  _s6();\n\n  var _useActiveWeb3React3 = useActiveWeb3React(),\n      chainId = _useActiveWeb3React3.chainId;\n\n  var dataClient = NETWORKS_INFO[chainId || ChainId.MAINNET].elasticClient;\n\n  var _usePoolBlocks = usePoolBlocks(),\n      block24 = _usePoolBlocks.block24;\n\n  var _useQuery = useQuery(PROMM_JOINED_POSITION(fairlaunchAddress.toLowerCase(), pid, block24), {\n    client: dataClient,\n    fetchPolicy: 'cache-first'\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading;\n\n  var rewardAddress = useMemo(function () {\n    var _data$farmingPool;\n\n    return (data === null || data === void 0 ? void 0 : (_data$farmingPool = data.farmingPool) === null || _data$farmingPool === void 0 ? void 0 : _data$farmingPool.rewardTokens.map(function (item) {\n      return isAddressString(item.id);\n    })) || [];\n  }, [data]);\n  var rwTokenMap = useTokens(rewardAddress);\n  var rwTokens = useMemo(function () {\n    return Object.values(rwTokenMap);\n  }, [rwTokenMap]);\n  var prices = useRewardTokenPrices(rwTokens);\n  var priceMap = useMemo(function () {\n    return prices === null || prices === void 0 ? void 0 : prices.reduce(function (acc, cur, index) {\n      var _rwTokens$index;\n\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, (_rwTokens$index = rwTokens[index]) !== null && _rwTokens$index !== void 0 && _rwTokens$index.isToken ? rwTokens[index].address : ZERO_ADDRESS, cur));\n    }, {});\n  }, [prices, rwTokens]);\n  var ethPriceUSD = useETHPrice(VERSION.ELASTIC);\n\n  var _useState3 = useState({\n    tvl: 0,\n    poolAPY: 0,\n    farmAPR: 0\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      farmData = _useState4[0],\n      setData = _useState4[1];\n\n  useEffect(function () {\n    var _data$farmingPool2, _data$farmingPool2$po, _data$farmingPool3, _data$farmingPools, _data$farmingPools$, _data$farmingPools$$p, _data$farmingPool4, _data$farmingPool5, _data$farmingPool6, _data$farmingPool7, _data$farmingPool7$po, _data$farmingPool8, _data$farmingPool8$po;\n\n    if (loading || !Object.values(priceMap).length || farmData.tvl && farmData.poolAPY && farmData.farmAPR) {\n      return;\n    }\n\n    var tvl = 0;\n    data === null || data === void 0 ? void 0 : data.joinedPositions.forEach(function (_ref11) {\n      var position = _ref11.position,\n          pool = _ref11.pool;\n      var token0 = new Token(chainId, pool.token0.id, Number(pool.token0.decimals), pool.token0.symbol);\n      var token1 = new Token(chainId, pool.token1.id, Number(pool.token1.decimals), pool.token1.symbol);\n      var poolObj = new Pool(token0, token1, Number(pool.feeTier), pool.sqrtPrice, pool.liquidity, pool.reinvestL, Number(pool.tick));\n      var pos = new Position({\n        pool: poolObj,\n        liquidity: position.liquidity,\n        tickLower: Number(position.tickLower.tickIdx),\n        tickUpper: Number(position.tickUpper.tickIdx)\n      });\n      tvl += Number(pos.amount0.toExact()) * Number(pool.token0.derivedETH) * Number(ethPriceUSD.currentPrice);\n      tvl += Number(pos.amount1.toExact()) * Number(pool.token1.derivedETH) * Number(ethPriceUSD.currentPrice);\n    });\n    var poolAPY = Number((data === null || data === void 0 ? void 0 : (_data$farmingPool2 = data.farmingPool) === null || _data$farmingPool2 === void 0 ? void 0 : (_data$farmingPool2$po = _data$farmingPool2.pool) === null || _data$farmingPool2$po === void 0 ? void 0 : _data$farmingPool2$po.totalValueLockedUSD) || 0) !== 0 ? (Number((data === null || data === void 0 ? void 0 : (_data$farmingPool3 = data.farmingPool) === null || _data$farmingPool3 === void 0 ? void 0 : _data$farmingPool3.pool.feesUSD) || 0) - Number((data === null || data === void 0 ? void 0 : (_data$farmingPools = data.farmingPools) === null || _data$farmingPools === void 0 ? void 0 : (_data$farmingPools$ = _data$farmingPools[0]) === null || _data$farmingPools$ === void 0 ? void 0 : (_data$farmingPools$$p = _data$farmingPools$.pool) === null || _data$farmingPools$$p === void 0 ? void 0 : _data$farmingPools$$p.feesUSD) || 0)) * 365 * 100 / Number(data === null || data === void 0 ? void 0 : data.farmingPool.pool.totalValueLockedUSD) : 0;\n    var totalRewardValue = data === null || data === void 0 ? void 0 : (_data$farmingPool4 = data.farmingPool) === null || _data$farmingPool4 === void 0 ? void 0 : _data$farmingPool4.rewardTokens.reduce(function (acc, token, index) {\n      var t = TokenAmount.fromRawAmount(new Token(chainId, token.id, Number(token.decimals)), data === null || data === void 0 ? void 0 : data.farmingPool.totalRewardAmounts[index]);\n      return acc + Number(t.toExact()) * priceMap[isAddressString(token.id)];\n    }, 0);\n    var farmDuration = (Number((data === null || data === void 0 ? void 0 : (_data$farmingPool5 = data.farmingPool) === null || _data$farmingPool5 === void 0 ? void 0 : _data$farmingPool5.endTime) || 0) - Number((data === null || data === void 0 ? void 0 : (_data$farmingPool6 = data.farmingPool) === null || _data$farmingPool6 === void 0 ? void 0 : _data$farmingPool6.startTime) || 0)) / 86400;\n    var farmAPR = Number((data === null || data === void 0 ? void 0 : (_data$farmingPool7 = data.farmingPool) === null || _data$farmingPool7 === void 0 ? void 0 : (_data$farmingPool7$po = _data$farmingPool7.pool) === null || _data$farmingPool7$po === void 0 ? void 0 : _data$farmingPool7$po.totalValueLockedUSD) || 0) !== 0 && farmDuration !== 0 ? 365 * 100 * (totalRewardValue || 0) / farmDuration / Number((data === null || data === void 0 ? void 0 : (_data$farmingPool8 = data.farmingPool) === null || _data$farmingPool8 === void 0 ? void 0 : (_data$farmingPool8$po = _data$farmingPool8.pool) === null || _data$farmingPool8$po === void 0 ? void 0 : _data$farmingPool8$po.totalValueLockedUSD) || 1) : 0;\n    setData({\n      tvl: tvl,\n      farmAPR: farmAPR,\n      poolAPY: poolAPY\n    });\n  }, [chainId, data, ethPriceUSD.currentPrice, priceMap, loading, farmData.poolAPY, farmData.tvl, farmData.farmAPR]);\n  return _objectSpread({}, farmData);\n};\n\n_s6(useProMMFarmTVL, \"/IOmDIqAmjo5BEdpbceVXO4q/4I=\", false, function () {\n  return [useActiveWeb3React, usePoolBlocks, useQuery, useTokens, useRewardTokenPrices, useETHPrice];\n});\n\nexport var useFailedNFTs = function useFailedNFTs() {\n  _s7();\n\n  return useSelector(function (state) {\n    return state.prommFarms.failedNFTs;\n  });\n};\n\n_s7(useFailedNFTs, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});","map":{"version":3,"names":["useQuery","defaultAbiCoder","getCreate2Address","keccak256","ChainId","Token","TokenAmount","Pool","Position","BigNumber","useCallback","useEffect","useMemo","useRef","useState","useSelector","PROMM_JOINED_POSITION","PROMM_POOL_ABI","ZERO_ADDRESS","CONTRACT_NOT_FOUND_MSG","NETWORKS_INFO","FARM_CONTRACTS","VERSION","providers","useActiveWeb3React","useAllTokens","useTokens","useProAmmNFTPositionManagerContract","useProMMFarmContract","useProMMFarmContracts","usePools","usePrevious","useETHPrice","useAppDispatch","usePoolBlocks","useTransactionAdder","calculateGasMargin","getContractForReading","isAddressString","useRewardTokenPrices","addFailedNFTs","setLoading","updatePrommFarms","useProMMFarms","state","prommFarms","useGetProMMFarms","dispatch","chainId","account","prommFarmContracts","tokens","allTokensRef","current","positionManager","prevChainId","getProMMFarms","farmsAddress","promises","map","address","contract","Promise","poolLength","getDepositedNFTs","resolve","rewardLocker","all","userDepositedNFT","id","positions","nftInfosFromContract","nftInfos","result","index","tokenId","poolId","MAINNET","elastic","coreFactory","encode","info","token0","token1","fee","initCodeHash","feeGrowthInsideLast","pos","nonce","liquidity","operator","tickLower","tickUpper","rTokenOwed","pids","Array","from","toNumber","keys","pid","getPoolInfo","poolInfo","userNFTForPool","filter","item","poolAddress","getUserInfo","then","res","catch","e","Error","JSON","stringify","userInfo","errorNFTs","forEach","message","includes","push","toString","length","userNFTInfo","stakedLiquidity","rewardPendings","rewardPending","poolContract","swapFeeUnits","getLiquidityState","getPoolState","feeTier","liquidityState","poolState","baseL","reinvestL","sqrtP","currentTick","userDepositedNFTs","token0Info","token1Info","poolInfos","farms","reduce","acc","useProMMFarmsFetchOnlyOne","data","getProMMFarm","firstRender","previousChainId","Object","useFarmAction","addTransactionWithType","posManager","approve","estimateGas","setApprovalForAll","gasLimit","tx","type","summary","hash","deposit","nftIds","withdraw","emergencyWithdraw","stake","liqs","join","unstake","exit","console","log","harvest","poolIds","encodeData","pIds","harvestMultiplePools","usePostionFilter","validPools","filterOptions","code","value","activeFilter","setActiveFilter","tokenList","flat","poolKeys","pools","eligiblePositions","toLowerCase","eq","pool","find","p","tickCurrent","useProMMFarmTVL","fairlaunchAddress","dataClient","elasticClient","block24","client","fetchPolicy","loading","rewardAddress","farmingPool","rewardTokens","rwTokenMap","rwTokens","values","prices","priceMap","cur","isToken","ethPriceUSD","ELASTIC","tvl","poolAPY","farmAPR","farmData","setData","joinedPositions","position","Number","decimals","symbol","poolObj","sqrtPrice","tick","tickIdx","amount0","toExact","derivedETH","currentPrice","amount1","totalValueLockedUSD","feesUSD","farmingPools","totalRewardValue","token","t","fromRawAmount","totalRewardAmounts","farmDuration","endTime","startTime","useFailedNFTs","failedNFTs"],"sources":["/Applications/XAMPP/voxel-interface/src/state/farms/promm/hooks.ts"],"sourcesContent":["import { useQuery } from '@apollo/client'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { ChainId, Token, TokenAmount } from '@kyberswap/ks-sdk-core'\nimport { FeeAmount, Pool, Position } from '@kyberswap/ks-sdk-elastic'\nimport { t } from '@lingui/macro'\nimport { BigNumber } from 'ethers'\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { PROMM_JOINED_POSITION } from 'apollo/queries/promm'\nimport PROMM_POOL_ABI from 'constants/abis/v2/pool.json'\nimport { ZERO_ADDRESS } from 'constants/index'\nimport { CONTRACT_NOT_FOUND_MSG } from 'constants/messages'\nimport { NETWORKS_INFO } from 'constants/networks'\nimport { FARM_CONTRACTS, VERSION } from 'constants/v2'\nimport { providers, useActiveWeb3React } from 'hooks'\nimport { useAllTokens, useTokens } from 'hooks/Tokens'\nimport { useProAmmNFTPositionManagerContract, useProMMFarmContract, useProMMFarmContracts } from 'hooks/useContract'\nimport { usePools } from 'hooks/usePools'\nimport usePrevious from 'hooks/usePrevious'\nimport { AppState } from 'state'\nimport { useETHPrice } from 'state/application/hooks'\nimport { useAppDispatch } from 'state/hooks'\nimport { usePoolBlocks } from 'state/prommPools/hooks'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport { PositionDetails } from 'types/position'\nimport { calculateGasMargin, getContractForReading, isAddressString } from 'utils'\n\nimport { useRewardTokenPrices } from '../hooks'\nimport { addFailedNFTs, setLoading, updatePrommFarms } from './actions'\nimport { ProMMFarm, ProMMFarmResponse } from './types'\n\nexport const useProMMFarms = () => {\n  return useSelector((state: AppState) => state.prommFarms)\n}\n\nexport const useGetProMMFarms = () => {\n  const dispatch = useAppDispatch()\n  const { chainId, account } = useActiveWeb3React()\n\n  const prommFarmContracts = useProMMFarmContracts()\n  const tokens = useAllTokens()\n\n  // dont need all tokens on dependency\n  const allTokensRef = useRef(tokens)\n  allTokensRef.current = tokens\n\n  const positionManager = useProAmmNFTPositionManagerContract()\n\n  const prevChainId = usePrevious(chainId)\n  const getProMMFarms = useCallback(async () => {\n    const farmsAddress = FARM_CONTRACTS[chainId as ChainId]\n\n    if (!farmsAddress) {\n      dispatch(updatePrommFarms({}))\n      return\n    }\n    dispatch(setLoading(true))\n\n    if (prevChainId !== chainId) dispatch(updatePrommFarms({}))\n\n    const promises = farmsAddress.map(async address => {\n      const contract = prommFarmContracts?.[address]\n      if (!contract || !chainId) return\n\n      const [poolLength, userDepositedNFT, rewardLocker] = await Promise.all([\n        contract.poolLength(),\n        account ? await contract.getDepositedNFTs(account) : Promise.resolve([]),\n        contract.rewardLocker(),\n      ])\n\n      const nftInfosFromContract = await Promise.all(\n        userDepositedNFT.map((id: BigNumber) => positionManager?.positions(id)),\n      )\n\n      const nftInfos = nftInfosFromContract.map((result: any, index) => ({\n        tokenId: userDepositedNFT[index],\n        poolId: getCreate2Address(\n          NETWORKS_INFO[chainId || ChainId.MAINNET].elastic.coreFactory,\n          keccak256(\n            ['bytes'],\n            [\n              defaultAbiCoder.encode(\n                ['address', 'address', 'uint24'],\n                [result.info.token0, result.info.token1, result.info.fee],\n              ),\n            ],\n          ),\n          NETWORKS_INFO[chainId || ChainId.MAINNET].elastic.initCodeHash,\n        ),\n        feeGrowthInsideLast: result.pos.feeGrowthInsideLast,\n        nonce: result.pos.nonce,\n        liquidity: result.pos.liquidity,\n        operator: result.pos.operator,\n        tickLower: result.pos.tickLower,\n        tickUpper: result.pos.tickUpper,\n        rTokenOwed: result.pos.rTokenOwed,\n        fee: result.info.fee,\n        token0: result.info.token0,\n        token1: result.info.token1,\n      }))\n\n      const pids = [...Array(BigNumber.from(poolLength).toNumber()).keys()]\n\n      const poolInfos: ProMMFarm[] = await Promise.all(\n        pids.map(async pid => {\n          const poolInfo: ProMMFarmResponse = await contract.getPoolInfo(pid)\n\n          const userNFTForPool = nftInfos.filter(item => item.poolId === poolInfo.poolAddress)\n\n          const userInfo = await Promise.all(\n            userNFTForPool.map(item =>\n              contract\n                .getUserInfo(item.tokenId, pid)\n                .then((res: any) => ({ ...res, pid, tokenId: item.tokenId }))\n                .catch((e: any) => new Error(JSON.stringify(e))),\n            ),\n          )\n\n          const errorNFTs: string[] = []\n          userInfo.forEach((info, index) => {\n            if (info instanceof Error && info.message.includes('Panic'))\n              errorNFTs.push(userNFTForPool[index].tokenId.toString())\n          })\n\n          if (errorNFTs.length) {\n            dispatch(addFailedNFTs(errorNFTs))\n          }\n\n          const userNFTInfo = userInfo\n            // .filter(item => item.pid === pid)\n            .map((item, index) => {\n              return {\n                ...userNFTForPool[index],\n                stakedLiquidity: item instanceof Error ? BigNumber.from(0) : item.liquidity,\n                rewardPendings: item instanceof Error ? [] : item.rewardPending,\n              }\n            })\n\n          const poolContract = getContractForReading(poolInfo.poolAddress, PROMM_POOL_ABI, providers[chainId])\n\n          const [token0, token1, feeTier, liquidityState, poolState] = await Promise.all([\n            poolContract.token0(),\n            poolContract.token1(),\n            poolContract.swapFeeUnits(),\n            poolContract.getLiquidityState(),\n            poolContract.getPoolState(),\n          ])\n\n          return {\n            ...poolInfo,\n            token0,\n            token1,\n            feeTier,\n            baseL: liquidityState.baseL,\n            reinvestL: liquidityState.reinvestL,\n            sqrtP: poolState.sqrtP,\n            currentTick: poolState.currentTick,\n            pid: pid,\n            userDepositedNFTs: userNFTInfo,\n            rewardLocker,\n            token0Info: allTokensRef.current?.[token0],\n            token1Info: allTokensRef.current?.[token1],\n          }\n        }),\n      )\n\n      return poolInfos\n    })\n\n    const farms = await Promise.all(promises)\n\n    dispatch(\n      updatePrommFarms(\n        farmsAddress.reduce((acc, address, index) => {\n          return {\n            ...acc,\n            [address]: farms[index],\n          }\n        }, {}),\n      ),\n    )\n    dispatch(setLoading(false))\n  }, [chainId, prevChainId, dispatch, prommFarmContracts, account, positionManager])\n\n  return getProMMFarms\n}\n\nexport const useProMMFarmsFetchOnlyOne = () => {\n  const { data: farms } = useProMMFarms()\n  const getProMMFarm = useGetProMMFarms()\n\n  const firstRender = useRef(true)\n\n  const { chainId } = useActiveWeb3React()\n  const previousChainId = usePrevious(chainId)\n\n  useEffect(() => {\n    if ((!Object.keys(farms).length && firstRender.current) || chainId !== previousChainId) {\n      getProMMFarm()\n      firstRender.current = false\n    }\n  }, [previousChainId, farms, getProMMFarm, chainId])\n\n  return farms\n}\n\nexport const useFarmAction = (address: string) => {\n  const addTransactionWithType = useTransactionAdder()\n  const contract = useProMMFarmContract(address)\n  const posManager = useProAmmNFTPositionManagerContract()\n\n  const approve = useCallback(async () => {\n    if (!posManager) {\n      throw new Error(CONTRACT_NOT_FOUND_MSG)\n    }\n    const estimateGas = await posManager.estimateGas.setApprovalForAll(address, true)\n    const tx = await posManager.setApprovalForAll(address, true, {\n      gasLimit: calculateGasMargin(estimateGas),\n    })\n    addTransactionWithType(tx, { type: 'Approve', summary: `Elastic Farm` })\n\n    return tx.hash\n  }, [addTransactionWithType, address, posManager])\n\n  // Deposit\n  const deposit = useCallback(\n    async (nftIds: BigNumber[]) => {\n      if (!contract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG)\n      }\n\n      const estimateGas = await contract.estimateGas.deposit(nftIds)\n      const tx = await contract.deposit(nftIds, {\n        gasLimit: calculateGasMargin(estimateGas),\n      })\n      addTransactionWithType(tx, { type: 'Deposit', summary: `liquidity` })\n\n      return tx.hash\n    },\n    [addTransactionWithType, contract],\n  )\n\n  const withdraw = useCallback(\n    async (nftIds: BigNumber[]) => {\n      if (!contract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG)\n      }\n\n      const estimateGas = await contract.estimateGas.withdraw(nftIds)\n      const tx = await contract.withdraw(nftIds, {\n        gasLimit: calculateGasMargin(estimateGas),\n      })\n      addTransactionWithType(tx, { type: 'Withdraw', summary: `liquidity` })\n\n      return tx.hash\n    },\n    [addTransactionWithType, contract],\n  )\n\n  const emergencyWithdraw = useCallback(\n    async (nftIds: BigNumber[]) => {\n      if (!contract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG)\n      }\n      const estimateGas = await contract.estimateGas.emergencyWithdraw(nftIds)\n      const tx = await contract.emergencyWithdraw(nftIds, {\n        gasLimit: calculateGasMargin(estimateGas),\n      })\n      addTransactionWithType(tx, { type: 'ForceWithdraw' })\n\n      return tx.hash\n    },\n    [addTransactionWithType, contract],\n  )\n\n  const stake = useCallback(\n    async (pid: BigNumber, nftIds: BigNumber[], liqs: BigNumber[]) => {\n      if (!contract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG)\n      }\n\n      const estimateGas = await contract.estimateGas.join(pid, nftIds, liqs)\n      const tx = await contract.join(pid, nftIds, liqs, {\n        gasLimit: calculateGasMargin(estimateGas),\n      })\n      addTransactionWithType(tx, { type: 'Stake', summary: `liquidity into farm` })\n\n      return tx.hash\n    },\n    [addTransactionWithType, contract],\n  )\n\n  const unstake = useCallback(\n    async (pid: BigNumber, nftIds: BigNumber[], liqs: BigNumber[]) => {\n      if (!contract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG)\n      }\n      try {\n        const estimateGas = await contract.estimateGas.exit(pid, nftIds, liqs)\n        const tx = await contract.exit(pid, nftIds, liqs, {\n          gasLimit: calculateGasMargin(estimateGas),\n        })\n        addTransactionWithType(tx, { type: 'Unstake', summary: `liquidity from farm` })\n\n        return tx.hash\n      } catch (e) {\n        console.log(e)\n      }\n    },\n    [addTransactionWithType, contract],\n  )\n\n  const harvest = useCallback(\n    async (nftIds: BigNumber[], poolIds: BigNumber[]) => {\n      if (!contract) return\n\n      const encodeData = poolIds.map(id => defaultAbiCoder.encode(['tupple(uint256[] pIds)'], [{ pIds: [id] }]))\n\n      try {\n        const estimateGas = await contract.estimateGas.harvestMultiplePools(nftIds, encodeData)\n        const tx = await contract.harvestMultiplePools(nftIds, encodeData, {\n          gasLimit: calculateGasMargin(estimateGas),\n        })\n        addTransactionWithType(tx, { type: 'Harvest' })\n        return tx\n      } catch (e) {\n        console.log(e)\n      }\n    },\n    [addTransactionWithType, contract],\n  )\n\n  return { deposit, withdraw, approve, stake, unstake, harvest, emergencyWithdraw }\n}\n\nexport const usePostionFilter = (positions: PositionDetails[], validPools: string[]) => {\n  const filterOptions = [\n    {\n      code: 'in_rage',\n      value: t`In range`,\n    },\n    {\n      code: 'out_range',\n      value: t`Out of range`,\n    },\n    {\n      code: 'all',\n      value: t`All positions`,\n    },\n  ]\n\n  const [activeFilter, setActiveFilter] = useState('all')\n\n  const tokenList = useMemo(() => {\n    if (!positions) return []\n    return positions?.map(pos => [pos.token0, pos.token1]).flat()\n  }, [positions])\n\n  const tokens = useTokens(tokenList)\n\n  const poolKeys = useMemo(() => {\n    if (!tokens) return []\n    return positions?.map(\n      pos =>\n        [tokens[pos.token0], tokens[pos.token1], pos.fee] as [\n          Token | undefined,\n          Token | undefined,\n          FeeAmount | undefined,\n        ],\n    )\n  }, [tokens, positions])\n\n  const pools = usePools(poolKeys)\n\n  const eligiblePositions = useMemo(() => {\n    return positions\n      ?.filter(pos => validPools?.includes(pos.poolId.toLowerCase()))\n      .filter(pos => {\n        // remove closed position\n        if (pos.liquidity.eq(0)) return false\n\n        const pool = pools.find(\n          p =>\n            p[1]?.token0.address.toLowerCase() === pos.token0.toLowerCase() &&\n            p[1]?.token1.address.toLowerCase() === pos.token1.toLowerCase() &&\n            p[1]?.fee === pos.fee,\n        )\n\n        if (activeFilter === 'out_range') {\n          if (pool && pool[1]) {\n            return pool[1].tickCurrent < pos.tickLower || pool[1].tickCurrent > pos.tickUpper\n          }\n          return true\n        } else if (activeFilter === 'in_rage') {\n          if (pool && pool[1]) {\n            return pool[1].tickCurrent >= pos.tickLower && pool[1].tickCurrent <= pos.tickUpper\n          }\n          return true\n        }\n        return true\n      })\n  }, [positions, validPools, activeFilter, pools])\n\n  return {\n    activeFilter,\n    setActiveFilter,\n    eligiblePositions,\n    filterOptions,\n  }\n}\n\ntype Response = {\n  joinedPositions: {\n    id: number\n    pool: {\n      liquidity: string\n      reinvestL: string\n      tick: number\n\n      feeTier: number\n      sqrtPrice: string\n      token0: {\n        id: string\n        symbol: string\n        name: string\n        decimals: number\n        derivedETH: string\n      }\n      token1: {\n        id: string\n        symbol: string\n        name: string\n        decimals: number\n        derivedETH: string\n      }\n    }\n\n    position: {\n      tickLower: {\n        tickIdx: number\n      }\n      tickUpper: {\n        tickIdx: number\n      }\n      liquidity: number\n    }\n  }[]\n\n  farmingPool: {\n    id: string\n    startTime: string\n    endTime: string\n    pool: {\n      feesUSD: string\n      totalValueLockedUSD: string\n    }\n    rewardTokens: {\n      decimals: string\n      id: string\n      symbol: string\n      name: string\n    }[]\n    totalRewardAmounts: string[]\n  }\n  farmingPools: {\n    pool: {\n      feesUSD: string\n      totalValueLockedUSD: string\n    }\n  }[]\n}\n\nexport const useProMMFarmTVL = (fairlaunchAddress: string, pid: number) => {\n  const { chainId } = useActiveWeb3React()\n  const dataClient = NETWORKS_INFO[chainId || ChainId.MAINNET].elasticClient\n  const { block24 } = usePoolBlocks()\n\n  const { data, loading } = useQuery<Response>(PROMM_JOINED_POSITION(fairlaunchAddress.toLowerCase(), pid, block24), {\n    client: dataClient,\n    fetchPolicy: 'cache-first',\n  })\n\n  const rewardAddress = useMemo(\n    () => data?.farmingPool?.rewardTokens.map(item => isAddressString(item.id)) || [],\n    [data],\n  )\n  const rwTokenMap = useTokens(rewardAddress)\n\n  const rwTokens = useMemo(() => Object.values(rwTokenMap), [rwTokenMap])\n\n  const prices = useRewardTokenPrices(rwTokens)\n\n  const priceMap: { [key: string]: number } = useMemo(\n    () =>\n      prices?.reduce(\n        (acc, cur, index) => ({\n          ...acc,\n          [rwTokens[index]?.isToken ? rwTokens[index].address : ZERO_ADDRESS]: cur,\n        }),\n        {},\n      ),\n    [prices, rwTokens],\n  )\n\n  const ethPriceUSD = useETHPrice(VERSION.ELASTIC)\n\n  const [farmData, setData] = useState({\n    tvl: 0,\n    poolAPY: 0,\n    farmAPR: 0,\n  })\n\n  useEffect(() => {\n    if (loading || !Object.values(priceMap).length || (farmData.tvl && farmData.poolAPY && farmData.farmAPR)) {\n      return\n    }\n    let tvl = 0\n    data?.joinedPositions.forEach(({ position, pool }) => {\n      const token0 = new Token(chainId as ChainId, pool.token0.id, Number(pool.token0.decimals), pool.token0.symbol)\n      const token1 = new Token(chainId as ChainId, pool.token1.id, Number(pool.token1.decimals), pool.token1.symbol)\n      const poolObj = new Pool(\n        token0,\n        token1,\n        Number(pool.feeTier),\n        pool.sqrtPrice,\n        pool.liquidity,\n        pool.reinvestL,\n        Number(pool.tick),\n      )\n\n      const pos = new Position({\n        pool: poolObj,\n        liquidity: position.liquidity,\n        tickLower: Number(position.tickLower.tickIdx),\n        tickUpper: Number(position.tickUpper.tickIdx),\n      })\n\n      tvl += Number(pos.amount0.toExact()) * Number(pool.token0.derivedETH) * Number(ethPriceUSD.currentPrice)\n      tvl += Number(pos.amount1.toExact()) * Number(pool.token1.derivedETH) * Number(ethPriceUSD.currentPrice)\n    })\n\n    const poolAPY =\n      Number(data?.farmingPool?.pool?.totalValueLockedUSD || 0) !== 0\n        ? ((Number(data?.farmingPool?.pool.feesUSD || 0) - Number(data?.farmingPools?.[0]?.pool?.feesUSD || 0)) *\n            365 *\n            100) /\n          Number(data?.farmingPool.pool.totalValueLockedUSD)\n        : 0\n    const totalRewardValue = data?.farmingPool?.rewardTokens.reduce((acc, token, index) => {\n      const t = TokenAmount.fromRawAmount(\n        new Token(chainId as ChainId, token.id, Number(token.decimals)),\n        data?.farmingPool.totalRewardAmounts[index],\n      )\n      return acc + Number(t.toExact()) * priceMap[isAddressString(token.id)]\n    }, 0)\n\n    const farmDuration = (Number(data?.farmingPool?.endTime || 0) - Number(data?.farmingPool?.startTime || 0)) / 86400\n\n    const farmAPR =\n      Number(data?.farmingPool?.pool?.totalValueLockedUSD || 0) !== 0 && farmDuration !== 0\n        ? (365 * 100 * (totalRewardValue || 0)) /\n          farmDuration /\n          Number(data?.farmingPool?.pool?.totalValueLockedUSD || 1)\n        : 0\n\n    setData({ tvl, farmAPR, poolAPY })\n  }, [chainId, data, ethPriceUSD.currentPrice, priceMap, loading, farmData.poolAPY, farmData.tvl, farmData.farmAPR])\n\n  return { ...farmData }\n}\n\nexport const useFailedNFTs = () => {\n  return useSelector((state: AppState) => state.prommFarms.failedNFTs)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}