{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\nvar _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { CONTRACT_NOT_FOUND_MSG } from 'constants/messages';\nimport { useRewardLockerContract } from 'hooks/useContract';\nimport { useTransactionAdder } from 'state/transactions/hooks';\nimport { calculateGasMargin } from 'utils';\n\nvar useVesting = function useVesting(rewardLockerAddress) {\n  _s();\n\n  var addTransactionWithType = useTransactionAdder();\n  var lockerContract = useRewardLockerContract(rewardLockerAddress);\n  var vestAtIndex = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(token, index) {\n      var estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (lockerContract) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n            case 2:\n              _context.next = 4;\n              return lockerContract.estimateGas.vestScheduleAtIndices(token, index);\n\n            case 4:\n              estimateGas = _context.sent;\n              _context.next = 7;\n              return lockerContract.vestScheduleAtIndices(token, index, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 7:\n              tx = _context.sent;\n              addTransactionWithType(tx, {\n                type: 'Claim',\n                summary: 'reward'\n              });\n              return _context.abrupt(\"return\", tx.hash);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [lockerContract, addTransactionWithType]);\n  var vestMultipleTokensAtIndices = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tokens, indices) {\n      var estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (lockerContract) {\n                _context2.next = 2;\n                break;\n              }\n\n              throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n            case 2:\n              _context2.next = 4;\n              return lockerContract.estimateGas.vestScheduleForMultipleTokensAtIndices(tokens, indices);\n\n            case 4:\n              estimateGas = _context2.sent;\n              _context2.next = 7;\n              return lockerContract.vestScheduleForMultipleTokensAtIndices(tokens, indices, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 7:\n              tx = _context2.sent;\n              addTransactionWithType(tx, {\n                type: 'Claim',\n                summary: 'all rewards'\n              });\n              return _context2.abrupt(\"return\", tx.hash);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [lockerContract, addTransactionWithType]);\n  return {\n    vestAtIndex: vestAtIndex,\n    vestMultipleTokensAtIndices: vestMultipleTokensAtIndices\n  };\n};\n\n_s(useVesting, \"Jg6Z+oUiuXZs3xl5ZW6uJ7oinkA=\", false, function () {\n  return [useTransactionAdder, useRewardLockerContract];\n});\n\nexport default useVesting;","map":{"version":3,"names":["useCallback","CONTRACT_NOT_FOUND_MSG","useRewardLockerContract","useTransactionAdder","calculateGasMargin","useVesting","rewardLockerAddress","addTransactionWithType","lockerContract","vestAtIndex","token","index","Error","estimateGas","vestScheduleAtIndices","gasLimit","tx","type","summary","hash","vestMultipleTokensAtIndices","tokens","indices","vestScheduleForMultipleTokensAtIndices"],"sources":["/Applications/XAMPP/voxel-interface/src/hooks/useVesting.tsx"],"sourcesContent":["import { useCallback } from 'react'\n\nimport { CONTRACT_NOT_FOUND_MSG } from 'constants/messages'\nimport { useRewardLockerContract } from 'hooks/useContract'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport { calculateGasMargin } from 'utils'\n\nconst useVesting = (rewardLockerAddress: string) => {\n  const addTransactionWithType = useTransactionAdder()\n  const lockerContract = useRewardLockerContract(rewardLockerAddress)\n\n  const vestAtIndex = useCallback(\n    async (token: string, index: number[]) => {\n      if (!lockerContract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG)\n      }\n\n      const estimateGas = await lockerContract.estimateGas.vestScheduleAtIndices(token, index)\n      const tx = await lockerContract.vestScheduleAtIndices(token, index, {\n        gasLimit: calculateGasMargin(estimateGas),\n      })\n      addTransactionWithType(tx, { type: 'Claim', summary: 'reward' })\n\n      return tx.hash\n    },\n    [lockerContract, addTransactionWithType],\n  )\n\n  const vestMultipleTokensAtIndices = useCallback(\n    async (tokens: string[], indices: number[][]) => {\n      if (!lockerContract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG)\n      }\n\n      const estimateGas = await lockerContract.estimateGas.vestScheduleForMultipleTokensAtIndices(tokens, indices)\n      const tx = await lockerContract.vestScheduleForMultipleTokensAtIndices(tokens, indices, {\n        gasLimit: calculateGasMargin(estimateGas),\n      })\n      addTransactionWithType(tx, { type: 'Claim', summary: 'all rewards' })\n\n      return tx.hash\n    },\n    [lockerContract, addTransactionWithType],\n  )\n\n  return { vestAtIndex, vestMultipleTokensAtIndices }\n}\n\nexport default useVesting\n"],"mappings":";;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,sBAAT,QAAuC,oBAAvC;AACA,SAASC,uBAAT,QAAwC,mBAAxC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,kBAAT,QAAmC,OAAnC;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,mBAAD,EAAiC;EAAA;;EAClD,IAAMC,sBAAsB,GAAGJ,mBAAmB,EAAlD;EACA,IAAMK,cAAc,GAAGN,uBAAuB,CAACI,mBAAD,CAA9C;EAEA,IAAMG,WAAW,GAAGT,WAAW;IAAA,sEAC7B,iBAAOU,KAAP,EAAsBC,KAAtB;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACOH,cADP;gBAAA;gBAAA;cAAA;;cAAA,MAEU,IAAII,KAAJ,CAAUX,sBAAV,CAFV;;YAAA;cAAA;cAAA,OAK4BO,cAAc,CAACK,WAAf,CAA2BC,qBAA3B,CAAiDJ,KAAjD,EAAwDC,KAAxD,CAL5B;;YAAA;cAKQE,WALR;cAAA;cAAA,OAMmBL,cAAc,CAACM,qBAAf,CAAqCJ,KAArC,EAA4CC,KAA5C,EAAmD;gBAClEI,QAAQ,EAAEX,kBAAkB,CAACS,WAAD;cADsC,CAAnD,CANnB;;YAAA;cAMQG,EANR;cASET,sBAAsB,CAACS,EAAD,EAAK;gBAAEC,IAAI,EAAE,OAAR;gBAAiBC,OAAO,EAAE;cAA1B,CAAL,CAAtB;cATF,iCAWSF,EAAE,CAACG,IAXZ;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAD6B;;IAAA;MAAA;IAAA;EAAA,KAc7B,CAACX,cAAD,EAAiBD,sBAAjB,CAd6B,CAA/B;EAiBA,IAAMa,2BAA2B,GAAGpB,WAAW;IAAA,uEAC7C,kBAAOqB,MAAP,EAAyBC,OAAzB;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACOd,cADP;gBAAA;gBAAA;cAAA;;cAAA,MAEU,IAAII,KAAJ,CAAUX,sBAAV,CAFV;;YAAA;cAAA;cAAA,OAK4BO,cAAc,CAACK,WAAf,CAA2BU,sCAA3B,CAAkEF,MAAlE,EAA0EC,OAA1E,CAL5B;;YAAA;cAKQT,WALR;cAAA;cAAA,OAMmBL,cAAc,CAACe,sCAAf,CAAsDF,MAAtD,EAA8DC,OAA9D,EAAuE;gBACtFP,QAAQ,EAAEX,kBAAkB,CAACS,WAAD;cAD0D,CAAvE,CANnB;;YAAA;cAMQG,EANR;cASET,sBAAsB,CAACS,EAAD,EAAK;gBAAEC,IAAI,EAAE,OAAR;gBAAiBC,OAAO,EAAE;cAA1B,CAAL,CAAtB;cATF,kCAWSF,EAAE,CAACG,IAXZ;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAD6C;;IAAA;MAAA;IAAA;EAAA,KAc7C,CAACX,cAAD,EAAiBD,sBAAjB,CAd6C,CAA/C;EAiBA,OAAO;IAAEE,WAAW,EAAXA,WAAF;IAAeW,2BAA2B,EAA3BA;EAAf,CAAP;AACD,CAvCD;;GAAMf,U;UAC2BF,mB,EACRD,uB;;;AAuCzB,eAAeG,UAAf"},"metadata":{},"sourceType":"module"}