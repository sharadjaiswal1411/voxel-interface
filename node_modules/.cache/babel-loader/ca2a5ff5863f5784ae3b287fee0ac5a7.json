{"ast":null,"code":"import _taggedTemplateLiteral from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12;\n\nimport { gql } from '@apollo/client';\nimport { BUNDLE_ID } from '../../constants';\nexport var SUBGRAPH_BLOCK_NUMBER = function SUBGRAPH_BLOCK_NUMBER() {\n  return gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query block_number {\\n    _meta {\\n      block {\\n        number\\n      }\\n    }\\n  }\\n\"])));\n};\n_c = SUBGRAPH_BLOCK_NUMBER;\nexport var ETH_PRICE = function ETH_PRICE(block) {\n  var queryString = block ? \"\\n    query bundles {\\n      bundles(where: { id: \".concat(BUNDLE_ID, \" } block: {number: \").concat(block, \"}) {\\n        id\\n        ethPrice\\n      }\\n    }\\n  \") : \" query bundles {\\n      bundles(where: { id: \".concat(BUNDLE_ID, \" }) {\\n        id\\n        ethPrice\\n      }\\n    }\\n  \");\n  return gql(queryString);\n};\n_c2 = ETH_PRICE;\nexport var PROMM_ETH_PRICE = function PROMM_ETH_PRICE(block) {\n  var queryString = block ? \"\\n    query bundles {\\n      bundles(where: { id: \".concat(BUNDLE_ID, \" } block: {number: \").concat(block, \"}) {\\n        id\\n        ethPriceUSD\\n      }\\n    }\\n  \") : \" query bundles {\\n      bundles(where: { id: \".concat(BUNDLE_ID, \" }) {\\n        id\\n        ethPriceUSD\\n      }\\n    }\\n  \");\n  return gql(queryString);\n};\n_c3 = PROMM_ETH_PRICE;\nexport var TOKEN_DERIVED_ETH = function TOKEN_DERIVED_ETH(tokenAddress) {\n  var queryString = \"\\n    query tokens {\\n      tokens(where: { id: \\\"\".concat(tokenAddress.toLowerCase(), \"\\\"} ) {\\n        derivedETH\\n      }\\n    }\\n    \");\n  return gql(queryString);\n};\n_c4 = TOKEN_DERIVED_ETH;\nexport var GLOBAL_DATA_ELASTIC = function GLOBAL_DATA_ELASTIC() {\n  var queryString = \"query factories {\\n    factories {\\n        id\\n        poolCount\\n        txCount\\n        totalVolumeUSD\\n        totalVolumeETH\\n        totalFeesUSD\\n        untrackedVolumeUSD\\n        totalValueLockedUSD\\n        totalValueLockedETH\\n      }\\n    }\";\n  return gql(queryString);\n};\n_c5 = GLOBAL_DATA_ELASTIC;\nexport var GLOBAL_DATA = function GLOBAL_DATA(block) {\n  var queryString = \"query dmmFactories {\\n    dmmFactories\".concat(block ? \"(block: { number: \".concat(block, \"})\") : \"\", \" {\\n        id\\n        totalVolumeUSD\\n        totalFeeUSD\\n        totalVolumeETH\\n        untrackedVolumeUSD\\n        totalLiquidityUSD\\n        totalLiquidityETH\\n        totalAmplifiedLiquidityUSD\\n        totalAmplifiedLiquidityETH\\n        txCount\\n        pairCount\\n      }\\n    }\");\n  return gql(queryString);\n};\n_c6 = GLOBAL_DATA;\nexport var GET_BLOCK = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  query blocks($timestampFrom: Int!, $timestampTo: Int!) {\\n    blocks(\\n      first: 1\\n      orderBy: timestamp\\n      orderDirection: asc\\n      where: { timestamp_gt: $timestampFrom, timestamp_lt: $timestampTo }\\n    ) {\\n      id\\n      number\\n      timestamp\\n    }\\n  }\\n\"])));\nexport var GET_BLOCKS = function GET_BLOCKS(timestamps) {\n  var queryString = 'query blocks {';\n  queryString += timestamps.map(function (timestamp) {\n    return \"t\".concat(timestamp, \":blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: \").concat(timestamp, \", timestamp_lt: \").concat(timestamp + 600, \" }) {\\n      number\\n    }\");\n  });\n  queryString += '}';\n  return gql(queryString);\n};\n_c7 = GET_BLOCKS;\n\nvar PoolFields = function PoolFields(withFee) {\n  return \"\\n  fragment PoolFields on Pool {\\n    id\\n    txCount\\n    token0 {\\n      id\\n      symbol\\n      name\\n      decimals\\n      totalLiquidity\\n      derivedETH\\n    }\\n    token1 {\\n      id\\n      symbol\\n      name\\n      decimals\\n      totalLiquidity\\n      derivedETH\\n    }\\n    amp\\n    reserve0\\n    reserve1\\n    vReserve0\\n    vReserve1\\n    reserveUSD\\n    totalSupply\\n    trackedReserveETH\\n    reserveETH\\n    volumeUSD\\n    \".concat(withFee ? 'fee' : '', \"\\n    feeUSD\\n    untrackedVolumeUSD\\n    untrackedFeeUSD\\n    token0Price\\n    token1Price\\n    token0PriceMin\\n    token0PriceMax\\n    token1PriceMin\\n    token1PriceMax\\n    createdAtTimestamp\\n  }\\n\");\n};\n\n_c8 = PoolFields;\nexport var USER_POSITIONS = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n  query liquidityPositions($user: Bytes!) {\\n    liquidityPositions(where: { user: $user }) {\\n      pair {\\n        id\\n        reserve0\\n        reserve1\\n        reserveUSD\\n        token0 {\\n          id\\n          symbol\\n          derivedETH\\n        }\\n        token1 {\\n          id\\n          symbol\\n          derivedETH\\n        }\\n        totalSupply\\n      }\\n      pool {\\n        id\\n        reserve0\\n        reserve1\\n        reserveUSD\\n        token0 {\\n          id\\n          symbol\\n          derivedETH\\n        }\\n        token1 {\\n          id\\n          symbol\\n          derivedETH\\n        }\\n        totalSupply\\n      }\\n      liquidityTokenBalance\\n    }\\n  }\\n\"])));\nexport var USER_LIQUIDITY_POSITION_SNAPSHOTS = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n  query liquidityPositionSnapshots($account: String!) {\\n    liquidityPositionSnapshots(where: { user: $account }) {\\n      pool {\\n        id\\n      }\\n      liquidityTokenBalance\\n      liquidityTokenTotalSupply\\n      reserveUSD\\n      timestamp\\n    }\\n  }\\n\"])));\nexport var POOL_DATA = function POOL_DATA(poolAddress, block, withFee) {\n  var queryString = \"\\n    query pools {\\n      pools(\".concat(block ? \"block: {number: \".concat(block, \"}\") : \"\", \" where: { id: \\\"\").concat(poolAddress, \"\\\"} ) {\\n        ...PoolFields\\n      }\\n    }\\n    \").concat(PoolFields(withFee), \"\\n    \");\n  return gql(queryString);\n};\n_c9 = POOL_DATA;\nexport var POOL_COUNT = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n  {\\n    dmmFactories {\\n      poolCount\\n    }\\n  }\\n\"])));\nexport var POOLS_BULK_FROM_LIST = function POOLS_BULK_FROM_LIST(pools, withFee) {\n  var poolsString = \"[\";\n  pools.map(function (pool) {\n    return poolsString += \"\\\"\".concat(pool, \"\\\"\");\n  });\n  poolsString += ']';\n  var queryString = \"\\n  query pools {\\n    pools(first: \".concat(pools.length, \", where: {id_in: \").concat(poolsString, \"}, orderBy: reserveUSD, orderDirection: desc) {\\n      ...PoolFields\\n    }\\n  }\\n  \");\n  return gql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\n    \", \"\\n    \", \"\\n  \"])), PoolFields(withFee), queryString);\n};\n_c10 = POOLS_BULK_FROM_LIST;\nexport var POOLS_BULK_WITH_PAGINATION = function POOLS_BULK_WITH_PAGINATION(first, skip, withFee) {\n  var queryString = \"\\n  query pools {\\n    pools(first: \".concat(first, \", skip: \").concat(skip, \") {\\n      ...PoolFields\\n    }\\n  }\\n  \");\n  return gql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\\n    \", \"\\n    \", \"\\n  \"])), PoolFields(withFee), queryString);\n};\n_c11 = POOLS_BULK_WITH_PAGINATION;\nexport var POOLS_HISTORICAL_BULK_FROM_LIST = function POOLS_HISTORICAL_BULK_FROM_LIST(block, pools, withFee) {\n  var poolsString = \"[\";\n  pools.map(function (pool) {\n    return poolsString += \"\\\"\".concat(pool, \"\\\"\");\n  });\n  poolsString += ']';\n  var queryString = \"\\n  query pools {\\n    pools(first: \".concat(pools.length, \", where: {id_in: \").concat(poolsString, \"}, block: {number: \").concat(block, \"}, orderBy: reserveUSD, orderDirection: desc) {\\n      id\\n      reserveUSD\\n      trackedReserveETH\\n      volumeUSD\\n      \").concat(withFee ? 'fee' : '', \"\\n      feeUSD\\n      untrackedVolumeUSD\\n      untrackedFeeUSD\\n    }\\n  }\\n  \");\n  return gql(queryString);\n};\n_c12 = POOLS_HISTORICAL_BULK_FROM_LIST;\nexport var POOLS_HISTORICAL_BULK_WITH_PAGINATION = function POOLS_HISTORICAL_BULK_WITH_PAGINATION(first, skip, block, withFee) {\n  var queryString = \"\\n  query pools {\\n    pools(first: \".concat(first, \", skip: \").concat(skip, \", block: {number: \").concat(block, \"}) {\\n      id\\n      reserveUSD\\n      trackedReserveETH\\n      volumeUSD\\n      \").concat(withFee ? 'fee' : '', \"\\n      feeUSD\\n      untrackedVolumeUSD\\n      untrackedFeeUSD\\n    }\\n  }\\n  \");\n  return gql(queryString);\n};\n_c13 = POOLS_HISTORICAL_BULK_WITH_PAGINATION;\nexport var FARM_DATA = gql(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\\n  query farmData($poolsList: [Bytes]!) {\\n    pools(where: { id_in: $poolsList }) {\\n      id\\n      token0 {\\n        id\\n        symbol\\n        name\\n        decimals\\n      }\\n      token1 {\\n        id\\n        symbol\\n        name\\n        decimals\\n      }\\n      amp\\n      reserveUSD\\n      totalSupply\\n    }\\n  }\\n\"])));\nexport var FARM_HISTORIES = gql(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\\n  query farmHistories($user: String!) {\\n    deposits(where: { user: $user }) {\\n      id\\n      timestamp\\n      poolID\\n      stakeToken\\n      amount\\n    }\\n    withdraws(where: { user: $user }) {\\n      id\\n      timestamp\\n      poolID\\n      stakeToken\\n      amount\\n    }\\n    harvests(where: { user: $user }) {\\n      id\\n      timestamp\\n      poolID\\n      rewardToken\\n      stakeToken\\n      amount\\n    }\\n    vests(where: { user: $user }) {\\n      id\\n      timestamp\\n      rewardToken\\n      amount\\n    }\\n  }\\n\"])));\nexport var GET_POOL_VALUES_AFTER_MINTS_SUCCESS = gql(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\\n  query getPoolValuesAfterMintsSuccess($poolAddress: String!) {\\n    pool(id: $poolAddress) {\\n      id\\n      reserve0\\n      reserve1\\n      reserveUSD\\n      mints(orderBy: timestamp, orderDirection: desc, first: 20) {\\n        id\\n        amount0\\n        amount1\\n        amountUSD\\n      }\\n    }\\n  }\\n\"])));\nexport var GET_POOL_VALUES_AFTER_BURNS_SUCCESS = gql(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"\\n  query getPoolValuesAfterBurnsSuccess($poolAddress: String!) {\\n    pool(id: $poolAddress) {\\n      id\\n      reserve0\\n      reserve1\\n      reserveUSD\\n      burns(orderBy: timestamp, orderDirection: desc, first: 20) {\\n        id\\n        amount0\\n        amount1\\n        amountUSD\\n      }\\n    }\\n  }\\n\"])));\nexport var GET_MINT_VALUES_AFTER_CREATE_POOL_SUCCESS = gql(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"\\n  query getPoolValuesAfterBurnsSuccess($transactionHash: String!) {\\n    transaction(id: $transactionHash) {\\n      id\\n      mints {\\n        id\\n        amount0\\n        amount1\\n        amountUSD\\n      }\\n    }\\n  }\\n\"])));\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;\n\n$RefreshReg$(_c, \"SUBGRAPH_BLOCK_NUMBER\");\n$RefreshReg$(_c2, \"ETH_PRICE\");\n$RefreshReg$(_c3, \"PROMM_ETH_PRICE\");\n$RefreshReg$(_c4, \"TOKEN_DERIVED_ETH\");\n$RefreshReg$(_c5, \"GLOBAL_DATA_ELASTIC\");\n$RefreshReg$(_c6, \"GLOBAL_DATA\");\n$RefreshReg$(_c7, \"GET_BLOCKS\");\n$RefreshReg$(_c8, \"PoolFields\");\n$RefreshReg$(_c9, \"POOL_DATA\");\n$RefreshReg$(_c10, \"POOLS_BULK_FROM_LIST\");\n$RefreshReg$(_c11, \"POOLS_BULK_WITH_PAGINATION\");\n$RefreshReg$(_c12, \"POOLS_HISTORICAL_BULK_FROM_LIST\");\n$RefreshReg$(_c13, \"POOLS_HISTORICAL_BULK_WITH_PAGINATION\");","map":{"version":3,"names":["gql","BUNDLE_ID","SUBGRAPH_BLOCK_NUMBER","ETH_PRICE","block","queryString","PROMM_ETH_PRICE","TOKEN_DERIVED_ETH","tokenAddress","toLowerCase","GLOBAL_DATA_ELASTIC","GLOBAL_DATA","GET_BLOCK","GET_BLOCKS","timestamps","map","timestamp","PoolFields","withFee","USER_POSITIONS","USER_LIQUIDITY_POSITION_SNAPSHOTS","POOL_DATA","poolAddress","POOL_COUNT","POOLS_BULK_FROM_LIST","pools","poolsString","pool","length","POOLS_BULK_WITH_PAGINATION","first","skip","POOLS_HISTORICAL_BULK_FROM_LIST","POOLS_HISTORICAL_BULK_WITH_PAGINATION","FARM_DATA","FARM_HISTORIES","GET_POOL_VALUES_AFTER_MINTS_SUCCESS","GET_POOL_VALUES_AFTER_BURNS_SUCCESS","GET_MINT_VALUES_AFTER_CREATE_POOL_SUCCESS"],"sources":["/Applications/XAMPP/voxel-interface/src/apollo/queries/index.ts"],"sourcesContent":["import { gql } from '@apollo/client'\n\nimport { BUNDLE_ID } from '../../constants'\n\nexport const SUBGRAPH_BLOCK_NUMBER = () => gql`\n  query block_number {\n    _meta {\n      block {\n        number\n      }\n    }\n  }\n`\n\nexport const ETH_PRICE = (block?: number) => {\n  const queryString = block\n    ? `\n    query bundles {\n      bundles(where: { id: ${BUNDLE_ID} } block: {number: ${block}}) {\n        id\n        ethPrice\n      }\n    }\n  `\n    : ` query bundles {\n      bundles(where: { id: ${BUNDLE_ID} }) {\n        id\n        ethPrice\n      }\n    }\n  `\n  return gql(queryString)\n}\n\nexport const PROMM_ETH_PRICE = (block?: number) => {\n  const queryString = block\n    ? `\n    query bundles {\n      bundles(where: { id: ${BUNDLE_ID} } block: {number: ${block}}) {\n        id\n        ethPriceUSD\n      }\n    }\n  `\n    : ` query bundles {\n      bundles(where: { id: ${BUNDLE_ID} }) {\n        id\n        ethPriceUSD\n      }\n    }\n  `\n  return gql(queryString)\n}\n\nexport const TOKEN_DERIVED_ETH = (tokenAddress: string) => {\n  const queryString = `\n    query tokens {\n      tokens(where: { id: \"${tokenAddress.toLowerCase()}\"} ) {\n        derivedETH\n      }\n    }\n    `\n\n  return gql(queryString)\n}\n\nexport const GLOBAL_DATA_ELASTIC = () => {\n  const queryString = `query factories {\n    factories {\n        id\n        poolCount\n        txCount\n        totalVolumeUSD\n        totalVolumeETH\n        totalFeesUSD\n        untrackedVolumeUSD\n        totalValueLockedUSD\n        totalValueLockedETH\n      }\n    }`\n\n  return gql(queryString)\n}\n\nexport const GLOBAL_DATA = (block?: number) => {\n  const queryString = `query dmmFactories {\n    dmmFactories${block ? `(block: { number: ${block}})` : ``} {\n        id\n        totalVolumeUSD\n        totalFeeUSD\n        totalVolumeETH\n        untrackedVolumeUSD\n        totalLiquidityUSD\n        totalLiquidityETH\n        totalAmplifiedLiquidityUSD\n        totalAmplifiedLiquidityETH\n        txCount\n        pairCount\n      }\n    }`\n\n  return gql(queryString)\n}\n\nexport const GET_BLOCK = gql`\n  query blocks($timestampFrom: Int!, $timestampTo: Int!) {\n    blocks(\n      first: 1\n      orderBy: timestamp\n      orderDirection: asc\n      where: { timestamp_gt: $timestampFrom, timestamp_lt: $timestampTo }\n    ) {\n      id\n      number\n      timestamp\n    }\n  }\n`\n\nexport const GET_BLOCKS = (timestamps: number[]) => {\n  let queryString = 'query blocks {'\n  queryString += timestamps.map(timestamp => {\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${\n      timestamp + 600\n    } }) {\n      number\n    }`\n  })\n  queryString += '}'\n  return gql(queryString)\n}\n\nconst PoolFields = (withFee?: boolean) => `\n  fragment PoolFields on Pool {\n    id\n    txCount\n    token0 {\n      id\n      symbol\n      name\n      decimals\n      totalLiquidity\n      derivedETH\n    }\n    token1 {\n      id\n      symbol\n      name\n      decimals\n      totalLiquidity\n      derivedETH\n    }\n    amp\n    reserve0\n    reserve1\n    vReserve0\n    vReserve1\n    reserveUSD\n    totalSupply\n    trackedReserveETH\n    reserveETH\n    volumeUSD\n    ${withFee ? 'fee' : ''}\n    feeUSD\n    untrackedVolumeUSD\n    untrackedFeeUSD\n    token0Price\n    token1Price\n    token0PriceMin\n    token0PriceMax\n    token1PriceMin\n    token1PriceMax\n    createdAtTimestamp\n  }\n`\n\nexport const USER_POSITIONS = gql`\n  query liquidityPositions($user: Bytes!) {\n    liquidityPositions(where: { user: $user }) {\n      pair {\n        id\n        reserve0\n        reserve1\n        reserveUSD\n        token0 {\n          id\n          symbol\n          derivedETH\n        }\n        token1 {\n          id\n          symbol\n          derivedETH\n        }\n        totalSupply\n      }\n      pool {\n        id\n        reserve0\n        reserve1\n        reserveUSD\n        token0 {\n          id\n          symbol\n          derivedETH\n        }\n        token1 {\n          id\n          symbol\n          derivedETH\n        }\n        totalSupply\n      }\n      liquidityTokenBalance\n    }\n  }\n`\n\nexport const USER_LIQUIDITY_POSITION_SNAPSHOTS = gql`\n  query liquidityPositionSnapshots($account: String!) {\n    liquidityPositionSnapshots(where: { user: $account }) {\n      pool {\n        id\n      }\n      liquidityTokenBalance\n      liquidityTokenTotalSupply\n      reserveUSD\n      timestamp\n    }\n  }\n`\n\nexport const POOL_DATA = (poolAddress: string, block: number, withFee?: boolean) => {\n  const queryString = `\n    query pools {\n      pools(${block ? `block: {number: ${block}}` : ``} where: { id: \"${poolAddress}\"} ) {\n        ...PoolFields\n      }\n    }\n    ${PoolFields(withFee)}\n    `\n\n  return gql(queryString)\n}\n\nexport const POOL_COUNT = gql`\n  {\n    dmmFactories {\n      poolCount\n    }\n  }\n`\n\nexport const POOLS_BULK_FROM_LIST = (pools: string[], withFee?: boolean) => {\n  let poolsString = `[`\n  pools.map((pool: string) => {\n    return (poolsString += `\"${pool}\"`)\n  })\n  poolsString += ']'\n\n  const queryString = `\n  query pools {\n    pools(first: ${pools.length}, where: {id_in: ${poolsString}}, orderBy: reserveUSD, orderDirection: desc) {\n      ...PoolFields\n    }\n  }\n  `\n\n  return gql`\n    ${PoolFields(withFee)}\n    ${queryString}\n  `\n}\n\nexport const POOLS_BULK_WITH_PAGINATION = (first: number, skip: number, withFee?: boolean) => {\n  const queryString = `\n  query pools {\n    pools(first: ${first}, skip: ${skip}) {\n      ...PoolFields\n    }\n  }\n  `\n\n  return gql`\n    ${PoolFields(withFee)}\n    ${queryString}\n  `\n}\n\nexport const POOLS_HISTORICAL_BULK_FROM_LIST = (block: number, pools: string[], withFee?: boolean) => {\n  let poolsString = `[`\n  pools.map((pool: string) => {\n    return (poolsString += `\"${pool}\"`)\n  })\n  poolsString += ']'\n\n  const queryString = `\n  query pools {\n    pools(first: ${\n      pools.length\n    }, where: {id_in: ${poolsString}}, block: {number: ${block}}, orderBy: reserveUSD, orderDirection: desc) {\n      id\n      reserveUSD\n      trackedReserveETH\n      volumeUSD\n      ${withFee ? 'fee' : ''}\n      feeUSD\n      untrackedVolumeUSD\n      untrackedFeeUSD\n    }\n  }\n  `\n\n  return gql(queryString)\n}\n\nexport const POOLS_HISTORICAL_BULK_WITH_PAGINATION = (\n  first: number,\n  skip: number,\n  block: number,\n  withFee?: boolean,\n) => {\n  const queryString = `\n  query pools {\n    pools(first: ${first}, skip: ${skip}, block: {number: ${block}}) {\n      id\n      reserveUSD\n      trackedReserveETH\n      volumeUSD\n      ${withFee ? 'fee' : ''}\n      feeUSD\n      untrackedVolumeUSD\n      untrackedFeeUSD\n    }\n  }\n  `\n\n  return gql(queryString)\n}\n\nexport const FARM_DATA = gql`\n  query farmData($poolsList: [Bytes]!) {\n    pools(where: { id_in: $poolsList }) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n      }\n      amp\n      reserveUSD\n      totalSupply\n    }\n  }\n`\n\nexport const FARM_HISTORIES = gql`\n  query farmHistories($user: String!) {\n    deposits(where: { user: $user }) {\n      id\n      timestamp\n      poolID\n      stakeToken\n      amount\n    }\n    withdraws(where: { user: $user }) {\n      id\n      timestamp\n      poolID\n      stakeToken\n      amount\n    }\n    harvests(where: { user: $user }) {\n      id\n      timestamp\n      poolID\n      rewardToken\n      stakeToken\n      amount\n    }\n    vests(where: { user: $user }) {\n      id\n      timestamp\n      rewardToken\n      amount\n    }\n  }\n`\n\nexport const GET_POOL_VALUES_AFTER_MINTS_SUCCESS = gql`\n  query getPoolValuesAfterMintsSuccess($poolAddress: String!) {\n    pool(id: $poolAddress) {\n      id\n      reserve0\n      reserve1\n      reserveUSD\n      mints(orderBy: timestamp, orderDirection: desc, first: 20) {\n        id\n        amount0\n        amount1\n        amountUSD\n      }\n    }\n  }\n`\n\nexport const GET_POOL_VALUES_AFTER_BURNS_SUCCESS = gql`\n  query getPoolValuesAfterBurnsSuccess($poolAddress: String!) {\n    pool(id: $poolAddress) {\n      id\n      reserve0\n      reserve1\n      reserveUSD\n      burns(orderBy: timestamp, orderDirection: desc, first: 20) {\n        id\n        amount0\n        amount1\n        amountUSD\n      }\n    }\n  }\n`\nexport const GET_MINT_VALUES_AFTER_CREATE_POOL_SUCCESS = gql`\n  query getPoolValuesAfterBurnsSuccess($transactionHash: String!) {\n    transaction(id: $transactionHash) {\n      id\n      mints {\n        id\n        amount0\n        amount1\n        amountUSD\n      }\n    }\n  }\n`\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}