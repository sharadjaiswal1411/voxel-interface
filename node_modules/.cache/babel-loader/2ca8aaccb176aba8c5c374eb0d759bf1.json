{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/voxel-interface/src/components/YieldPools/ConfirmHarvestingModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport TransactionConfirmationModal, { TransactionErrorContent } from 'components/TransactionConfirmationModal';\nimport { setAttemptingTxn, setShowConfirm, setTxHash, setYieldPoolsError } from 'state/farms/actions';\nimport { useAppDispatch } from 'state/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ConfirmHarvestingModal() {\n  _s();\n\n  var _this = this;\n\n  var showConfirm = useSelector(function (state) {\n    return state.farms.showConfirm;\n  });\n  var attemptingTxn = useSelector(function (state) {\n    return state.farms.attemptingTxn;\n  });\n  var txHash = useSelector(function (state) {\n    return state.farms.txHash;\n  });\n  var yieldPoolsError = useSelector(function (state) {\n    return state.farms.error;\n  });\n  var dispatch = useAppDispatch();\n  var handleConfirmDismiss = useCallback(function () {\n    dispatch(setShowConfirm(false));\n    dispatch(setAttemptingTxn(false));\n    dispatch(setTxHash(''));\n    dispatch(setYieldPoolsError(null));\n  }, [dispatch]);\n  var confirmationContent = useCallback(function () {\n    return yieldPoolsError ? /*#__PURE__*/_jsxDEV(TransactionErrorContent, {\n      onDismiss: handleConfirmDismiss,\n      message: yieldPoolsError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 25\n    }, _this) : null;\n  }, [handleConfirmDismiss, yieldPoolsError]);\n  return /*#__PURE__*/_jsxDEV(TransactionConfirmationModal, {\n    hash: txHash ? txHash : '',\n    isOpen: showConfirm,\n    onDismiss: handleConfirmDismiss,\n    attemptingTxn: attemptingTxn,\n    content: confirmationContent,\n    pendingText: \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ConfirmHarvestingModal, \"fFO6lQbkKB4IxSTjA8MCEHWHpiM=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useAppDispatch];\n});\n\n_c = ConfirmHarvestingModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfirmHarvestingModal\");","map":{"version":3,"names":["React","useCallback","useSelector","TransactionConfirmationModal","TransactionErrorContent","setAttemptingTxn","setShowConfirm","setTxHash","setYieldPoolsError","useAppDispatch","ConfirmHarvestingModal","showConfirm","state","farms","attemptingTxn","txHash","yieldPoolsError","error","dispatch","handleConfirmDismiss","confirmationContent"],"sources":["/Applications/XAMPP/voxel-interface/src/components/YieldPools/ConfirmHarvestingModal.tsx"],"sourcesContent":["import React, { useCallback } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport TransactionConfirmationModal, { TransactionErrorContent } from 'components/TransactionConfirmationModal'\nimport { AppState } from 'state'\nimport { setAttemptingTxn, setShowConfirm, setTxHash, setYieldPoolsError } from 'state/farms/actions'\nimport { useAppDispatch } from 'state/hooks'\n\nexport default function ConfirmHarvestingModal() {\n  const showConfirm = useSelector<AppState, boolean>(state => state.farms.showConfirm)\n  const attemptingTxn = useSelector<AppState, boolean>(state => state.farms.attemptingTxn)\n  const txHash = useSelector<AppState, string>(state => state.farms.txHash)\n  const yieldPoolsError = useSelector<AppState, string>(state => state.farms.error)\n  const dispatch = useAppDispatch()\n\n  const handleConfirmDismiss = useCallback(() => {\n    dispatch(setShowConfirm(false))\n    dispatch(setAttemptingTxn(false))\n    dispatch(setTxHash(''))\n    dispatch(setYieldPoolsError(null))\n  }, [dispatch])\n\n  const confirmationContent = useCallback(\n    () =>\n      yieldPoolsError ? <TransactionErrorContent onDismiss={handleConfirmDismiss} message={yieldPoolsError} /> : null,\n    [handleConfirmDismiss, yieldPoolsError],\n  )\n\n  return (\n    <TransactionConfirmationModal\n      hash={txHash ? txHash : ''}\n      isOpen={showConfirm}\n      onDismiss={handleConfirmDismiss}\n      attemptingTxn={attemptingTxn}\n      content={confirmationContent}\n      pendingText=\"\"\n    />\n  )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,4BAAP,IAAuCC,uBAAvC,QAAsE,yCAAtE;AAEA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,SAA3C,EAAsDC,kBAAtD,QAAgF,qBAAhF;AACA,SAASC,cAAT,QAA+B,aAA/B;;AAEA,eAAe,SAASC,sBAAT,GAAkC;EAAA;;EAAA;;EAC/C,IAAMC,WAAW,GAAGT,WAAW,CAAoB,UAAAU,KAAK;IAAA,OAAIA,KAAK,CAACC,KAAN,CAAYF,WAAhB;EAAA,CAAzB,CAA/B;EACA,IAAMG,aAAa,GAAGZ,WAAW,CAAoB,UAAAU,KAAK;IAAA,OAAIA,KAAK,CAACC,KAAN,CAAYC,aAAhB;EAAA,CAAzB,CAAjC;EACA,IAAMC,MAAM,GAAGb,WAAW,CAAmB,UAAAU,KAAK;IAAA,OAAIA,KAAK,CAACC,KAAN,CAAYE,MAAhB;EAAA,CAAxB,CAA1B;EACA,IAAMC,eAAe,GAAGd,WAAW,CAAmB,UAAAU,KAAK;IAAA,OAAIA,KAAK,CAACC,KAAN,CAAYI,KAAhB;EAAA,CAAxB,CAAnC;EACA,IAAMC,QAAQ,GAAGT,cAAc,EAA/B;EAEA,IAAMU,oBAAoB,GAAGlB,WAAW,CAAC,YAAM;IAC7CiB,QAAQ,CAACZ,cAAc,CAAC,KAAD,CAAf,CAAR;IACAY,QAAQ,CAACb,gBAAgB,CAAC,KAAD,CAAjB,CAAR;IACAa,QAAQ,CAACX,SAAS,CAAC,EAAD,CAAV,CAAR;IACAW,QAAQ,CAACV,kBAAkB,CAAC,IAAD,CAAnB,CAAR;EACD,CALuC,EAKrC,CAACU,QAAD,CALqC,CAAxC;EAOA,IAAME,mBAAmB,GAAGnB,WAAW,CACrC;IAAA,OACEe,eAAe,gBAAG,QAAC,uBAAD;MAAyB,SAAS,EAAEG,oBAApC;MAA0D,OAAO,EAAEH;IAAnE;MAAA;MAAA;MAAA;IAAA,SAAH,GAA4F,IAD7G;EAAA,CADqC,EAGrC,CAACG,oBAAD,EAAuBH,eAAvB,CAHqC,CAAvC;EAMA,oBACE,QAAC,4BAAD;IACE,IAAI,EAAED,MAAM,GAAGA,MAAH,GAAY,EAD1B;IAEE,MAAM,EAAEJ,WAFV;IAGE,SAAS,EAAEQ,oBAHb;IAIE,aAAa,EAAEL,aAJjB;IAKE,OAAO,EAAEM,mBALX;IAME,WAAW,EAAC;EANd;IAAA;IAAA;IAAA;EAAA,QADF;AAUD;;GA9BuBV,sB;UACFR,W,EACEA,W,EACPA,W,EACSA,W,EACPO,c;;;KALKC,sB"},"metadata":{},"sourceType":"module"}