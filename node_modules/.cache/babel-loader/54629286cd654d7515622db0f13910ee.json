{"ast":null,"code":"import _toConsumableArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addFailedNFTs, resetErrorNFTs, setAttemptingTxn, setError, setLoading, setShowConfirm, setVestingTxHash, updatePrommNfts } from './actions';\nvar initialState = {\n  data: {},\n  loading: false,\n  showConfirm: false,\n  attemptingTxn: false,\n  vestingTxHash: '',\n  error: '',\n  failedNFTs: []\n};\nexport default createReducer(initialState, function (builder) {\n  return builder.addCase(updatePrommNfts, function (state, _ref) {\n    var data = _ref.payload;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      data: data\n    });\n  }).addCase(setLoading, function (state, _ref2) {\n    var loading = _ref2.payload;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      loading: loading\n    });\n  }).addCase(setShowConfirm, function (state, _ref3) {\n    var showConfirm = _ref3.payload;\n    state.showConfirm = showConfirm;\n  }).addCase(setAttemptingTxn, function (state, _ref4) {\n    var attemptingTxn = _ref4.payload;\n    state.attemptingTxn = attemptingTxn;\n  }).addCase(setVestingTxHash, function (state, _ref5) {\n    var txHash = _ref5.payload;\n    state.vestingTxHash = txHash;\n  }).addCase(setError, function (state, _ref6) {\n    var error = _ref6.payload;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      error: error\n    });\n  }).addCase(addFailedNFTs, function (state, _ref7) {\n    var ids = _ref7.payload;\n    state.failedNFTs = _toConsumableArray(new Set([].concat(_toConsumableArray(state.failedNFTs), _toConsumableArray(ids))));\n  }).addCase(resetErrorNFTs, function (state) {\n    state.failedNFTs = [];\n  });\n});","map":{"version":3,"names":["createReducer","addFailedNFTs","resetErrorNFTs","setAttemptingTxn","setError","setLoading","setShowConfirm","setVestingTxHash","updatePrommNfts","initialState","data","loading","showConfirm","attemptingTxn","vestingTxHash","error","failedNFTs","builder","addCase","state","payload","txHash","ids","Set"],"sources":["/Applications/XAMPP/voxel-interface/src/state/nfts/promm/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\n\nimport {\n  addFailedNFTs,\n  resetErrorNFTs,\n  setAttemptingTxn,\n  setError,\n  setLoading,\n  setShowConfirm,\n  setVestingTxHash,\n  updatePrommNfts,\n} from './actions'\nimport { ProMMFarm } from './types'\n\nexport interface NftStakeState {\n  readonly data: { [farmAddress: string]: ProMMFarm[] }\n  readonly loading: boolean\n  readonly showConfirm: boolean\n  readonly attemptingTxn: boolean\n  readonly vestingTxHash: string\n  readonly error: string\n  // List nft can not withdraw because of contract issue\n  // https://www.notion.so/kybernetwork/Elastic-Farm-Issue-Product-Changes-High-Priority-d2c086629d1d4332a8e96adfa4295c86\n  readonly failedNFTs: string[]\n}\n\nconst initialState: NftStakeState = {\n  data: {},\n  loading: false,\n  showConfirm: false,\n  attemptingTxn: false,\n  vestingTxHash: '',\n  error: '',\n  failedNFTs: [],\n}\n\nexport default createReducer<NftStakeState>(initialState, builder =>\n  builder\n    .addCase(updatePrommNfts, (state, { payload: data }) => {\n      return {\n        ...state,\n        data,\n      }\n    })\n    .addCase(setLoading, (state, { payload: loading }) => {\n      return {\n        ...state,\n        loading,\n      }\n    })\n    .addCase(setShowConfirm, (state, { payload: showConfirm }) => {\n      state.showConfirm = showConfirm\n    })\n    .addCase(setAttemptingTxn, (state, { payload: attemptingTxn }) => {\n      state.attemptingTxn = attemptingTxn\n    })\n    .addCase(setVestingTxHash, (state, { payload: txHash }) => {\n      state.vestingTxHash = txHash\n    })\n    .addCase(setError, (state, { payload: error }) => {\n      return {\n        ...state,\n        error,\n      }\n    })\n    .addCase(addFailedNFTs, (state, { payload: ids }) => {\n      state.failedNFTs = [...new Set([...state.failedNFTs, ...ids])]\n    })\n    .addCase(resetErrorNFTs, state => {\n      state.failedNFTs = []\n    }),\n)\n"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,kBAA9B;AAEA,SACEC,aADF,EAEEC,cAFF,EAGEC,gBAHF,EAIEC,QAJF,EAKEC,UALF,EAMEC,cANF,EAOEC,gBAPF,EAQEC,eARF,QASO,WATP;AAwBA,IAAMC,YAA2B,GAAG;EAClCC,IAAI,EAAE,EAD4B;EAElCC,OAAO,EAAE,KAFyB;EAGlCC,WAAW,EAAE,KAHqB;EAIlCC,aAAa,EAAE,KAJmB;EAKlCC,aAAa,EAAE,EALmB;EAMlCC,KAAK,EAAE,EAN2B;EAOlCC,UAAU,EAAE;AAPsB,CAApC;AAUA,eAAehB,aAAa,CAAgBS,YAAhB,EAA8B,UAAAQ,OAAO;EAAA,OAC/DA,OAAO,CACJC,OADH,CACWV,eADX,EAC4B,UAACW,KAAD,QAA8B;IAAA,IAAXT,IAAW,QAApBU,OAAoB;IACtD,uCACKD,KADL;MAEET,IAAI,EAAJA;IAFF;EAID,CANH,EAOGQ,OAPH,CAOWb,UAPX,EAOuB,UAACc,KAAD,SAAiC;IAAA,IAAdR,OAAc,SAAvBS,OAAuB;IACpD,uCACKD,KADL;MAEER,OAAO,EAAPA;IAFF;EAID,CAZH,EAaGO,OAbH,CAaWZ,cAbX,EAa2B,UAACa,KAAD,SAAqC;IAAA,IAAlBP,WAAkB,SAA3BQ,OAA2B;IAC5DD,KAAK,CAACP,WAAN,GAAoBA,WAApB;EACD,CAfH,EAgBGM,OAhBH,CAgBWf,gBAhBX,EAgB6B,UAACgB,KAAD,SAAuC;IAAA,IAApBN,aAAoB,SAA7BO,OAA6B;IAChED,KAAK,CAACN,aAAN,GAAsBA,aAAtB;EACD,CAlBH,EAmBGK,OAnBH,CAmBWX,gBAnBX,EAmB6B,UAACY,KAAD,SAAgC;IAAA,IAAbE,MAAa,SAAtBD,OAAsB;IACzDD,KAAK,CAACL,aAAN,GAAsBO,MAAtB;EACD,CArBH,EAsBGH,OAtBH,CAsBWd,QAtBX,EAsBqB,UAACe,KAAD,SAA+B;IAAA,IAAZJ,KAAY,SAArBK,OAAqB;IAChD,uCACKD,KADL;MAEEJ,KAAK,EAALA;IAFF;EAID,CA3BH,EA4BGG,OA5BH,CA4BWjB,aA5BX,EA4B0B,UAACkB,KAAD,SAA6B;IAAA,IAAVG,GAAU,SAAnBF,OAAmB;IACnDD,KAAK,CAACH,UAAN,sBAAuB,IAAIO,GAAJ,8BAAYJ,KAAK,CAACH,UAAlB,sBAAiCM,GAAjC,GAAvB;EACD,CA9BH,EA+BGJ,OA/BH,CA+BWhB,cA/BX,EA+B2B,UAAAiB,KAAK,EAAI;IAChCA,KAAK,CAACH,UAAN,GAAmB,EAAnB;EACD,CAjCH,CAD+D;AAAA,CAArC,CAA5B"},"metadata":{},"sourceType":"module"}