{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar jsSHA3 = require(\"js-sha3\");\n\nvar _ = require(\"lodash\");\n\nvar random_1 = require(\"./random\");\n\nvar BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;\nvar SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;\nvar ADDRESS_LENGTH = 40;\nexports.addressUtils = {\n  isChecksumAddress: function isChecksumAddress(address) {\n    // Check each case\n    var unprefixedAddress = address.replace('0x', '');\n    var addressHash = jsSHA3.keccak256(unprefixedAddress.toLowerCase());\n\n    for (var i = 0; i < ADDRESS_LENGTH; i++) {\n      // The nth letter should be uppercase if the nth digit of casemap is 1\n      var hexBase = 16;\n      var lowercaseRange = 7;\n\n      if (parseInt(addressHash[i], hexBase) > lowercaseRange && unprefixedAddress[i].toUpperCase() !== unprefixedAddress[i] || parseInt(addressHash[i], hexBase) <= lowercaseRange && unprefixedAddress[i].toLowerCase() !== unprefixedAddress[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  isAddress: function isAddress(address) {\n    if (!BASIC_ADDRESS_REGEX.test(address)) {\n      // Check if it has the basic requirements of an address\n      return false;\n    } else if (SAME_CASE_ADDRESS_REGEX.test(address)) {\n      // If it's all small caps or all all caps, return true\n      return true;\n    } else {\n      // Otherwise check each case\n      var isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);\n      return isValidChecksummedAddress;\n    }\n  },\n  padZeros: function padZeros(address) {\n    return ethereumjs_util_1.addHexPrefix(_.padStart(ethereumjs_util_1.stripHexPrefix(address), ADDRESS_LENGTH, '0'));\n  },\n  generatePseudoRandomAddress: function generatePseudoRandomAddress() {\n    var randomBigNum = random_1.generatePseudoRandom256BitNumber();\n    var randomBuff = ethereumjs_util_1.sha3(randomBigNum.toString());\n    var addressLengthInBytes = 20;\n    var randomAddress = \"0x\" + randomBuff.slice(0, addressLengthInBytes).toString('hex');\n    return randomAddress;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}