{"ast":null,"code":"import { shortenAddress } from 'utils/index';\n/**\n * This function can handle non-evm address like tron, solana, etc.\n * @param address\n * @param showX\n */\n\nexport default function getShortenAddress(address) {\n  var showX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  try {\n    return showX ? address.substr(0, 6) + (showX ? 'x'.repeat(address.length - 10) : '...') + address.slice(-4) : shortenAddress(address);\n  } catch (err) {\n    return address.length > 13 ? address.substr(0, 6) + (showX ? 'x'.repeat(address.length - 10) : '...') + address.slice(-4) : address;\n  }\n}","map":{"version":3,"names":["shortenAddress","getShortenAddress","address","showX","substr","repeat","length","slice","err"],"sources":["/Applications/XAMPP/voxel-interface/src/utils/getShortenAddress.ts"],"sourcesContent":["import { shortenAddress } from 'utils/index'\n\n/**\n * This function can handle non-evm address like tron, solana, etc.\n * @param address\n * @param showX\n */\nexport default function getShortenAddress(address: string, showX = false) {\n  try {\n    return showX\n      ? address.substr(0, 6) + (showX ? 'x'.repeat(address.length - 10) : '...') + address.slice(-4)\n      : shortenAddress(address)\n  } catch (err) {\n    return address.length > 13\n      ? address.substr(0, 6) + (showX ? 'x'.repeat(address.length - 10) : '...') + address.slice(-4)\n      : address\n  }\n}\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,aAA/B;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,iBAAT,CAA2BC,OAA3B,EAA2D;EAAA,IAAfC,KAAe,uEAAP,KAAO;;EACxE,IAAI;IACF,OAAOA,KAAK,GACRD,OAAO,CAACE,MAAR,CAAe,CAAf,EAAkB,CAAlB,KAAwBD,KAAK,GAAG,IAAIE,MAAJ,CAAWH,OAAO,CAACI,MAAR,GAAiB,EAA5B,CAAH,GAAqC,KAAlE,IAA2EJ,OAAO,CAACK,KAAR,CAAc,CAAC,CAAf,CADnE,GAERP,cAAc,CAACE,OAAD,CAFlB;EAGD,CAJD,CAIE,OAAOM,GAAP,EAAY;IACZ,OAAON,OAAO,CAACI,MAAR,GAAiB,EAAjB,GACHJ,OAAO,CAACE,MAAR,CAAe,CAAf,EAAkB,CAAlB,KAAwBD,KAAK,GAAG,IAAIE,MAAJ,CAAWH,OAAO,CAACI,MAAR,GAAiB,EAA5B,CAAH,GAAqC,KAAlE,IAA2EJ,OAAO,CAACK,KAAR,CAAc,CAAC,CAAf,CADxE,GAEHL,OAFJ;EAGD;AACF"},"metadata":{},"sourceType":"module"}