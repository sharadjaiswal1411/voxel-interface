{"ast":null,"code":"var $schema = \"http://json-schema.org/draft-07/schema#\";\nvar $id = \"https://uniswap.org/tokenlist.schema.json\";\nvar title = \"Uniswap Token List\";\nvar description = \"Schema for lists of tokens compatible with the Uniswap Interface\";\nvar definitions = {\n  Version: {\n    type: \"object\",\n    description: \"The version of the list, used in change detection\",\n    examples: [{\n      major: 1,\n      minor: 0,\n      patch: 0\n    }],\n    additionalProperties: false,\n    properties: {\n      major: {\n        type: \"integer\",\n        description: \"The major version of the list. Must be incremented when tokens are removed from the list or token addresses are changed.\",\n        minimum: 0,\n        examples: [1, 2]\n      },\n      minor: {\n        type: \"integer\",\n        description: \"The minor version of the list. Must be incremented when tokens are added to the list.\",\n        minimum: 0,\n        examples: [0, 1]\n      },\n      patch: {\n        type: \"integer\",\n        description: \"The patch version of the list. Must be incremented for any changes to the list.\",\n        minimum: 0,\n        examples: [0, 1]\n      }\n    },\n    required: [\"major\", \"minor\", \"patch\"]\n  },\n  TagIdentifier: {\n    type: \"string\",\n    description: \"The unique identifier of a tag\",\n    minLength: 1,\n    maxLength: 10,\n    pattern: \"^[\\\\w]+$\",\n    examples: [\"compound\", \"stablecoin\"]\n  },\n  ExtensionIdentifier: {\n    type: \"string\",\n    description: \"The name of a token extension property\",\n    minLength: 1,\n    maxLength: 40,\n    pattern: \"^[\\\\w]+$\",\n    examples: [\"color\", \"is_fee_on_transfer\", \"aliases\"]\n  },\n  ExtensionMap: {\n    type: \"object\",\n    description: \"An object containing any arbitrary or vendor-specific token metadata\",\n    maxProperties: 10,\n    propertyNames: {\n      $ref: \"#/definitions/ExtensionIdentifier\"\n    },\n    additionalProperties: {\n      $ref: \"#/definitions/ExtensionValue\"\n    },\n    examples: [{\n      color: \"#000000\",\n      is_verified_by_me: true\n    }, {\n      \"x-bridged-addresses-by-chain\": {\n        \"1\": {\n          bridgeAddress: \"0x4200000000000000000000000000000000000010\",\n          tokenAddress: \"0x4200000000000000000000000000000000000010\"\n        }\n      }\n    }]\n  },\n  ExtensionPrimitiveValue: {\n    anyOf: [{\n      type: \"string\",\n      minLength: 1,\n      maxLength: 42,\n      examples: [\"#00000\"]\n    }, {\n      type: \"boolean\",\n      examples: [true]\n    }, {\n      type: \"number\",\n      examples: [15]\n    }, {\n      type: \"null\"\n    }]\n  },\n  ExtensionValue: {\n    anyOf: [{\n      $ref: \"#/definitions/ExtensionPrimitiveValue\"\n    }, {\n      type: \"object\",\n      maxProperties: 10,\n      propertyNames: {\n        $ref: \"#/definitions/ExtensionIdentifier\"\n      },\n      additionalProperties: {\n        $ref: \"#/definitions/ExtensionValueInner0\"\n      }\n    }]\n  },\n  ExtensionValueInner0: {\n    anyOf: [{\n      $ref: \"#/definitions/ExtensionPrimitiveValue\"\n    }, {\n      type: \"object\",\n      maxProperties: 10,\n      propertyNames: {\n        $ref: \"#/definitions/ExtensionIdentifier\"\n      },\n      additionalProperties: {\n        $ref: \"#/definitions/ExtensionValueInner1\"\n      }\n    }]\n  },\n  ExtensionValueInner1: {\n    anyOf: [{\n      $ref: \"#/definitions/ExtensionPrimitiveValue\"\n    }]\n  },\n  TagDefinition: {\n    type: \"object\",\n    description: \"Definition of a tag that can be associated with a token via its identifier\",\n    additionalProperties: false,\n    properties: {\n      name: {\n        type: \"string\",\n        description: \"The name of the tag\",\n        pattern: \"^[ \\\\w]+$\",\n        minLength: 1,\n        maxLength: 20\n      },\n      description: {\n        type: \"string\",\n        description: \"A user-friendly description of the tag\",\n        pattern: \"^[ \\\\w\\\\.,:]+$\",\n        minLength: 1,\n        maxLength: 200\n      }\n    },\n    required: [\"name\", \"description\"],\n    examples: [{\n      name: \"Stablecoin\",\n      description: \"A token with value pegged to another asset\"\n    }]\n  },\n  TokenInfo: {\n    type: \"object\",\n    description: \"Metadata for a single token in a token list\",\n    additionalProperties: false,\n    properties: {\n      chainId: {\n        type: \"integer\",\n        description: \"The chain ID of the Ethereum network where this token is deployed\",\n        minimum: 1,\n        examples: [1, 42]\n      },\n      address: {\n        type: \"string\",\n        description: \"The checksummed address of the token on the specified chain ID\",\n        pattern: \"^0x[a-fA-F0-9]{40}$\",\n        examples: [\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"]\n      },\n      decimals: {\n        type: \"integer\",\n        description: \"The number of decimals for the token balance\",\n        minimum: 0,\n        maximum: 255,\n        examples: [18]\n      },\n      name: {\n        type: \"string\",\n        description: \"The name of the token\",\n        minLength: 1,\n        maxLength: 40,\n        pattern: \"^[ \\\\w.'+\\\\-%/À-ÖØ-öø-ÿ:&\\\\[\\\\]\\\\(\\\\)]+$\",\n        examples: [\"USD Coin\"]\n      },\n      symbol: {\n        type: \"string\",\n        description: \"The symbol for the token; must be alphanumeric\",\n        pattern: \"^[a-zA-Z0-9+\\\\-%/$.]+$\",\n        minLength: 1,\n        maxLength: 20,\n        examples: [\"USDC\"]\n      },\n      logoURI: {\n        type: \"string\",\n        description: \"A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64\",\n        format: \"uri\",\n        examples: [\"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"]\n      },\n      tags: {\n        type: \"array\",\n        description: \"An array of tag identifiers associated with the token; tags are defined at the list level\",\n        items: {\n          $ref: \"#/definitions/TagIdentifier\"\n        },\n        maxItems: 10,\n        examples: [\"stablecoin\", \"compound\"]\n      },\n      extensions: {\n        $ref: \"#/definitions/ExtensionMap\"\n      }\n    },\n    required: [\"chainId\", \"address\", \"decimals\", \"name\", \"symbol\"]\n  }\n};\nvar type = \"object\";\nvar additionalProperties = false;\nvar properties = {\n  name: {\n    type: \"string\",\n    description: \"The name of the token list\",\n    minLength: 1,\n    maxLength: 30,\n    pattern: \"^[\\\\w ]+$\",\n    examples: [\"My Token List\"]\n  },\n  timestamp: {\n    type: \"string\",\n    format: \"date-time\",\n    description: \"The timestamp of this list version; i.e. when this immutable version of the list was created\"\n  },\n  version: {\n    $ref: \"#/definitions/Version\"\n  },\n  tokens: {\n    type: \"array\",\n    description: \"The list of tokens included in the list\",\n    items: {\n      $ref: \"#/definitions/TokenInfo\"\n    },\n    minItems: 1,\n    maxItems: 10000\n  },\n  keywords: {\n    type: \"array\",\n    description: \"Keywords associated with the contents of the list; may be used in list discoverability\",\n    items: {\n      type: \"string\",\n      description: \"A keyword to describe the contents of the list\",\n      minLength: 1,\n      maxLength: 20,\n      pattern: \"^[\\\\w ]+$\",\n      examples: [\"compound\", \"lending\", \"personal tokens\"]\n    },\n    maxItems: 20,\n    uniqueItems: true\n  },\n  tags: {\n    type: \"object\",\n    description: \"A mapping of tag identifiers to their name and description\",\n    propertyNames: {\n      $ref: \"#/definitions/TagIdentifier\"\n    },\n    additionalProperties: {\n      $ref: \"#/definitions/TagDefinition\"\n    },\n    maxProperties: 20,\n    examples: [{\n      stablecoin: {\n        name: \"Stablecoin\",\n        description: \"A token with value pegged to another asset\"\n      }\n    }]\n  },\n  logoURI: {\n    type: \"string\",\n    description: \"A URI for the logo of the token list; prefer SVG or PNG of size 256x256\",\n    format: \"uri\",\n    examples: [\"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"]\n  }\n};\nvar required = [\"name\", \"timestamp\", \"version\", \"tokens\"];\nvar tokenlist_schema = {\n  $schema: $schema,\n  $id: $id,\n  title: title,\n  description: description,\n  definitions: definitions,\n  type: type,\n  additionalProperties: additionalProperties,\n  properties: properties,\n  required: required\n};\n/**\r\n * Comparator function that allows sorting version from lowest to highest\r\n * @param versionA version A to compare\r\n * @param versionB version B to compare\r\n * @returns -1 if versionA comes before versionB, 0 if versionA is equal to version B, and 1 if version A comes after version B\r\n */\n\nfunction versionComparator(versionA, versionB) {\n  if (versionA.major < versionB.major) {\n    return -1;\n  } else if (versionA.major > versionB.major) {\n    return 1;\n  } else if (versionA.minor < versionB.minor) {\n    return -1;\n  } else if (versionA.minor > versionB.minor) {\n    return 1;\n  } else if (versionA.patch < versionB.patch) {\n    return -1;\n  } else if (versionA.patch > versionB.patch) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n/**\r\n * Returns true if versionB is an update over versionA\r\n */\n\n\nfunction isVersionUpdate(base, update) {\n  return versionComparator(base, update) < 0;\n}\n\nvar VersionUpgrade;\n\n(function (VersionUpgrade) {\n  VersionUpgrade[VersionUpgrade[\"NONE\"] = 0] = \"NONE\";\n  VersionUpgrade[VersionUpgrade[\"PATCH\"] = 1] = \"PATCH\";\n  VersionUpgrade[VersionUpgrade[\"MINOR\"] = 2] = \"MINOR\";\n  VersionUpgrade[VersionUpgrade[\"MAJOR\"] = 3] = \"MAJOR\";\n})(VersionUpgrade || (VersionUpgrade = {}));\n/**\r\n * Return the upgrade type from the base version to the update version.\r\n * Note that downgrades and equivalent versions are both treated as `NONE`.\r\n * @param base base list\r\n * @param update update to the list\r\n */\n\n\nfunction getVersionUpgrade(base, update) {\n  if (update.major > base.major) {\n    return VersionUpgrade.MAJOR;\n  }\n\n  if (update.major < base.major) {\n    return VersionUpgrade.NONE;\n  }\n\n  if (update.minor > base.minor) {\n    return VersionUpgrade.MINOR;\n  }\n\n  if (update.minor < base.minor) {\n    return VersionUpgrade.NONE;\n  }\n\n  return update.patch > base.patch ? VersionUpgrade.PATCH : VersionUpgrade.NONE;\n}\n/**\r\n * compares two token info key values\r\n * this subset of full deep equal functionality does not work on objects or object arrays\r\n * @param a comparison item a\r\n * @param b comparison item b\r\n */\n\n\nfunction compareTokenInfoProperty(a, b) {\n  if (a === b) return true;\n  if (typeof a !== typeof b) return false;\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.every(function (el, i) {\n      return b[i] === el;\n    });\n  }\n\n  return false;\n}\n/**\r\n * Computes the diff of a token list where the first argument is the base and the second argument is the updated list.\r\n * @param base base list\r\n * @param update updated list\r\n */\n\n\nfunction diffTokenLists(base, update) {\n  var indexedBase = base.reduce(function (memo, tokenInfo) {\n    if (!memo[tokenInfo.chainId]) memo[tokenInfo.chainId] = {};\n    memo[tokenInfo.chainId][tokenInfo.address] = tokenInfo;\n    return memo;\n  }, {});\n  var newListUpdates = update.reduce(function (memo, tokenInfo) {\n    var _indexedBase$tokenInf;\n\n    var baseToken = (_indexedBase$tokenInf = indexedBase[tokenInfo.chainId]) == null ? void 0 : _indexedBase$tokenInf[tokenInfo.address];\n\n    if (!baseToken) {\n      memo.added.push(tokenInfo);\n    } else {\n      var changes = Object.keys(tokenInfo).filter(function (s) {\n        return s !== 'address' && s !== 'chainId';\n      }).filter(function (s) {\n        return !compareTokenInfoProperty(tokenInfo[s], baseToken[s]);\n      });\n\n      if (changes.length > 0) {\n        if (!memo.changed[tokenInfo.chainId]) {\n          memo.changed[tokenInfo.chainId] = {};\n        }\n\n        memo.changed[tokenInfo.chainId][tokenInfo.address] = changes;\n      }\n    }\n\n    if (!memo.index[tokenInfo.chainId]) {\n      var _memo$index$tokenInfo;\n\n      memo.index[tokenInfo.chainId] = (_memo$index$tokenInfo = {}, _memo$index$tokenInfo[tokenInfo.address] = true, _memo$index$tokenInfo);\n    } else {\n      memo.index[tokenInfo.chainId][tokenInfo.address] = true;\n    }\n\n    return memo;\n  }, {\n    added: [],\n    changed: {},\n    index: {}\n  });\n  var removed = base.reduce(function (list, curr) {\n    if (!newListUpdates.index[curr.chainId] || !newListUpdates.index[curr.chainId][curr.address]) {\n      list.push(curr);\n    }\n\n    return list;\n  }, []);\n  return {\n    added: newListUpdates.added,\n    changed: newListUpdates.changed,\n    removed: removed\n  };\n}\n/**\r\n * Returns the minimum version bump for the given list\r\n * @param baseList the base list of tokens\r\n * @param updatedList the updated list of tokens\r\n */\n\n\nfunction minVersionBump(baseList, updatedList) {\n  var diff = diffTokenLists(baseList, updatedList);\n  if (diff.removed.length > 0) return VersionUpgrade.MAJOR;\n  if (diff.added.length > 0) return VersionUpgrade.MINOR;\n  if (Object.keys(diff.changed).length > 0) return VersionUpgrade.PATCH;\n  return VersionUpgrade.NONE;\n}\n/**\r\n * Returns the next version of the list given a base version and the upgrade type\r\n * @param base current version\r\n * @param bump the upgrade type\r\n */\n\n\nfunction nextVersion(base, bump) {\n  switch (bump) {\n    case VersionUpgrade.NONE:\n      return base;\n\n    case VersionUpgrade.MAJOR:\n      return {\n        major: base.major + 1,\n        minor: 0,\n        patch: 0\n      };\n\n    case VersionUpgrade.MINOR:\n      return {\n        major: base.major,\n        minor: base.minor + 1,\n        patch: 0\n      };\n\n    case VersionUpgrade.PATCH:\n      return {\n        major: base.major,\n        minor: base.minor,\n        patch: base.patch + 1\n      };\n  }\n}\n\nexport { VersionUpgrade, diffTokenLists, getVersionUpgrade, isVersionUpdate, minVersionBump, nextVersion, tokenlist_schema as schema, versionComparator };","map":null,"metadata":{},"sourceType":"module"}