{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react'; // modified from https://usehooks.com/usePrevious/\n\nexport default function usePrevious(value) {\n  _s();\n\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  var ref = useRef(); // Store current value in ref\n\n  useEffect(function () {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n}\n\n_s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");","map":{"version":3,"names":["useEffect","useRef","usePrevious","value","ref","current"],"sources":["/Applications/XAMPP/voxel-interface/src/hooks/usePrevious.ts"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\n// modified from https://usehooks.com/usePrevious/\nexport default function usePrevious<T>(value: T) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef<T>()\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value\n  }, [value]) // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current\n}\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC,C,CAEA;;AACA,eAAe,SAASC,WAAT,CAAwBC,KAAxB,EAAkC;EAAA;;EAC/C;EACA;EACA,IAAMC,GAAG,GAAGH,MAAM,EAAlB,CAH+C,CAK/C;;EACAD,SAAS,CAAC,YAAM;IACdI,GAAG,CAACC,OAAJ,GAAcF,KAAd;EACD,CAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CAN+C,CAQnC;EAEZ;;EACA,OAAOC,GAAG,CAACC,OAAX;AACD;;GAZuBH,W"},"metadata":{},"sourceType":"module"}