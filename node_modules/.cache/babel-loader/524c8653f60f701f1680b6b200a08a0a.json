{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { updateSession, Scope } from '@sentry/hub';\nimport { makeDsn, logger, checkOrSetAlreadyCaught, isPrimitive, resolvedSyncPromise, addItemToEnvelope, createAttachmentEnvelopeItem, SyncPromise, uuid4, dateTimestampInSeconds, normalize, truncate, rejectedSyncPromise, SentryError, isThenable, isPlainObject } from '@sentry/utils';\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api.js';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope.js';\nimport { setupIntegrations as _setupIntegrations } from './integration.js';\nvar ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\n\nvar BaseClient = /*#__PURE__*/function () {\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  function BaseClient(options) {\n    _classCallCheck(this, BaseClient);\n\n    ;\n\n    BaseClient.prototype.__init.call(this);\n\n    BaseClient.prototype.__init2.call(this);\n\n    BaseClient.prototype.__init3.call(this);\n\n    BaseClient.prototype.__init4.call(this);\n\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n      var url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options);\n      this._transport = options.transport(_objectSpread(_objectSpread({\n        recordDroppedEvent: this.recordDroppedEvent.bind(this)\n      }, options.transportOptions), {}, {\n        url: url\n      }));\n    } else {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('No DSN provided, client will not do anything.');\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(BaseClient, [{\n    key: \"__init\",\n    value:\n    /** Options passed to the SDK. */\n\n    /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n\n    /** Array of set up integrations. */\n    function __init() {\n      this._integrations = {};\n    }\n    /** Indicates whether this client's integrations have been set up. */\n\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._integrationsInitialized = false;\n    }\n    /** Number of calls being processed */\n\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this._numProcessing = 0;\n    }\n    /** Holds flushable  */\n\n  }, {\n    key: \"__init4\",\n    value: function __init4() {\n      this._outcomes = {};\n    }\n  }, {\n    key: \"captureException\",\n    value: function captureException(exception, hint, scope) {\n      var _this = this;\n\n      // ensure we haven't captured this very object before\n      if (checkOrSetAlreadyCaught(exception)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(ALREADY_SEEN_ERROR);\n        return;\n      }\n\n      var eventId = hint && hint.event_id;\n\n      this._process(this.eventFromException(exception, hint).then(function (event) {\n        return _this._captureEvent(event, hint, scope);\n      }).then(function (result) {\n        eventId = result;\n      }));\n\n      return eventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"captureMessage\",\n    value: function captureMessage(message, level, hint, scope) {\n      var _this2 = this;\n\n      var eventId = hint && hint.event_id;\n      var promisedEvent = isPrimitive(message) ? this.eventFromMessage(String(message), level, hint) : this.eventFromException(message, hint);\n\n      this._process(promisedEvent.then(function (event) {\n        return _this2._captureEvent(event, hint, scope);\n      }).then(function (result) {\n        eventId = result;\n      }));\n\n      return eventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"captureEvent\",\n    value: function captureEvent(event, hint, scope) {\n      // ensure we haven't captured this very object before\n      if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(ALREADY_SEEN_ERROR);\n        return;\n      }\n\n      var eventId = hint && hint.event_id;\n\n      this._process(this._captureEvent(event, hint, scope).then(function (result) {\n        eventId = result;\n      }));\n\n      return eventId;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"captureSession\",\n    value: function captureSession(session) {\n      if (!this._isEnabled()) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('SDK not enabled, will not capture session.');\n        return;\n      }\n\n      if (!(typeof session.release === 'string')) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('Discarded session because of missing or non-string release');\n      } else {\n        this.sendSession(session); // After sending, we set init false to indicate it's not the first occurrence\n\n        updateSession(session, {\n          init: false\n        });\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getDsn\",\n    value: function getDsn() {\n      return this._dsn;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      return this._options;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getTransport\",\n    value: function getTransport() {\n      return this._transport;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush(timeout) {\n      var transport = this._transport;\n\n      if (transport) {\n        return this._isClientDoneProcessing(timeout).then(function (clientFinished) {\n          return transport.flush(timeout).then(function (transportFlushed) {\n            return clientFinished && transportFlushed;\n          });\n        });\n      } else {\n        return resolvedSyncPromise(true);\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(timeout) {\n      var _this3 = this;\n\n      return this.flush(timeout).then(function (result) {\n        _this3.getOptions().enabled = false;\n        return result;\n      });\n    }\n    /**\n     * Sets up the integrations\n     */\n\n  }, {\n    key: \"setupIntegrations\",\n    value: function setupIntegrations() {\n      if (this._isEnabled() && !this._integrationsInitialized) {\n        this._integrations = _setupIntegrations(this._options.integrations);\n        this._integrationsInitialized = true;\n      }\n    }\n    /**\n     * Gets an installed integration by its `id`.\n     *\n     * @returns The installed integration or `undefined` if no integration with that `id` was installed.\n     */\n\n  }, {\n    key: \"getIntegrationById\",\n    value: function getIntegrationById(integrationId) {\n      return this._integrations[integrationId];\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getIntegration\",\n    value: function getIntegration(integration) {\n      try {\n        return this._integrations[integration.id] || null;\n      } catch (_oO) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Cannot retrieve integration \".concat(integration.id, \" from the current Client\"));\n        return null;\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"sendEvent\",\n    value: function sendEvent(event) {\n      var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this._dsn) {\n        var env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n        var _iterator = _createForOfIteratorHelper(hint.attachments || []),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var attachment = _step.value;\n            env = addItemToEnvelope(env, createAttachmentEnvelopeItem(attachment, this._options.transportOptions && this._options.transportOptions.textEncoder));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this._sendEnvelope(env);\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"sendSession\",\n    value: function sendSession(session) {\n      if (this._dsn) {\n        var env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n        this._sendEnvelope(env);\n      }\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"recordDroppedEvent\",\n    value: function recordDroppedEvent(reason, category) {\n      if (this._options.sendClientReports) {\n        // We want to track each category (error, transaction, session) separately\n        // but still keep the distinction between different type of outcomes.\n        // We could use nested maps, but it's much easier to read and type this way.\n        // A correct type for map-based implementation if we want to go that route\n        // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n        // With typescript 4.1 we could even use template literal types\n        var key = \"\".concat(reason, \":\").concat(category);\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(\"Adding outcome: \\\"\".concat(key, \"\\\"\")); // The following works because undefined + 1 === NaN and NaN is falsy\n\n        this._outcomes[key] = this._outcomes[key] + 1 || 1;\n      }\n    }\n    /** Updates existing session based on the provided event */\n\n  }, {\n    key: \"_updateSessionFromEvent\",\n    value: function _updateSessionFromEvent(session, event) {\n      var crashed = false;\n      var errored = false;\n      var exceptions = event.exception && event.exception.values;\n\n      if (exceptions) {\n        errored = true;\n\n        var _iterator2 = _createForOfIteratorHelper(exceptions),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var ex = _step2.value;\n            var mechanism = ex.mechanism;\n\n            if (mechanism && mechanism.handled === false) {\n              crashed = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      } // A session is updated and that session update is sent in only one of the two following scenarios:\n      // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n      // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n\n\n      var sessionNonTerminal = session.status === 'ok';\n      var shouldUpdateAndSend = sessionNonTerminal && session.errors === 0 || sessionNonTerminal && crashed;\n\n      if (shouldUpdateAndSend) {\n        updateSession(session, _objectSpread(_objectSpread({}, crashed && {\n          status: 'crashed'\n        }), {}, {\n          errors: session.errors || Number(errored || crashed)\n        }));\n        this.captureSession(session);\n      }\n    }\n    /**\n     * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n     * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n     *\n     * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n     * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n     * `true`.\n     * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n     * `false` otherwise\n     */\n\n  }, {\n    key: \"_isClientDoneProcessing\",\n    value: function _isClientDoneProcessing(timeout) {\n      var _this4 = this;\n\n      return new SyncPromise(function (resolve) {\n        var ticked = 0;\n        var tick = 1;\n        var interval = setInterval(function () {\n          if (_this4._numProcessing == 0) {\n            clearInterval(interval);\n            resolve(true);\n          } else {\n            ticked += tick;\n\n            if (timeout && ticked >= timeout) {\n              clearInterval(interval);\n              resolve(false);\n            }\n          }\n        }, tick);\n      });\n    }\n    /** Determines whether this SDK is enabled and a valid Dsn is present. */\n\n  }, {\n    key: \"_isEnabled\",\n    value: function _isEnabled() {\n      return this.getOptions().enabled !== false && this._dsn !== undefined;\n    }\n    /**\n     * Adds common information to events.\n     *\n     * The information includes release and environment from `options`,\n     * breadcrumbs and context (extra, tags and user) from the scope.\n     *\n     * Information that is already present in the event is never overwritten. For\n     * nested objects, such as the context, keys are merged.\n     *\n     * @param event The original event.\n     * @param hint May contain additional information about the original exception.\n     * @param scope A scope containing event metadata.\n     * @returns A new event with more information.\n     */\n\n  }, {\n    key: \"_prepareEvent\",\n    value: function _prepareEvent(event, hint, scope) {\n      var _this5 = this;\n\n      var _this$getOptions = this.getOptions(),\n          _this$getOptions$norm = _this$getOptions.normalizeDepth,\n          normalizeDepth = _this$getOptions$norm === void 0 ? 3 : _this$getOptions$norm,\n          _this$getOptions$norm2 = _this$getOptions.normalizeMaxBreadth,\n          normalizeMaxBreadth = _this$getOptions$norm2 === void 0 ? 1000 : _this$getOptions$norm2;\n\n      var prepared = _objectSpread(_objectSpread({}, event), {}, {\n        event_id: event.event_id || hint.event_id || uuid4(),\n        timestamp: event.timestamp || dateTimestampInSeconds()\n      });\n\n      this._applyClientOptions(prepared);\n\n      this._applyIntegrationsMetadata(prepared); // If we have scope given to us, use it as the base for further modifications.\n      // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n\n\n      var finalScope = scope;\n\n      if (hint.captureContext) {\n        finalScope = Scope.clone(finalScope).update(hint.captureContext);\n      } // We prepare the result here with a resolved Event.\n\n\n      var result = resolvedSyncPromise(prepared); // This should be the last thing called, since we want that\n      // {@link Hub.addEventProcessor} gets the finished prepared event.\n\n      if (finalScope) {\n        // Collect attachments from the hint and scope\n        var attachments = [].concat(_toConsumableArray(hint.attachments || []), _toConsumableArray(finalScope.getAttachments()));\n\n        if (attachments.length) {\n          hint.attachments = attachments;\n        } // In case we have a hub we reassign it.\n\n\n        result = finalScope.applyToEvent(prepared, hint);\n      }\n\n      return result.then(function (evt) {\n        if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n          return _this5._normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n        }\n\n        return evt;\n      });\n    }\n    /**\n     * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n     * Normalized keys:\n     * - `breadcrumbs.data`\n     * - `user`\n     * - `contexts`\n     * - `extra`\n     * @param event Event\n     * @returns Normalized event\n     */\n\n  }, {\n    key: \"_normalizeEvent\",\n    value: function _normalizeEvent(event, depth, maxBreadth) {\n      if (!event) {\n        return null;\n      }\n\n      var normalized = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, event), event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(function (b) {\n          return _objectSpread(_objectSpread({}, b), b.data && {\n            data: normalize(b.data, depth, maxBreadth)\n          });\n        })\n      }), event.user && {\n        user: normalize(event.user, depth, maxBreadth)\n      }), event.contexts && {\n        contexts: normalize(event.contexts, depth, maxBreadth)\n      }), event.extra && {\n        extra: normalize(event.extra, depth, maxBreadth)\n      }); // event.contexts.trace stores information about a Transaction. Similarly,\n      // event.spans[] stores information about child Spans. Given that a\n      // Transaction is conceptually a Span, normalization should apply to both\n      // Transactions and Spans consistently.\n      // For now the decision is to skip normalization of Transactions and Spans,\n      // so this block overwrites the normalized event to add back the original\n      // Transaction information prior to normalization.\n\n\n      if (event.contexts && event.contexts.trace && normalized.contexts) {\n        normalized.contexts.trace = event.contexts.trace; // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n\n        if (event.contexts.trace.data) {\n          normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);\n        }\n      } // event.spans[].data may contain circular/dangerous data so we need to normalize it\n\n\n      if (event.spans) {\n        normalized.spans = event.spans.map(function (span) {\n          // We cannot use the spread operator here because `toJSON` on `span` is non-enumerable\n          if (span.data) {\n            span.data = normalize(span.data, depth, maxBreadth);\n          }\n\n          return span;\n        });\n      }\n\n      return normalized;\n    }\n    /**\n     *  Enhances event using the client configuration.\n     *  It takes care of all \"static\" values like environment, release and `dist`,\n     *  as well as truncating overly long values.\n     * @param event event instance to be enhanced\n     */\n\n  }, {\n    key: \"_applyClientOptions\",\n    value: function _applyClientOptions(event) {\n      var options = this.getOptions();\n      var environment = options.environment,\n          release = options.release,\n          dist = options.dist,\n          _options$maxValueLeng = options.maxValueLength,\n          maxValueLength = _options$maxValueLeng === void 0 ? 250 : _options$maxValueLeng;\n\n      if (!('environment' in event)) {\n        event.environment = 'environment' in options ? environment : 'production';\n      }\n\n      if (event.release === undefined && release !== undefined) {\n        event.release = release;\n      }\n\n      if (event.dist === undefined && dist !== undefined) {\n        event.dist = dist;\n      }\n\n      if (event.message) {\n        event.message = truncate(event.message, maxValueLength);\n      }\n\n      var exception = event.exception && event.exception.values && event.exception.values[0];\n\n      if (exception && exception.value) {\n        exception.value = truncate(exception.value, maxValueLength);\n      }\n\n      var request = event.request;\n\n      if (request && request.url) {\n        request.url = truncate(request.url, maxValueLength);\n      }\n    }\n    /**\n     * This function adds all used integrations to the SDK info in the event.\n     * @param event The event that will be filled with all integrations.\n     */\n\n  }, {\n    key: \"_applyIntegrationsMetadata\",\n    value: function _applyIntegrationsMetadata(event) {\n      var integrationsArray = Object.keys(this._integrations);\n\n      if (integrationsArray.length > 0) {\n        event.sdk = event.sdk || {};\n        event.sdk.integrations = [].concat(_toConsumableArray(event.sdk.integrations || []), integrationsArray);\n      }\n    }\n    /**\n     * Processes the event and logs an error in case of rejection\n     * @param event\n     * @param hint\n     * @param scope\n     */\n\n  }, {\n    key: \"_captureEvent\",\n    value: function _captureEvent(event) {\n      var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var scope = arguments.length > 2 ? arguments[2] : undefined;\n      return this._processEvent(event, hint, scope).then(function (finalEvent) {\n        return finalEvent.event_id;\n      }, function (reason) {\n        if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n          // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n          // control flow, log just the message (no stack) as a log-level log.\n          var sentryError = reason;\n\n          if (sentryError.logLevel === 'log') {\n            logger.log(sentryError.message);\n          } else {\n            logger.warn(sentryError);\n          }\n        }\n\n        return undefined;\n      });\n    }\n    /**\n     * Processes an event (either error or message) and sends it to Sentry.\n     *\n     * This also adds breadcrumbs and context information to the event. However,\n     * platform specific meta data (such as the User's IP address) must be added\n     * by the SDK implementor.\n     *\n     *\n     * @param event The event to send to Sentry.\n     * @param hint May contain additional information about the original exception.\n     * @param scope A scope containing event metadata.\n     * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n     */\n\n  }, {\n    key: \"_processEvent\",\n    value: function _processEvent(event, hint, scope) {\n      var _this6 = this;\n\n      var _this$getOptions2 = this.getOptions(),\n          beforeSend = _this$getOptions2.beforeSend,\n          sampleRate = _this$getOptions2.sampleRate;\n\n      if (!this._isEnabled()) {\n        return rejectedSyncPromise(new SentryError('SDK not enabled, will not capture event.', 'log'));\n      }\n\n      var isTransaction = event.type === 'transaction'; // 1.0 === 100% events are sent\n      // 0.0 === 0% events are sent\n      // Sampling for transaction happens somewhere else\n\n      if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n        this.recordDroppedEvent('sample_rate', 'error');\n        return rejectedSyncPromise(new SentryError(\"Discarding event because it's not included in the random sample (sampling rate = \".concat(sampleRate, \")\"), 'log'));\n      }\n\n      return this._prepareEvent(event, hint, scope).then(function (prepared) {\n        if (prepared === null) {\n          _this6.recordDroppedEvent('event_processor', event.type || 'error');\n\n          throw new SentryError('An event processor returned null, will not send event.', 'log');\n        }\n\n        var isInternalException = hint.data && hint.data.__sentry__ === true;\n\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        var beforeSendResult = beforeSend(prepared, hint);\n        return _ensureBeforeSendRv(beforeSendResult);\n      }).then(function (processedEvent) {\n        if (processedEvent === null) {\n          _this6.recordDroppedEvent('before_send', event.type || 'error');\n\n          throw new SentryError('`beforeSend` returned `null`, will not send event.', 'log');\n        }\n\n        var session = scope && scope.getSession();\n\n        if (!isTransaction && session) {\n          _this6._updateSessionFromEvent(session, processedEvent);\n        }\n\n        _this6.sendEvent(processedEvent, hint);\n\n        return processedEvent;\n      }).then(null, function (reason) {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        _this6.captureException(reason, {\n          data: {\n            __sentry__: true\n          },\n          originalException: reason\n        });\n\n        throw new SentryError(\"Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: \".concat(reason));\n      });\n    }\n    /**\n     * Occupies the client with processing and event\n     */\n\n  }, {\n    key: \"_process\",\n    value: function _process(promise) {\n      var _this7 = this;\n\n      this._numProcessing += 1;\n      void promise.then(function (value) {\n        _this7._numProcessing -= 1;\n        return value;\n      }, function (reason) {\n        _this7._numProcessing -= 1;\n        return reason;\n      });\n    }\n    /**\n     * @inheritdoc\n     */\n\n  }, {\n    key: \"_sendEnvelope\",\n    value: function _sendEnvelope(envelope) {\n      if (this._transport && this._dsn) {\n        this._transport.send(envelope).then(null, function (reason) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Error while sending event:', reason);\n        });\n      } else {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Transport disabled');\n      }\n    }\n    /**\n     * Clears outcomes on this client and returns them.\n     */\n\n  }, {\n    key: \"_clearOutcomes\",\n    value: function _clearOutcomes() {\n      var outcomes = this._outcomes;\n      this._outcomes = {};\n      return Object.keys(outcomes).map(function (key) {\n        var _key$split = key.split(':'),\n            _key$split2 = _slicedToArray(_key$split, 2),\n            reason = _key$split2[0],\n            category = _key$split2[1];\n\n        return {\n          reason: reason,\n          category: category,\n          quantity: outcomes[key]\n        };\n      });\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }]);\n\n  return BaseClient;\n}();\n/**\n * Verifies that return value of configured `beforeSend` is of expected type.\n */\n\n\nfunction _ensureBeforeSendRv(rv) {\n  var nullErr = '`beforeSend` method has to return `null` or a valid event.';\n\n  if (isThenable(rv)) {\n    return rv.then(function (event) {\n      if (!(isPlainObject(event) || event === null)) {\n        throw new SentryError(nullErr);\n      }\n\n      return event;\n    }, function (e) {\n      throw new SentryError(\"beforeSend rejected with \".concat(e));\n    });\n  } else if (!(isPlainObject(rv) || rv === null)) {\n    throw new SentryError(nullErr);\n  }\n\n  return rv;\n}\n\nexport { BaseClient };","map":null,"metadata":{},"sourceType":"module"}