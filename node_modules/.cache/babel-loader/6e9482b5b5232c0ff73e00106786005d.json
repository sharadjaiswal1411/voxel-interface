{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$();\n\nimport { CurrencyAmount, TokenAmount } from '@kyberswap/ks-sdk-core';\nimport JSBI from 'jsbi';\nimport { useMemo } from 'react';\nimport { EMPTY_ARRAY, EMPTY_OBJECT } from 'constants/index';\nimport { nativeOnChain } from 'constants/tokens';\nimport ERC20_INTERFACE from '../../constants/abis/erc20';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useAllTokens } from '../../hooks/Tokens';\nimport { useMulticallContract } from '../../hooks/useContract';\nimport { isAddress } from '../../utils';\nimport { useMultipleContractSingleData, useSingleContractMultipleData } from '../multicall/hooks';\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\n\nexport function useETHBalances(uncheckedAddresses) {\n  _s();\n\n  var multicallContract = useMulticallContract();\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      chainId = _useActiveWeb3React.chainId;\n\n  var addresses = useMemo(function () {\n    return uncheckedAddresses ? uncheckedAddresses.map(isAddress).filter(function (a) {\n      return a !== false;\n    }).sort() : [];\n  }, [uncheckedAddresses]);\n  var results = useSingleContractMultipleData(multicallContract, 'getEthBalance', useMemo(function () {\n    return addresses.map(function (address) {\n      return [address];\n    });\n  }, [addresses]));\n  return useMemo(function () {\n    return addresses.reduce(function (memo, address, i) {\n      var _results$i, _results$i$result;\n\n      var value = results === null || results === void 0 ? void 0 : (_results$i = results[i]) === null || _results$i === void 0 ? void 0 : (_results$i$result = _results$i.result) === null || _results$i$result === void 0 ? void 0 : _results$i$result[0];\n      if (value) memo[address] = CurrencyAmount.fromRawAmount(nativeOnChain(chainId), JSBI.BigInt(value.toString()));\n      return memo;\n    }, {});\n  }, [addresses, results, chainId]);\n}\n\n_s(useETHBalances, \"CpA2EJGdPOiD3tSsQg+BME/wCB4=\", false, function () {\n  return [useMulticallContract, useActiveWeb3React, useSingleContractMultipleData];\n});\n\nvar stringifyBalance = function stringifyBalance(balanceMap) {\n  return Object.keys(balanceMap).map(function (key) {\n    return key + balanceMap[key].toExact();\n  }).join(',');\n};\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\n\n\nexport function useTokenBalancesWithLoadingIndicator(address, tokens) {\n  _s2();\n\n  var validatedTokens = useMemo(function () {\n    var _tokens$filter;\n\n    return (_tokens$filter = tokens === null || tokens === void 0 ? void 0 : tokens.filter(function (t) {\n      return isAddress(t === null || t === void 0 ? void 0 : t.address) !== false;\n    })) !== null && _tokens$filter !== void 0 ? _tokens$filter : [];\n  }, [tokens]);\n  var validatedTokenAddresses = useMemo(function () {\n    return validatedTokens.map(function (vt) {\n      return vt.address;\n    });\n  }, [validatedTokens]);\n  var balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address]);\n  var anyLoading = useMemo(function () {\n    return balances.some(function (callState) {\n      return callState.loading;\n    });\n  }, [balances]);\n  var balanceResult = useMemo(function () {\n    return address && validatedTokens.length > 0 ? validatedTokens.reduce(function (memo, token, i) {\n      var _balances$i, _balances$i$result;\n\n      var value = balances === null || balances === void 0 ? void 0 : (_balances$i = balances[i]) === null || _balances$i === void 0 ? void 0 : (_balances$i$result = _balances$i.result) === null || _balances$i$result === void 0 ? void 0 : _balances$i$result[0];\n      var amount = value ? JSBI.BigInt(value.toString()) : undefined;\n\n      if (amount) {\n        memo[token.address] = TokenAmount.fromRawAmount(token, amount);\n      }\n\n      return memo;\n    }, {}) : EMPTY_OBJECT;\n  }, [address, validatedTokens, balances]); // `balanceResult` was calculated base on `balances`, when `balances` changes, `balanceResult` recalculated\n  // again and return new instance of the result.\n  // But sometimes (most time likely), new result and old result are same, but have different instance.\n  // Below we are going to cache it, so if new result deep equals to old result, old result's instance will be use instead\n  // This cache helps hooks which calling this hooks and depend on this result don't have to calculating again with new dependency changed\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  var balanceResultCached = useMemo(function () {\n    return balanceResult;\n  }, [stringifyBalance(balanceResult)]);\n  return [balanceResultCached, anyLoading];\n}\n\n_s2(useTokenBalancesWithLoadingIndicator, \"uwN3E3ZcnykXSBzhpl4g0P5b8Mg=\", false, function () {\n  return [useMultipleContractSingleData];\n});\n\nexport function useTokenBalances(address, tokens) {\n  _s3();\n\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0];\n} // get the balance for a single token/account combo\n\n_s3(useTokenBalances, \"mWHFhmTyaoodDeiE1Op0b2ODA8c=\", false, function () {\n  return [useTokenBalancesWithLoadingIndicator];\n});\n\nexport function useTokenBalance(account, token) {\n  _s4();\n\n  var tokenBalances = useTokenBalances(account, [token]);\n  if (!token) return undefined;\n  return tokenBalances[token.address];\n}\n\n_s4(useTokenBalance, \"Bs7OvuixKI6epyl0XTe28FcYl68=\", false, function () {\n  return [useTokenBalances];\n});\n\nexport function useCurrencyBalances(account, currencies) {\n  _s5();\n\n  var tokens = useMemo(function () {\n    var result = currencies === null || currencies === void 0 ? void 0 : currencies.filter(function (currency) {\n      var _currency$isToken;\n\n      return (_currency$isToken = currency === null || currency === void 0 ? void 0 : currency.isToken) !== null && _currency$isToken !== void 0 ? _currency$isToken : false;\n    });\n    return result !== null && result !== void 0 && result.length ? result : EMPTY_ARRAY;\n  }, [currencies]);\n  var tokenBalances = useTokenBalances(account, tokens);\n  var containsETH = useMemo(function () {\n    var _currencies$some;\n\n    return (_currencies$some = currencies === null || currencies === void 0 ? void 0 : currencies.some(function (currency) {\n      return currency === null || currency === void 0 ? void 0 : currency.isNative;\n    })) !== null && _currencies$some !== void 0 ? _currencies$some : false;\n  }, [currencies]);\n  var accounts = useMemo(function () {\n    return containsETH ? [account] : EMPTY_ARRAY;\n  }, [containsETH, account]);\n  var ethBalance = useETHBalances(accounts);\n  return useMemo(function () {\n    var _currencies$map;\n\n    return (_currencies$map = currencies === null || currencies === void 0 ? void 0 : currencies.map(function (currency) {\n      if (!account || !currency) return undefined;\n      if (currency !== null && currency !== void 0 && currency.isNative) return ethBalance[account];\n      return tokenBalances[currency.address];\n    })) !== null && _currencies$map !== void 0 ? _currencies$map : EMPTY_ARRAY;\n  }, [account, currencies, ethBalance, tokenBalances]);\n}\n\n_s5(useCurrencyBalances, \"yMsNSbgSyC2ixAIudajKXr+zhXg=\", false, function () {\n  return [useTokenBalances, useETHBalances];\n});\n\nexport function useCurrencyBalance(account, currency) {\n  _s6();\n\n  return useCurrencyBalances(account, useMemo(function () {\n    return [currency];\n  }, [currency]))[0];\n} // mimics useAllBalances\n\n_s6(useCurrencyBalance, \"0wJSopjcTzaCP/pnaYzHun/ibzg=\", false, function () {\n  return [useCurrencyBalances];\n});\n\nexport function useAllTokenBalances() {\n  _s7();\n\n  var _useTokenBalances;\n\n  var _useActiveWeb3React2 = useActiveWeb3React(),\n      account = _useActiveWeb3React2.account;\n\n  var allTokens = useAllTokens();\n  var allTokensArray = useMemo(function () {\n    return Object.values(allTokens !== null && allTokens !== void 0 ? allTokens : {});\n  }, [allTokens]);\n  return (_useTokenBalances = useTokenBalances(account !== null && account !== void 0 ? account : undefined, allTokensArray)) !== null && _useTokenBalances !== void 0 ? _useTokenBalances : EMPTY_OBJECT;\n}\n\n_s7(useAllTokenBalances, \"PN1cCFbe9qgYjSWbxPBkvNmzwXQ=\", false, function () {\n  return [useActiveWeb3React, useAllTokens, useTokenBalances];\n});","map":{"version":3,"names":["CurrencyAmount","TokenAmount","JSBI","useMemo","EMPTY_ARRAY","EMPTY_OBJECT","nativeOnChain","ERC20_INTERFACE","useActiveWeb3React","useAllTokens","useMulticallContract","isAddress","useMultipleContractSingleData","useSingleContractMultipleData","useETHBalances","uncheckedAddresses","multicallContract","chainId","addresses","map","filter","a","sort","results","address","reduce","memo","i","value","result","fromRawAmount","BigInt","toString","stringifyBalance","balanceMap","Object","keys","key","toExact","join","useTokenBalancesWithLoadingIndicator","tokens","validatedTokens","t","validatedTokenAddresses","vt","balances","anyLoading","some","callState","loading","balanceResult","length","token","amount","undefined","balanceResultCached","useTokenBalances","useTokenBalance","account","tokenBalances","useCurrencyBalances","currencies","currency","isToken","containsETH","isNative","accounts","ethBalance","useCurrencyBalance","useAllTokenBalances","allTokens","allTokensArray","values"],"sources":["/Applications/XAMPP/voxel-interface/src/state/wallet/hooks.ts"],"sourcesContent":["import { Currency, CurrencyAmount, Token, TokenAmount } from '@kyberswap/ks-sdk-core'\nimport JSBI from 'jsbi'\nimport { useMemo } from 'react'\n\nimport { EMPTY_ARRAY, EMPTY_OBJECT } from 'constants/index'\nimport { nativeOnChain } from 'constants/tokens'\n\nimport ERC20_INTERFACE from '../../constants/abis/erc20'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useAllTokens } from '../../hooks/Tokens'\nimport { useMulticallContract } from '../../hooks/useContract'\nimport { isAddress } from '../../utils'\nimport { useMultipleContractSingleData, useSingleContractMultipleData } from '../multicall/hooks'\n\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\nexport function useETHBalances(uncheckedAddresses?: (string | undefined)[]): {\n  [address: string]: CurrencyAmount<Currency> | undefined\n} {\n  const multicallContract = useMulticallContract()\n  const { chainId } = useActiveWeb3React()\n\n  const addresses: string[] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n            .map(isAddress)\n            .filter((a): a is string => a !== false)\n            .sort()\n        : [],\n    [uncheckedAddresses],\n  )\n\n  const results = useSingleContractMultipleData(\n    multicallContract,\n    'getEthBalance',\n    useMemo(() => addresses.map(address => [address]), [addresses]),\n  )\n\n  return useMemo(\n    () =>\n      addresses.reduce<{ [address: string]: CurrencyAmount<Currency> }>((memo, address, i) => {\n        const value = results?.[i]?.result?.[0]\n        if (value)\n          memo[address] = CurrencyAmount.fromRawAmount(nativeOnChain(chainId as number), JSBI.BigInt(value.toString()))\n        return memo\n      }, {}),\n    [addresses, results, chainId],\n  )\n}\n\nconst stringifyBalance = (balanceMap: { [key: string]: TokenAmount }) => {\n  return Object.keys(balanceMap)\n    .map(key => key + balanceMap[key].toExact())\n    .join(',')\n}\n\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\nexport function useTokenBalancesWithLoadingIndicator(\n  address?: string,\n  tokens?: (Token | undefined)[],\n): [{ [tokenAddress: string]: TokenAmount | undefined }, boolean] {\n  const validatedTokens: Token[] = useMemo(\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false) ?? [],\n    [tokens],\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt.address), [validatedTokens])\n\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address])\n\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\n\n  const balanceResult: { [key: string]: TokenAmount } = useMemo(\n    () =>\n      address && validatedTokens.length > 0\n        ? validatedTokens.reduce<{ [tokenAddress: string]: TokenAmount | undefined }>((memo, token, i) => {\n            const value = balances?.[i]?.result?.[0]\n            const amount = value ? JSBI.BigInt(value.toString()) : undefined\n            if (amount) {\n              memo[token.address] = TokenAmount.fromRawAmount(token, amount)\n            }\n            return memo\n          }, {})\n        : EMPTY_OBJECT,\n    [address, validatedTokens, balances],\n  )\n\n  // `balanceResult` was calculated base on `balances`, when `balances` changes, `balanceResult` recalculated\n  // again and return new instance of the result.\n  // But sometimes (most time likely), new result and old result are same, but have different instance.\n  // Below we are going to cache it, so if new result deep equals to old result, old result's instance will be use instead\n  // This cache helps hooks which calling this hooks and depend on this result don't have to calculating again with new dependency changed\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const balanceResultCached = useMemo(() => balanceResult, [stringifyBalance(balanceResult)])\n\n  return [balanceResultCached, anyLoading]\n}\n\nexport function useTokenBalances(\n  address?: string,\n  tokens?: (Token | undefined)[],\n): { [tokenAddress: string]: TokenAmount | undefined } {\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0]\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account?: string, token?: Token): TokenAmount | undefined {\n  const tokenBalances = useTokenBalances(account, [token])\n  if (!token) return undefined\n  return tokenBalances[token.address]\n}\n\nexport function useCurrencyBalances(\n  account?: string,\n  currencies?: (Currency | undefined)[],\n): (CurrencyAmount<Currency> | undefined)[] {\n  const tokens = useMemo(() => {\n    const result = currencies?.filter((currency): currency is Token => currency?.isToken ?? false)\n    return result?.length ? result : EMPTY_ARRAY\n  }, [currencies])\n\n  const tokenBalances = useTokenBalances(account, tokens)\n  const containsETH: boolean = useMemo(() => currencies?.some(currency => currency?.isNative) ?? false, [currencies])\n  const accounts = useMemo(() => (containsETH ? [account] : EMPTY_ARRAY), [containsETH, account])\n  const ethBalance = useETHBalances(accounts)\n\n  return useMemo(\n    () =>\n      currencies?.map(currency => {\n        if (!account || !currency) return undefined\n        if (currency?.isNative) return ethBalance[account]\n        return tokenBalances[currency.address]\n      }) ?? EMPTY_ARRAY,\n    [account, currencies, ethBalance, tokenBalances],\n  )\n}\n\nexport function useCurrencyBalance(account?: string, currency?: Currency): CurrencyAmount<Currency> | undefined {\n  return useCurrencyBalances(\n    account,\n    useMemo(() => [currency], [currency]),\n  )[0]\n}\n\n// mimics useAllBalances\nexport function useAllTokenBalances(): { [tokenAddress: string]: TokenAmount | undefined } {\n  const { account } = useActiveWeb3React()\n  const allTokens = useAllTokens()\n  const allTokensArray = useMemo(() => Object.values(allTokens ?? {}), [allTokens])\n  return useTokenBalances(account ?? undefined, allTokensArray) ?? EMPTY_OBJECT\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}