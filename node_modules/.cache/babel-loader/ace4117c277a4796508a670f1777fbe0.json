{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\nvar _s = $RefreshSig$();\n\nimport { ZERO } from '@kyberswap/ks-sdk-classic';\nimport { Fraction } from '@kyberswap/ks-sdk-core';\nimport axios from 'axios';\nimport { parseUnits } from 'ethers/lib/utils';\nimport JSBI from 'jsbi';\nimport { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport useSWR from 'swr';\nimport useSWRImmutable from 'swr/immutable';\nimport { CAMPAIGN_LEADERBOARD_ITEM_PER_PAGE, RESERVE_USD_DECIMALS, SWR_KEYS } from 'constants/index';\nimport { useActiveWeb3React } from 'hooks';\nimport useParsedQueryString from 'hooks/useParsedQueryString';\nimport { AppPaths } from 'pages/App';\nimport { CampaignState, CampaignStatus, setCampaignData, setLoadingCampaignData, setLoadingCampaignDataError, setLoadingSelectedCampaignLeaderboard, setLoadingSelectedCampaignLuckyWinners, setSelectedCampaign, setSelectedCampaignLeaderboard, setSelectedCampaignLuckyWinners } from 'state/campaigns/actions';\nimport { getCampaignIdFromSlug, getSlugUrlCampaign } from 'utils/campaign';\nvar MAXIMUM_ITEMS_PER_REQUEST = 10000;\n\nvar getCampaignStatus = function getCampaignStatus(_ref) {\n  var endTime = _ref.endTime,\n      startTime = _ref.startTime;\n  var now = Date.now();\n  return endTime <= now ? CampaignStatus.ENDED : startTime >= now ? CampaignStatus.UPCOMING : CampaignStatus.ONGOING;\n};\n\nvar formatLeaderboardData = function formatLeaderboardData(data) {\n  var leaderboard = _objectSpread(_objectSpread({}, data), {}, {\n    rankings: data.rankings ? data.rankings.map(function (item) {\n      var _item$Token$decimals, _item$Token, _item$rewardAmountUSD;\n\n      return {\n        userAddress: item.userAddress,\n        totalPoint: item.totalPoint,\n        rankNo: item.rankNo,\n        rewardAmount: new Fraction(item.rewardAmount || ZERO, JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt((_item$Token$decimals = item === null || item === void 0 ? void 0 : (_item$Token = item.Token) === null || _item$Token === void 0 ? void 0 : _item$Token.decimals) !== null && _item$Token$decimals !== void 0 ? _item$Token$decimals : 18))),\n        rewardAmountUsd: new Fraction(parseUnits((item === null || item === void 0 ? void 0 : (_item$rewardAmountUSD = item.rewardAmountUSD) === null || _item$rewardAmountUSD === void 0 ? void 0 : _item$rewardAmountUSD.toString()) || '0', RESERVE_USD_DECIMALS).toString(), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(RESERVE_USD_DECIMALS))),\n        rewardInUSD: item.rewardInUSD,\n        token: item.token\n      };\n    }) : [],\n    rewards: data.rewards ? data.rewards.map(function (item) {\n      var _item$Token$decimals2, _item$Token2;\n\n      return {\n        rewardAmount: new Fraction(item.RewardAmount, JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt((_item$Token$decimals2 = item === null || item === void 0 ? void 0 : (_item$Token2 = item.Token) === null || _item$Token2 === void 0 ? void 0 : _item$Token2.decimals) !== null && _item$Token$decimals2 !== void 0 ? _item$Token$decimals2 : 18))),\n        ref: item.Ref,\n        claimed: item.Claimed,\n        token: item.Token\n      };\n    }) : []\n  });\n\n  return leaderboard;\n};\n\nvar fetchLeaderBoard = function fetchLeaderBoard(_ref2) {\n  var pageNumber = _ref2.pageNumber,\n      userAddress = _ref2.userAddress,\n      lookupAddress = _ref2.lookupAddress,\n      campaignId = _ref2.campaignId;\n  return axios({\n    method: 'GET',\n    url: SWR_KEYS.getLeaderboard(campaignId),\n    params: {\n      pageSize: CAMPAIGN_LEADERBOARD_ITEM_PER_PAGE,\n      pageNumber: pageNumber,\n      userAddress: userAddress,\n      lookupAddress: lookupAddress,\n      eligibleOnly: true\n    }\n  }).then(function (_ref3) {\n    var data = _ref3.data;\n    return formatLeaderboardData(data.data);\n  });\n};\n\nvar LEADERBOARD_DEFAULT = {\n  finalizedAt: 0,\n  distributedRewardsAt: 0,\n  userRank: 0,\n  numberOfEligibleParticipants: 0,\n  rankings: [],\n  rewards: []\n};\nexport default function CampaignsUpdater() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      account = _useActiveWeb3React.account;\n\n  var _useLocation = useLocation(),\n      pathname = _useLocation.pathname;\n\n  var isCampaignPage = pathname.startsWith(AppPaths.CAMPAIGN);\n  /**********************CAMPAIGN DATA**********************/\n\n  var refLeaderboardData = useRef({});\n\n  var _useSWR = useSWR(isCampaignPage ? [SWR_KEYS.getListCampaign, account] : null, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var _yield$axios, response, promises, listCampaignWithLeaderboard, campaigns, formattedCampaigns;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios({\n              method: 'GET',\n              url: SWR_KEYS.getListCampaign,\n              params: {\n                limit: MAXIMUM_ITEMS_PER_REQUEST,\n                offset: 0,\n                userAddress: account\n              }\n            });\n\n          case 2:\n            _yield$axios = _context.sent;\n            response = _yield$axios.data;\n            // each of campaign: fetch leaderboard once to display claim button if eligible, and cache that leaderboard\n            promises = response.data.map(function (campaignInfo) {\n              var leaderboardCache = refLeaderboardData.current[campaignInfo.id];\n              if (!account) return Promise.resolve(campaignInfo);\n              return leaderboardCache ? Promise.resolve(_objectSpread(_objectSpread({}, campaignInfo), {}, {\n                leaderboard: leaderboardCache\n              })) : new Promise(function (resolve) {\n                var _account$toLowerCase;\n\n                fetchLeaderBoard({\n                  campaignId: campaignInfo.id,\n                  pageNumber: 1,\n                  userAddress: (_account$toLowerCase = account === null || account === void 0 ? void 0 : account.toLowerCase()) !== null && _account$toLowerCase !== void 0 ? _account$toLowerCase : '',\n                  lookupAddress: selectedCampaignLeaderboardLookupAddress.toLowerCase()\n                }).then(function (leaderboard) {\n                  refLeaderboardData.current[campaignInfo.id] = leaderboard; // cache it\n\n                  resolve(_objectSpread(_objectSpread({}, campaignInfo), {}, {\n                    leaderboard: leaderboard\n                  }));\n                }).catch(function () {\n                  return resolve(campaignInfo);\n                });\n              });\n            });\n            _context.next = 7;\n            return Promise.all(promises);\n\n          case 7:\n            listCampaignWithLeaderboard = _context.sent;\n            campaigns = listCampaignWithLeaderboard.map(function (item) {\n              return _objectSpread(_objectSpread({}, item), {}, {\n                startTime: item.startTime * 1000,\n                endTime: item.endTime * 1000\n              });\n            }).sort(function (a, b) {\n              var a_status = getCampaignStatus(a);\n              var b_status = getCampaignStatus(b);\n              var STATUS_PRIORITY = Object.values(CampaignStatus);\n              var a_status_index = STATUS_PRIORITY.indexOf(a_status);\n              var b_status_index = STATUS_PRIORITY.indexOf(b_status);\n              if (a_status_index !== b_status_index) return a_status_index - b_status_index;\n              if (a.startTime !== b.startTime) return b.startTime - a.startTime;\n              return b.endTime - a.endTime;\n            });\n            formattedCampaigns = campaigns.map(function (campaign) {\n              var _campaign$userInfo;\n\n              var rewardDistribution = [];\n\n              if (campaign.rewardDistribution.single) {\n                campaign.rewardDistribution.single.forEach(function (_ref5) {\n                  var amount = _ref5.amount,\n                      rank = _ref5.rank,\n                      token = _ref5.token,\n                      rewardInUSD = _ref5.rewardInUSD;\n                  rewardDistribution.push({\n                    type: 'Single',\n                    amount: amount,\n                    rank: rank,\n                    token: token,\n                    rewardInUSD: rewardInUSD\n                  });\n                });\n              }\n\n              if (campaign.rewardDistribution.range) {\n                campaign.rewardDistribution.range.forEach(function (_ref6) {\n                  var from = _ref6.from,\n                      to = _ref6.to,\n                      amount = _ref6.amount,\n                      token = _ref6.token,\n                      rewardInUSD = _ref6.rewardInUSD;\n                  rewardDistribution.push({\n                    type: 'Range',\n                    from: from,\n                    to: to,\n                    amount: amount,\n                    token: token,\n                    rewardInUSD: rewardInUSD\n                  });\n                });\n              }\n\n              if (campaign.rewardDistribution.random) {\n                campaign.rewardDistribution.random.forEach(function (_ref7) {\n                  var from = _ref7.from,\n                      to = _ref7.to,\n                      amount = _ref7.amount,\n                      numberOfWinners = _ref7.numberOfWinners,\n                      token = _ref7.token,\n                      rewardInUSD = _ref7.rewardInUSD;\n                  rewardDistribution.push({\n                    type: 'Random',\n                    from: from,\n                    to: to,\n                    amount: amount,\n                    nWinners: numberOfWinners,\n                    token: token,\n                    rewardInUSD: rewardInUSD\n                  });\n                });\n              }\n\n              if (campaign !== null && campaign !== void 0 && (_campaign$userInfo = campaign.userInfo) !== null && _campaign$userInfo !== void 0 && _campaign$userInfo.tradingVolume) campaign.userInfo.tradingVolume = Number(campaign.userInfo.tradingVolume);\n              return _objectSpread(_objectSpread({}, campaign), {}, {\n                rewardDistribution: rewardDistribution,\n                status: getCampaignStatus(campaign),\n                eligibleTokens: campaign.eligibleTokens.map(function (_ref8) {\n                  var chainId = _ref8.chainId,\n                      name = _ref8.name,\n                      symbol = _ref8.symbol,\n                      address = _ref8.address,\n                      logoURI = _ref8.logoURI,\n                      decimals = _ref8.decimals;\n                  return {\n                    chainId: chainId,\n                    name: name,\n                    symbol: symbol,\n                    address: address,\n                    logoURI: logoURI,\n                    decimals: decimals\n                  };\n                })\n              });\n            });\n            return _context.abrupt(\"return\", formattedCampaigns);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))),\n      campaignData = _useSWR.data,\n      isLoadingCampaignData = _useSWR.isValidating,\n      loadingCampaignDataError = _useSWR.error;\n\n  var slug = pathname.replace(AppPaths.CAMPAIGN, '');\n  var qs = useParsedQueryString();\n  var selectedCampaignId = qs.selectedCampaignId || getCampaignIdFromSlug(slug);\n  var history = useHistory();\n  useEffect(function () {\n    dispatch(setCampaignData({\n      campaigns: campaignData !== null && campaignData !== void 0 ? campaignData : []\n    }));\n\n    if (campaignData && campaignData.length) {\n      if (selectedCampaignId === undefined) {\n        history.push(getSlugUrlCampaign(campaignData[0]));\n      } else {\n        var _selectedCampaign = campaignData.find(function (campaign) {\n          return campaign.id.toString() === selectedCampaignId;\n        });\n\n        if (_selectedCampaign) {\n          dispatch(setSelectedCampaign({\n            campaign: _selectedCampaign\n          }));\n        } else {\n          history.push(getSlugUrlCampaign(campaignData[0]));\n        }\n      }\n    }\n  }, [campaignData, dispatch, selectedCampaignId, history]);\n  useEffect(function () {\n    dispatch(setLoadingCampaignData(isLoadingCampaignData));\n  }, [dispatch, isLoadingCampaignData]);\n  useEffect(function () {\n    dispatch(setLoadingCampaignDataError(loadingCampaignDataError));\n  }, [dispatch, loadingCampaignDataError]);\n  var selectedCampaign = useSelector(function (state) {\n    return state.campaigns.selectedCampaign;\n  });\n  /**********************CAMPAIGN LEADERBOARD**********************/\n\n  var _useSelector = useSelector(function (state) {\n    return state.campaigns;\n  }),\n      selectedCampaignLeaderboardPageNumber = _useSelector.selectedCampaignLeaderboardPageNumber,\n      selectedCampaignLeaderboardLookupAddress = _useSelector.selectedCampaignLeaderboardLookupAddress;\n\n  var _useSWRImmutable = useSWRImmutable(selectedCampaign ? [selectedCampaign, SWR_KEYS.getLeaderboard(selectedCampaign.id), selectedCampaignLeaderboardPageNumber, selectedCampaignLeaderboardLookupAddress, account] : null, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _account$toLowerCase2;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (selectedCampaign) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", LEADERBOARD_DEFAULT);\n\n          case 2:\n            _context2.prev = 2;\n            return _context2.abrupt(\"return\", fetchLeaderBoard({\n              campaignId: selectedCampaign.id,\n              pageNumber: selectedCampaignLeaderboardPageNumber,\n              userAddress: (_account$toLowerCase2 = account === null || account === void 0 ? void 0 : account.toLowerCase()) !== null && _account$toLowerCase2 !== void 0 ? _account$toLowerCase2 : '',\n              lookupAddress: selectedCampaignLeaderboardLookupAddress.toLowerCase()\n            }));\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](2);\n            console.error(_context2.t0);\n            return _context2.abrupt(\"return\", LEADERBOARD_DEFAULT);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 6]]);\n  }))),\n      leaderboard = _useSWRImmutable.data,\n      isLoadingLeaderboard = _useSWRImmutable.isValidating;\n\n  useEffect(function () {\n    if (leaderboard) {\n      dispatch(setSelectedCampaignLeaderboard({\n        leaderboard: leaderboard\n      }));\n    }\n  }, [dispatch, leaderboard]);\n  useEffect(function () {\n    dispatch(setLoadingSelectedCampaignLeaderboard(isLoadingLeaderboard));\n  }, [dispatch, isLoadingLeaderboard]);\n  /**********************CAMPAIGN LUCKY WINNERS**********************/\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.campaigns;\n  }),\n      selectedCampaignLuckyWinnersPageNumber = _useSelector2.selectedCampaignLuckyWinnersPageNumber,\n      selectedCampaignLuckyWinnersLookupAddress = _useSelector2.selectedCampaignLuckyWinnersLookupAddress;\n\n  var _useSWRImmutable2 = useSWRImmutable(selectedCampaign ? [selectedCampaign, SWR_KEYS.getLuckyWinners(selectedCampaign.id), selectedCampaignLuckyWinnersPageNumber, selectedCampaignLuckyWinnersLookupAddress] : null, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    var response, data, _luckyWinners;\n\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(selectedCampaign === undefined || selectedCampaign.campaignState === CampaignState.CampaignStateReady)) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", []);\n\n          case 2:\n            _context3.prev = 2;\n            _context3.next = 5;\n            return axios({\n              method: 'GET',\n              url: SWR_KEYS.getLuckyWinners(selectedCampaign.id),\n              params: {\n                pageSize: CAMPAIGN_LEADERBOARD_ITEM_PER_PAGE,\n                pageNumber: selectedCampaignLuckyWinnersPageNumber,\n                lookupAddress: selectedCampaignLuckyWinnersLookupAddress.toLowerCase()\n              }\n            });\n\n          case 5:\n            response = _context3.sent;\n            data = response.data.data;\n            _luckyWinners = data.map(function (item) {\n              var _item$token$decimals, _item$token;\n\n              return {\n                userAddress: item.userAddress,\n                rewardAmount: new Fraction(item.rewardAmount, JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt((_item$token$decimals = item === null || item === void 0 ? void 0 : (_item$token = item.token) === null || _item$token === void 0 ? void 0 : _item$token.decimals) !== null && _item$token$decimals !== void 0 ? _item$token$decimals : 18))),\n                token: item.token\n              };\n            });\n            return _context3.abrupt(\"return\", _luckyWinners);\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](2);\n            console.error(_context3.t0);\n            return _context3.abrupt(\"return\", []);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[2, 11]]);\n  }))),\n      luckyWinners = _useSWRImmutable2.data,\n      isLoadingLuckyWinners = _useSWRImmutable2.isValidating;\n\n  useEffect(function () {\n    if (luckyWinners !== undefined) {\n      dispatch(setSelectedCampaignLuckyWinners({\n        luckyWinners: luckyWinners\n      }));\n    }\n  }, [dispatch, luckyWinners]);\n  useEffect(function () {\n    dispatch(setLoadingSelectedCampaignLuckyWinners(isLoadingLuckyWinners));\n  }, [dispatch, isLoadingLuckyWinners]);\n  return null;\n}\n\n_s(CampaignsUpdater, \"gHSP7R5DwXTwyc9XRjfAdjfSKTY=\", false, function () {\n  return [useDispatch, useActiveWeb3React, useLocation, useSWR, useParsedQueryString, useHistory, useSelector, useSelector, useSWRImmutable, useSelector, useSWRImmutable];\n});\n\n_c = CampaignsUpdater;\n\nvar _c;\n\n$RefreshReg$(_c, \"CampaignsUpdater\");","map":{"version":3,"names":["ZERO","Fraction","axios","parseUnits","JSBI","useEffect","useRef","useDispatch","useSelector","useHistory","useLocation","useSWR","useSWRImmutable","CAMPAIGN_LEADERBOARD_ITEM_PER_PAGE","RESERVE_USD_DECIMALS","SWR_KEYS","useActiveWeb3React","useParsedQueryString","AppPaths","CampaignState","CampaignStatus","setCampaignData","setLoadingCampaignData","setLoadingCampaignDataError","setLoadingSelectedCampaignLeaderboard","setLoadingSelectedCampaignLuckyWinners","setSelectedCampaign","setSelectedCampaignLeaderboard","setSelectedCampaignLuckyWinners","getCampaignIdFromSlug","getSlugUrlCampaign","MAXIMUM_ITEMS_PER_REQUEST","getCampaignStatus","endTime","startTime","now","Date","ENDED","UPCOMING","ONGOING","formatLeaderboardData","data","leaderboard","rankings","map","item","userAddress","totalPoint","rankNo","rewardAmount","exponentiate","BigInt","Token","decimals","rewardAmountUsd","rewardAmountUSD","toString","rewardInUSD","token","rewards","RewardAmount","ref","Ref","claimed","Claimed","fetchLeaderBoard","pageNumber","lookupAddress","campaignId","method","url","getLeaderboard","params","pageSize","eligibleOnly","then","LEADERBOARD_DEFAULT","finalizedAt","distributedRewardsAt","userRank","numberOfEligibleParticipants","CampaignsUpdater","dispatch","account","pathname","isCampaignPage","startsWith","CAMPAIGN","refLeaderboardData","getListCampaign","limit","offset","response","promises","campaignInfo","leaderboardCache","current","id","Promise","resolve","toLowerCase","selectedCampaignLeaderboardLookupAddress","catch","all","listCampaignWithLeaderboard","campaigns","sort","a","b","a_status","b_status","STATUS_PRIORITY","Object","values","a_status_index","indexOf","b_status_index","formattedCampaigns","campaign","rewardDistribution","single","forEach","amount","rank","push","type","range","from","to","random","numberOfWinners","nWinners","userInfo","tradingVolume","Number","status","eligibleTokens","chainId","name","symbol","address","logoURI","campaignData","isLoadingCampaignData","isValidating","loadingCampaignDataError","error","slug","replace","qs","selectedCampaignId","history","length","undefined","selectedCampaign","find","state","selectedCampaignLeaderboardPageNumber","console","isLoadingLeaderboard","selectedCampaignLuckyWinnersPageNumber","selectedCampaignLuckyWinnersLookupAddress","getLuckyWinners","campaignState","CampaignStateReady","luckyWinners","isLoadingLuckyWinners"],"sources":["/Applications/XAMPP/voxel-interface/src/state/campaigns/updater.tsx"],"sourcesContent":["import { ZERO } from '@kyberswap/ks-sdk-classic'\nimport { Fraction } from '@kyberswap/ks-sdk-core'\nimport axios from 'axios'\nimport { parseUnits } from 'ethers/lib/utils'\nimport JSBI from 'jsbi'\nimport { useEffect, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport useSWR from 'swr'\nimport useSWRImmutable from 'swr/immutable'\n\nimport { CAMPAIGN_LEADERBOARD_ITEM_PER_PAGE, RESERVE_USD_DECIMALS, SWR_KEYS } from 'constants/index'\nimport { useActiveWeb3React } from 'hooks'\nimport useParsedQueryString from 'hooks/useParsedQueryString'\nimport { AppPaths } from 'pages/App'\nimport {\n  CampaignData,\n  CampaignLeaderboard,\n  CampaignLeaderboardRanking,\n  CampaignLeaderboardReward,\n  CampaignLuckyWinner,\n  CampaignState,\n  CampaignStatus,\n  RewardDistribution,\n  setCampaignData,\n  setLoadingCampaignData,\n  setLoadingCampaignDataError,\n  setLoadingSelectedCampaignLeaderboard,\n  setLoadingSelectedCampaignLuckyWinners,\n  setSelectedCampaign,\n  setSelectedCampaignLeaderboard,\n  setSelectedCampaignLuckyWinners,\n} from 'state/campaigns/actions'\nimport { AppState } from 'state/index'\nimport { SerializedToken } from 'state/user/actions'\nimport { getCampaignIdFromSlug, getSlugUrlCampaign } from 'utils/campaign'\n\nconst MAXIMUM_ITEMS_PER_REQUEST = 10000\n\nconst getCampaignStatus = ({ endTime, startTime }: CampaignData) => {\n  const now = Date.now()\n  return endTime <= now ? CampaignStatus.ENDED : startTime >= now ? CampaignStatus.UPCOMING : CampaignStatus.ONGOING\n}\n\nconst formatLeaderboardData = (data: CampaignLeaderboard) => {\n  const leaderboard: CampaignLeaderboard = {\n    ...data,\n    rankings: data.rankings\n      ? data.rankings.map(\n          (item: any): CampaignLeaderboardRanking => ({\n            userAddress: item.userAddress,\n            totalPoint: item.totalPoint,\n            rankNo: item.rankNo,\n            rewardAmount: new Fraction(\n              item.rewardAmount || ZERO,\n              JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(item?.Token?.decimals ?? 18)),\n            ),\n            rewardAmountUsd: new Fraction(\n              parseUnits(item?.rewardAmountUSD?.toString() || '0', RESERVE_USD_DECIMALS).toString(),\n              JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(RESERVE_USD_DECIMALS)),\n            ),\n            rewardInUSD: item.rewardInUSD,\n            token: item.token,\n          }),\n        )\n      : [],\n    rewards: data.rewards\n      ? data.rewards.map(\n          (item: any): CampaignLeaderboardReward => ({\n            rewardAmount: new Fraction(\n              item.RewardAmount,\n              JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(item?.Token?.decimals ?? 18)),\n            ),\n            ref: item.Ref,\n            claimed: item.Claimed,\n            token: item.Token,\n          }),\n        )\n      : [],\n  }\n  return leaderboard\n}\n\nconst fetchLeaderBoard = ({\n  pageNumber,\n  userAddress,\n  lookupAddress,\n  campaignId,\n}: {\n  pageNumber: number\n  userAddress: string\n  lookupAddress: string\n  campaignId: number\n}) => {\n  return axios({\n    method: 'GET',\n    url: SWR_KEYS.getLeaderboard(campaignId),\n    params: {\n      pageSize: CAMPAIGN_LEADERBOARD_ITEM_PER_PAGE,\n      pageNumber,\n      userAddress,\n      lookupAddress,\n      eligibleOnly: true,\n    },\n  }).then(({ data }) => formatLeaderboardData(data.data))\n}\n\nconst LEADERBOARD_DEFAULT: CampaignLeaderboard = {\n  finalizedAt: 0,\n  distributedRewardsAt: 0,\n  userRank: 0,\n  numberOfEligibleParticipants: 0,\n  rankings: [],\n  rewards: [],\n}\n\nexport default function CampaignsUpdater(): null {\n  const dispatch = useDispatch()\n  const { account } = useActiveWeb3React()\n  const { pathname } = useLocation()\n  const isCampaignPage = pathname.startsWith(AppPaths.CAMPAIGN)\n\n  /**********************CAMPAIGN DATA**********************/\n  const refLeaderboardData = useRef<{ [key: string]: CampaignLeaderboard }>({})\n\n  const {\n    data: campaignData,\n    isValidating: isLoadingCampaignData,\n    error: loadingCampaignDataError,\n  } = useSWR<CampaignData[]>(isCampaignPage ? [SWR_KEYS.getListCampaign, account] : null, async () => {\n    const { data: response } = await axios({\n      method: 'GET',\n      url: SWR_KEYS.getListCampaign,\n      params: {\n        limit: MAXIMUM_ITEMS_PER_REQUEST,\n        offset: 0,\n        userAddress: account,\n      },\n    })\n\n    // each of campaign: fetch leaderboard once to display claim button if eligible, and cache that leaderboard\n    const promises = response.data.map((campaignInfo: CampaignData) => {\n      const leaderboardCache = refLeaderboardData.current[campaignInfo.id]\n      if (!account) return Promise.resolve(campaignInfo)\n      return leaderboardCache\n        ? Promise.resolve({\n            ...campaignInfo,\n            leaderboard: leaderboardCache,\n          })\n        : new Promise(resolve => {\n            fetchLeaderBoard({\n              campaignId: campaignInfo.id,\n              pageNumber: 1,\n              userAddress: account?.toLowerCase() ?? '',\n              lookupAddress: selectedCampaignLeaderboardLookupAddress.toLowerCase(),\n            })\n              .then(leaderboard => {\n                refLeaderboardData.current[campaignInfo.id] = leaderboard // cache it\n                resolve({\n                  ...campaignInfo,\n                  leaderboard,\n                })\n              })\n              .catch(() => resolve(campaignInfo))\n          })\n    })\n\n    const listCampaignWithLeaderboard = await Promise.all(promises)\n\n    const campaigns: CampaignData[] = listCampaignWithLeaderboard\n      .map(item => ({ ...item, startTime: item.startTime * 1000, endTime: item.endTime * 1000 }))\n      .sort((a: CampaignData, b: CampaignData) => {\n        const a_status = getCampaignStatus(a)\n        const b_status = getCampaignStatus(b)\n        const STATUS_PRIORITY = Object.values(CampaignStatus)\n        const a_status_index = STATUS_PRIORITY.indexOf(a_status)\n        const b_status_index = STATUS_PRIORITY.indexOf(b_status)\n        if (a_status_index !== b_status_index) return a_status_index - b_status_index\n        if (a.startTime !== b.startTime) return b.startTime - a.startTime\n        return b.endTime - a.endTime\n      })\n    const formattedCampaigns: CampaignData[] = campaigns.map((campaign: any) => {\n      const rewardDistribution: RewardDistribution[] = []\n      if (campaign.rewardDistribution.single) {\n        campaign.rewardDistribution.single.forEach(\n          ({\n            amount,\n            rank,\n            token,\n            rewardInUSD,\n          }: {\n            amount: string\n            rank: number\n            token: SerializedToken\n            rewardInUSD: boolean\n          }) => {\n            rewardDistribution.push({\n              type: 'Single',\n              amount,\n              rank,\n              token,\n              rewardInUSD,\n            })\n          },\n        )\n      }\n      if (campaign.rewardDistribution.range) {\n        campaign.rewardDistribution.range.forEach(\n          ({\n            from,\n            to,\n            amount,\n            token,\n            rewardInUSD,\n          }: {\n            from: number\n            to: number\n            amount: string\n            token: SerializedToken\n            rewardInUSD: boolean\n          }) => {\n            rewardDistribution.push({\n              type: 'Range',\n              from,\n              to,\n              amount,\n              token,\n              rewardInUSD,\n            })\n          },\n        )\n      }\n      if (campaign.rewardDistribution.random) {\n        campaign.rewardDistribution.random.forEach(\n          ({\n            from,\n            to,\n            amount,\n            numberOfWinners,\n            token,\n            rewardInUSD,\n          }: {\n            from: number\n            to: number\n            amount: string\n            numberOfWinners: number\n            token: SerializedToken\n            rewardInUSD: boolean\n          }) => {\n            rewardDistribution.push({\n              type: 'Random',\n              from,\n              to,\n              amount,\n              nWinners: numberOfWinners,\n              token,\n              rewardInUSD,\n            })\n          },\n        )\n      }\n      if (campaign?.userInfo?.tradingVolume) campaign.userInfo.tradingVolume = Number(campaign.userInfo.tradingVolume)\n\n      return {\n        ...campaign,\n        rewardDistribution,\n        status: getCampaignStatus(campaign),\n        eligibleTokens: campaign.eligibleTokens.map(\n          ({ chainId, name, symbol, address, logoURI, decimals }: SerializedToken) => {\n            return {\n              chainId,\n              name,\n              symbol,\n              address,\n              logoURI,\n              decimals,\n            }\n          },\n        ),\n      }\n    })\n    return formattedCampaigns\n  })\n\n  const slug = pathname.replace(AppPaths.CAMPAIGN, '')\n  const qs = useParsedQueryString()\n  const selectedCampaignId = qs.selectedCampaignId || getCampaignIdFromSlug(slug)\n\n  const history = useHistory()\n  useEffect(() => {\n    dispatch(setCampaignData({ campaigns: campaignData ?? [] }))\n    if (campaignData && campaignData.length) {\n      if (selectedCampaignId === undefined) {\n        history.push(getSlugUrlCampaign(campaignData[0]))\n      } else {\n        const selectedCampaign = campaignData.find(campaign => campaign.id.toString() === selectedCampaignId)\n        if (selectedCampaign) {\n          dispatch(setSelectedCampaign({ campaign: selectedCampaign }))\n        } else {\n          history.push(getSlugUrlCampaign(campaignData[0]))\n        }\n      }\n    }\n  }, [campaignData, dispatch, selectedCampaignId, history])\n\n  useEffect(() => {\n    dispatch(setLoadingCampaignData(isLoadingCampaignData))\n  }, [dispatch, isLoadingCampaignData])\n\n  useEffect(() => {\n    dispatch(setLoadingCampaignDataError(loadingCampaignDataError))\n  }, [dispatch, loadingCampaignDataError])\n\n  const selectedCampaign = useSelector((state: AppState) => state.campaigns.selectedCampaign)\n\n  /**********************CAMPAIGN LEADERBOARD**********************/\n\n  const { selectedCampaignLeaderboardPageNumber, selectedCampaignLeaderboardLookupAddress } = useSelector(\n    (state: AppState) => state.campaigns,\n  )\n\n  const { data: leaderboard, isValidating: isLoadingLeaderboard } = useSWRImmutable(\n    selectedCampaign\n      ? [\n          selectedCampaign,\n          SWR_KEYS.getLeaderboard(selectedCampaign.id),\n          selectedCampaignLeaderboardPageNumber,\n          selectedCampaignLeaderboardLookupAddress,\n          account,\n        ]\n      : null,\n    async () => {\n      if (!selectedCampaign) {\n        return LEADERBOARD_DEFAULT\n      }\n\n      try {\n        return fetchLeaderBoard({\n          campaignId: selectedCampaign.id,\n          pageNumber: selectedCampaignLeaderboardPageNumber,\n          userAddress: account?.toLowerCase() ?? '',\n          lookupAddress: selectedCampaignLeaderboardLookupAddress.toLowerCase(),\n        })\n      } catch (err) {\n        console.error(err)\n        return LEADERBOARD_DEFAULT\n      }\n    },\n  )\n\n  useEffect(() => {\n    if (leaderboard) {\n      dispatch(setSelectedCampaignLeaderboard({ leaderboard }))\n    }\n  }, [dispatch, leaderboard])\n\n  useEffect(() => {\n    dispatch(setLoadingSelectedCampaignLeaderboard(isLoadingLeaderboard))\n  }, [dispatch, isLoadingLeaderboard])\n\n  /**********************CAMPAIGN LUCKY WINNERS**********************/\n\n  const { selectedCampaignLuckyWinnersPageNumber, selectedCampaignLuckyWinnersLookupAddress } = useSelector(\n    (state: AppState) => state.campaigns,\n  )\n\n  const { data: luckyWinners, isValidating: isLoadingLuckyWinners } = useSWRImmutable(\n    selectedCampaign\n      ? [\n          selectedCampaign,\n          SWR_KEYS.getLuckyWinners(selectedCampaign.id),\n          selectedCampaignLuckyWinnersPageNumber,\n          selectedCampaignLuckyWinnersLookupAddress,\n        ]\n      : null,\n    async () => {\n      if (selectedCampaign === undefined || selectedCampaign.campaignState === CampaignState.CampaignStateReady)\n        return []\n\n      try {\n        const response = await axios({\n          method: 'GET',\n          url: SWR_KEYS.getLuckyWinners(selectedCampaign.id),\n          params: {\n            pageSize: CAMPAIGN_LEADERBOARD_ITEM_PER_PAGE,\n            pageNumber: selectedCampaignLuckyWinnersPageNumber,\n            lookupAddress: selectedCampaignLuckyWinnersLookupAddress.toLowerCase(),\n          },\n        })\n        const data = response.data.data\n        const luckyWinners: CampaignLuckyWinner[] = data.map(\n          (item: any): CampaignLuckyWinner => ({\n            userAddress: item.userAddress,\n            rewardAmount: new Fraction(\n              item.rewardAmount,\n              JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(item?.token?.decimals ?? 18)),\n            ),\n            token: item.token,\n          }),\n        )\n        return luckyWinners\n      } catch (err) {\n        console.error(err)\n        return []\n      }\n    },\n  )\n\n  useEffect(() => {\n    if (luckyWinners !== undefined) {\n      dispatch(setSelectedCampaignLuckyWinners({ luckyWinners: luckyWinners }))\n    }\n  }, [dispatch, luckyWinners])\n\n  useEffect(() => {\n    dispatch(setLoadingSelectedCampaignLuckyWinners(isLoadingLuckyWinners))\n  }, [dispatch, isLoadingLuckyWinners])\n\n  return null\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}