{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\nvar _s = $RefreshSig$();\n\nimport { ChainId } from '@kyberswap/ks-sdk-core';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NETWORK_CHAIN_ID, getNetworkLibrary } from '../connectors';\nimport { fetchTokenList } from '../state/lists/actions';\nimport { getTokenListV2 } from '../utils/getTokenList';\nimport resolveENSContentHash from '../utils/resolveENSContentHash';\nimport { useActiveWeb3React } from './index';\nexport function useFetchListCallback() {\n  _s();\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      chainId = _useActiveWeb3React.chainId,\n      library = _useActiveWeb3React.library;\n\n  var dispatch = useDispatch();\n  var ensResolver = useCallback(function (ensName) {\n    if (!library || chainId !== ChainId.MAINNET) {\n      if (NETWORK_CHAIN_ID === ChainId.MAINNET) {\n        var networkLibrary = getNetworkLibrary();\n\n        if (networkLibrary) {\n          return resolveENSContentHash(ensName, networkLibrary);\n        }\n      }\n\n      throw new Error('Could not construct mainnet ENS resolver');\n    }\n\n    return resolveENSContentHash(ensName, library);\n  }, [chainId, library]); // note: prevent dispatch if using for list search or unsupported list\n\n  return useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(listUrl) {\n      var sendDispatch,\n          requestId,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              sendDispatch = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n              requestId = nanoid();\n              sendDispatch && dispatch(fetchTokenList.pending({\n                requestId: requestId,\n                url: listUrl\n              })); // return getTokenList(listUrl, ensResolver)\n\n              return _context.abrupt(\"return\", getTokenListV2(listUrl, ensResolver).then(function (tokenList) {\n                sendDispatch && dispatch(fetchTokenList.fulfilled({\n                  url: listUrl,\n                  tokenList: tokenList,\n                  requestId: requestId\n                }));\n                return tokenList;\n              }).catch(function (error) {\n                console.debug(\"Failed to get list at url \".concat(listUrl), error);\n                sendDispatch && dispatch(fetchTokenList.rejected({\n                  url: listUrl,\n                  requestId: requestId,\n                  errorMessage: error.message\n                }));\n                throw error;\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [dispatch, ensResolver]);\n}\n\n_s(useFetchListCallback, \"bPF8hnilu9tIi3RDorgSSluO4uI=\", false, function () {\n  return [useActiveWeb3React, useDispatch];\n});","map":{"version":3,"names":["ChainId","nanoid","useCallback","useDispatch","NETWORK_CHAIN_ID","getNetworkLibrary","fetchTokenList","getTokenListV2","resolveENSContentHash","useActiveWeb3React","useFetchListCallback","chainId","library","dispatch","ensResolver","ensName","MAINNET","networkLibrary","Error","listUrl","sendDispatch","requestId","pending","url","then","tokenList","fulfilled","catch","error","console","debug","rejected","errorMessage","message"],"sources":["/Applications/XAMPP/voxel-interface/src/hooks/useFetchListCallback.ts"],"sourcesContent":["import { ChainId } from '@kyberswap/ks-sdk-core'\nimport { nanoid } from '@reduxjs/toolkit'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { NETWORK_CHAIN_ID, getNetworkLibrary } from '../connectors'\nimport { AppDispatch } from '../state'\nimport { fetchTokenList } from '../state/lists/actions'\nimport { getTokenListV2 } from '../utils/getTokenList'\nimport resolveENSContentHash from '../utils/resolveENSContentHash'\nimport { useActiveWeb3React } from './index'\n\nexport function useFetchListCallback(): (listUrl: string, sendDispatch?: boolean) => Promise<TokenList> {\n  const { chainId, library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n\n  const ensResolver = useCallback(\n    (ensName: string) => {\n      if (!library || chainId !== ChainId.MAINNET) {\n        if (NETWORK_CHAIN_ID === ChainId.MAINNET) {\n          const networkLibrary = getNetworkLibrary()\n          if (networkLibrary) {\n            return resolveENSContentHash(ensName, networkLibrary)\n          }\n        }\n        throw new Error('Could not construct mainnet ENS resolver')\n      }\n      return resolveENSContentHash(ensName, library)\n    },\n    [chainId, library],\n  )\n\n  // note: prevent dispatch if using for list search or unsupported list\n  return useCallback(\n    async (listUrl: string, sendDispatch = true) => {\n      const requestId = nanoid()\n      sendDispatch && dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\n      // return getTokenList(listUrl, ensResolver)\n      return getTokenListV2(listUrl, ensResolver)\n        .then(tokenList => {\n          sendDispatch && dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\n          return tokenList\n        })\n        .catch(error => {\n          console.debug(`Failed to get list at url ${listUrl}`, error)\n          sendDispatch && dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\n          throw error\n        })\n    },\n    [dispatch, ensResolver],\n  )\n}\n"],"mappings":";;;;;AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,eAApD;AAEA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AACA,SAASC,kBAAT,QAAmC,SAAnC;AAEA,OAAO,SAASC,oBAAT,GAAiG;EAAA;;EACtG,0BAA6BD,kBAAkB,EAA/C;EAAA,IAAQE,OAAR,uBAAQA,OAAR;EAAA,IAAiBC,OAAjB,uBAAiBA,OAAjB;;EACA,IAAMC,QAAQ,GAAGV,WAAW,EAA5B;EAEA,IAAMW,WAAW,GAAGZ,WAAW,CAC7B,UAACa,OAAD,EAAqB;IACnB,IAAI,CAACH,OAAD,IAAYD,OAAO,KAAKX,OAAO,CAACgB,OAApC,EAA6C;MAC3C,IAAIZ,gBAAgB,KAAKJ,OAAO,CAACgB,OAAjC,EAA0C;QACxC,IAAMC,cAAc,GAAGZ,iBAAiB,EAAxC;;QACA,IAAIY,cAAJ,EAAoB;UAClB,OAAOT,qBAAqB,CAACO,OAAD,EAAUE,cAAV,CAA5B;QACD;MACF;;MACD,MAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;IACD;;IACD,OAAOV,qBAAqB,CAACO,OAAD,EAAUH,OAAV,CAA5B;EACD,CAZ4B,EAa7B,CAACD,OAAD,EAAUC,OAAV,CAb6B,CAA/B,CAJsG,CAoBtG;;EACA,OAAOV,WAAW;IAAA,sEAChB,iBAAOiB,OAAP;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAwBC,YAAxB,2DAAuC,IAAvC;cACQC,SADR,GACoBpB,MAAM,EAD1B;cAEEmB,YAAY,IAAIP,QAAQ,CAACP,cAAc,CAACgB,OAAf,CAAuB;gBAAED,SAAS,EAATA,SAAF;gBAAaE,GAAG,EAAEJ;cAAlB,CAAvB,CAAD,CAAxB,CAFF,CAGE;;cAHF,iCAISZ,cAAc,CAACY,OAAD,EAAUL,WAAV,CAAd,CACJU,IADI,CACC,UAAAC,SAAS,EAAI;gBACjBL,YAAY,IAAIP,QAAQ,CAACP,cAAc,CAACoB,SAAf,CAAyB;kBAAEH,GAAG,EAAEJ,OAAP;kBAAgBM,SAAS,EAATA,SAAhB;kBAA2BJ,SAAS,EAATA;gBAA3B,CAAzB,CAAD,CAAxB;gBACA,OAAOI,SAAP;cACD,CAJI,EAKJE,KALI,CAKE,UAAAC,KAAK,EAAI;gBACdC,OAAO,CAACC,KAAR,qCAA2CX,OAA3C,GAAsDS,KAAtD;gBACAR,YAAY,IAAIP,QAAQ,CAACP,cAAc,CAACyB,QAAf,CAAwB;kBAAER,GAAG,EAAEJ,OAAP;kBAAgBE,SAAS,EAATA,SAAhB;kBAA2BW,YAAY,EAAEJ,KAAK,CAACK;gBAA/C,CAAxB,CAAD,CAAxB;gBACA,MAAML,KAAN;cACD,CATI,CAJT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CADgB;;IAAA;MAAA;IAAA;EAAA,KAgBhB,CAACf,QAAD,EAAWC,WAAX,CAhBgB,CAAlB;AAkBD;;GAvCeJ,oB;UACeD,kB,EACZN,W"},"metadata":{},"sourceType":"module"}