{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport Web3ProviderEngine from 'web3-provider-engine';\nimport { ledgerEthereumBrowserClientFactoryAsync } from '@0x/subproviders/lib/src';\nimport { LedgerSubprovider } from '@0x/subproviders/lib/src/subproviders/ledger';\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js';\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar LedgerConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(LedgerConnector, _AbstractConnector);\n\n  function LedgerConnector(_ref) {\n    var _this;\n\n    var chainId = _ref.chainId,\n        url = _ref.url,\n        pollingInterval = _ref.pollingInterval,\n        requestTimeoutMs = _ref.requestTimeoutMs,\n        accountFetchingConfigs = _ref.accountFetchingConfigs,\n        baseDerivationPath = _ref.baseDerivationPath;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [chainId]\n    }) || this;\n    _this.chainId = chainId;\n    _this.url = url;\n    _this.pollingInterval = pollingInterval;\n    _this.requestTimeoutMs = requestTimeoutMs;\n    _this.accountFetchingConfigs = accountFetchingConfigs;\n    _this.baseDerivationPath = baseDerivationPath;\n    return _this;\n  }\n\n  var _proto = LedgerConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _this3 = this;\n\n      if (!_this3.provider) {\n        var engine = new Web3ProviderEngine({\n          pollingInterval: _this3.pollingInterval\n        });\n        engine.addProvider(new LedgerSubprovider({\n          networkId: _this3.chainId,\n          ledgerEthereumClientFactoryAsync: ledgerEthereumBrowserClientFactoryAsync,\n          accountFetchingConfigs: _this3.accountFetchingConfigs,\n          baseDerivationPath: _this3.baseDerivationPath\n        }));\n        engine.addProvider(new CacheSubprovider());\n        engine.addProvider(new RPCSubprovider(_this3.url, _this3.requestTimeoutMs));\n        _this3.provider = engine;\n      }\n\n      _this3.provider.start();\n\n      return Promise.resolve({\n        provider: _this3.provider,\n        chainId: _this3.chainId\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n\n      return Promise.resolve(_this9.provider._providers[0].getAccountsAsync(1).then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    this.provider.stop();\n  };\n\n  return LedgerConnector;\n}(AbstractConnector);\n\nexport { LedgerConnector };","map":null,"metadata":{},"sourceType":"module"}