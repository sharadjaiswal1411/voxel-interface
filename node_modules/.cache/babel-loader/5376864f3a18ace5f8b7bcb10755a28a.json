{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _u2fApi = require(\"u2f-api\");\n\nvar _hwTransport = require(\"@ledgerhq/hw-transport\");\n\nvar _hwTransport2 = _interopRequireDefault(_hwTransport);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction wrapU2FTransportError(originalError, message, id) {\n  var err = new _hwTransport.TransportError(message, id); // $FlowFixMe\n\n  err.originalError = originalError;\n  return err;\n}\n\nfunction wrapApdu(apdu, key) {\n  var result = Buffer.alloc(apdu.length);\n\n  for (var i = 0; i < apdu.length; i++) {\n    result[i] = apdu[i] ^ key[i % key.length];\n  }\n\n  return result;\n} // Convert from normal to web-safe, strip trailing \"=\"s\n\n\nvar webSafe64 = function webSafe64(base64) {\n  return base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}; // Convert from web-safe to normal, add trailing \"=\"s\n\n\nvar normal64 = function normal64(base64) {\n  return base64.replace(/-/g, \"+\").replace(/_/g, \"/\") + \"==\".substring(0, 3 * base64.length % 4);\n};\n\nfunction attemptExchange(apdu, timeoutMillis, debug, scrambleKey) {\n  var keyHandle = wrapApdu(apdu, scrambleKey);\n  var challenge = Buffer.from(\"0000000000000000000000000000000000000000000000000000000000000000\", \"hex\");\n  var signRequest = {\n    version: \"U2F_V2\",\n    keyHandle: webSafe64(keyHandle.toString(\"base64\")),\n    challenge: webSafe64(challenge.toString(\"base64\")),\n    appId: location.origin\n  };\n\n  if (debug) {\n    debug(\"=> \" + apdu.toString(\"hex\"));\n  }\n\n  return (0, _u2fApi.sign)(signRequest, timeoutMillis / 1000).then(function (response) {\n    var signatureData = response.signatureData;\n\n    if (typeof signatureData === \"string\") {\n      var data = Buffer.from(normal64(signatureData), \"base64\");\n      var result = data.slice(5);\n\n      if (debug) {\n        debug(\"<= \" + result.toString(\"hex\"));\n      }\n\n      return result;\n    } else {\n      throw response;\n    }\n  });\n}\n\nvar transportInstances = [];\n\nfunction emitDisconnect() {\n  transportInstances.forEach(function (t) {\n    return t.emit(\"disconnect\");\n  });\n  transportInstances = [];\n}\n\nfunction isTimeoutU2FError(u2fError) {\n  return u2fError.metaData.code === 5;\n}\n/**\n * U2F web Transport implementation\n * @example\n * import TransportU2F from \"@ledgerhq/hw-transport-u2f\";\n * ...\n * TransportU2F.create().then(transport => ...)\n */\n\n\nvar TransportU2F = function (_Transport) {\n  (0, _inherits3.default)(TransportU2F, _Transport);\n  (0, _createClass3.default)(TransportU2F, null, [{\n    key: \"open\",\n\n    /**\n     * static function to create a new Transport from a connected Ledger device discoverable via U2F (browser support)\n     */\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_) {\n        var _openTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;\n\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", new TransportU2F());\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function open(_x) {\n        return _ref.apply(this, arguments);\n      }\n\n      return open;\n    }() // this transport is not discoverable but we are going to guess if it is here with isSupported()\n\n  }]);\n\n  function TransportU2F() {\n    (0, _classCallCheck3.default)(this, TransportU2F);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (TransportU2F.__proto__ || (0, _getPrototypeOf2.default)(TransportU2F)).call(this));\n\n    transportInstances.push(_this);\n    return _this;\n  }\n\n  (0, _createClass3.default)(TransportU2F, [{\n    key: \"exchange\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(apdu) {\n        var isU2FError;\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return attemptExchange(apdu, this.exchangeTimeout, this.debug, this.scrambleKey);\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](0);\n                isU2FError = (0, _typeof3.default)(_context2.t0.metaData) === \"object\";\n\n                if (!isU2FError) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                if (isTimeoutU2FError(_context2.t0)) {\n                  emitDisconnect();\n                } // the wrapping make error more usable and \"printable\" to the end user.\n\n\n                throw wrapU2FTransportError(_context2.t0, \"Failed to sign with Ledger device: U2F \" + _context2.t0.metaData.type, \"U2F_\" + _context2.t0.metaData.code);\n\n              case 14:\n                throw _context2.t0;\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 6]]);\n      }));\n\n      function exchange(_x3) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return exchange;\n    }()\n  }, {\n    key: \"setScrambleKey\",\n    value: function setScrambleKey(scrambleKey) {\n      this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var i = transportInstances.indexOf(this);\n\n      if (i === -1) {\n        throw new Error(\"invalid transport instance\");\n      }\n\n      transportInstances.splice(i, 1);\n      return _promise2.default.resolve();\n    }\n  }]);\n  return TransportU2F;\n}(_hwTransport2.default);\n\nTransportU2F.isSupported = _u2fApi.isSupported;\n\nTransportU2F.list = function () {\n  return (0, _u2fApi.isSupported)().then(function (supported) {\n    return supported ? [null] : [];\n  });\n};\n\nTransportU2F.listen = function (observer) {\n  var unsubscribed = false;\n  (0, _u2fApi.isSupported)().then(function (supported) {\n    if (unsubscribed) return;\n\n    if (supported) {\n      observer.next({\n        type: \"add\",\n        descriptor: null\n      });\n      observer.complete();\n    } else {\n      observer.error(new _hwTransport.TransportError(\"U2F browser support is needed for Ledger. \" + \"Please use Chrome, Opera or Firefox with a U2F extension. \" + \"Also make sure you're on an HTTPS connection\", \"U2FNotSupported\"));\n    }\n  });\n  return {\n    unsubscribe: function unsubscribe() {\n      unsubscribed = true;\n    }\n  };\n};\n\nexports.default = TransportU2F;","map":null,"metadata":{},"sourceType":"script"}