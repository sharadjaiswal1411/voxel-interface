{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { addMulticallListeners, errorFetchingMulticallResults, fetchingMulticallResults, removeMulticallListeners, toCallKey, updateMulticallResults } from './actions';\nvar initialState = {\n  callResults: {}\n};\nexport default createReducer(initialState, function (builder) {\n  return builder.addCase(addMulticallListeners, function (state, _ref) {\n    var _listeners$chainId;\n\n    var _ref$payload = _ref.payload,\n        calls = _ref$payload.calls,\n        chainId = _ref$payload.chainId,\n        _ref$payload$options = _ref$payload.options;\n    _ref$payload$options = _ref$payload$options === void 0 ? {} : _ref$payload$options;\n    var _ref$payload$options$ = _ref$payload$options.blocksPerFetch,\n        blocksPerFetch = _ref$payload$options$ === void 0 ? 1 : _ref$payload$options$;\n    var listeners = state.callListeners ? state.callListeners : state.callListeners = {};\n    listeners[chainId] = (_listeners$chainId = listeners[chainId]) !== null && _listeners$chainId !== void 0 ? _listeners$chainId : {};\n    calls.forEach(function (call) {\n      var _listeners$chainId$ca, _listeners$chainId$ca2;\n\n      var callKey = toCallKey(call);\n      listeners[chainId][callKey] = (_listeners$chainId$ca = listeners[chainId][callKey]) !== null && _listeners$chainId$ca !== void 0 ? _listeners$chainId$ca : {};\n      listeners[chainId][callKey][blocksPerFetch] = ((_listeners$chainId$ca2 = listeners[chainId][callKey][blocksPerFetch]) !== null && _listeners$chainId$ca2 !== void 0 ? _listeners$chainId$ca2 : 0) + 1;\n    });\n  }).addCase(removeMulticallListeners, function (state, _ref2) {\n    var _ref2$payload = _ref2.payload,\n        chainId = _ref2$payload.chainId,\n        calls = _ref2$payload.calls,\n        _ref2$payload$options = _ref2$payload.options;\n    _ref2$payload$options = _ref2$payload$options === void 0 ? {} : _ref2$payload$options;\n    var _ref2$payload$options2 = _ref2$payload$options.blocksPerFetch,\n        blocksPerFetch = _ref2$payload$options2 === void 0 ? 1 : _ref2$payload$options2;\n    var listeners = state.callListeners ? state.callListeners : state.callListeners = {};\n    if (!listeners[chainId]) return;\n    calls.forEach(function (call) {\n      var callKey = toCallKey(call);\n      if (!listeners[chainId][callKey]) return;\n      if (!listeners[chainId][callKey][blocksPerFetch]) return;\n\n      if (listeners[chainId][callKey][blocksPerFetch] === 1) {\n        delete listeners[chainId][callKey][blocksPerFetch];\n      } else {\n        listeners[chainId][callKey][blocksPerFetch]--;\n      }\n    });\n  }).addCase(fetchingMulticallResults, function (state, _ref3) {\n    var _state$callResults$ch;\n\n    var _ref3$payload = _ref3.payload,\n        chainId = _ref3$payload.chainId,\n        fetchingBlockNumber = _ref3$payload.fetchingBlockNumber,\n        calls = _ref3$payload.calls;\n    state.callResults[chainId] = (_state$callResults$ch = state.callResults[chainId]) !== null && _state$callResults$ch !== void 0 ? _state$callResults$ch : {};\n    calls.forEach(function (call) {\n      var callKey = toCallKey(call);\n      var current = state.callResults[chainId][callKey];\n\n      if (!current) {\n        state.callResults[chainId][callKey] = {\n          fetchingBlockNumber: fetchingBlockNumber\n        };\n      } else {\n        var _current$fetchingBloc;\n\n        if (((_current$fetchingBloc = current.fetchingBlockNumber) !== null && _current$fetchingBloc !== void 0 ? _current$fetchingBloc : 0) >= fetchingBlockNumber) return;\n        state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber;\n      }\n    });\n  }).addCase(errorFetchingMulticallResults, function (state, _ref4) {\n    var _state$callResults$ch2;\n\n    var _ref4$payload = _ref4.payload,\n        fetchingBlockNumber = _ref4$payload.fetchingBlockNumber,\n        chainId = _ref4$payload.chainId,\n        calls = _ref4$payload.calls;\n    state.callResults[chainId] = (_state$callResults$ch2 = state.callResults[chainId]) !== null && _state$callResults$ch2 !== void 0 ? _state$callResults$ch2 : {};\n    calls.forEach(function (call) {\n      var callKey = toCallKey(call);\n      var current = state.callResults[chainId][callKey];\n      if (!current) return; // only should be dispatched if we are already fetching\n\n      if (current.fetchingBlockNumber === fetchingBlockNumber) {\n        delete current.fetchingBlockNumber;\n        current.data = null;\n        current.blockNumber = fetchingBlockNumber;\n      }\n    });\n  }).addCase(updateMulticallResults, function (state, _ref5) {\n    var _state$callResults$ch3;\n\n    var _ref5$payload = _ref5.payload,\n        chainId = _ref5$payload.chainId,\n        results = _ref5$payload.results,\n        blockNumber = _ref5$payload.blockNumber;\n    state.callResults[chainId] = (_state$callResults$ch3 = state.callResults[chainId]) !== null && _state$callResults$ch3 !== void 0 ? _state$callResults$ch3 : {};\n    Object.keys(results).forEach(function (callKey) {\n      var _current$blockNumber;\n\n      var current = state.callResults[chainId][callKey];\n      if (((_current$blockNumber = current === null || current === void 0 ? void 0 : current.blockNumber) !== null && _current$blockNumber !== void 0 ? _current$blockNumber : 0) > blockNumber) return;\n      state.callResults[chainId][callKey] = {\n        data: results[callKey],\n        blockNumber: blockNumber\n      };\n    });\n  });\n});","map":{"version":3,"names":["createReducer","addMulticallListeners","errorFetchingMulticallResults","fetchingMulticallResults","removeMulticallListeners","toCallKey","updateMulticallResults","initialState","callResults","builder","addCase","state","payload","calls","chainId","options","blocksPerFetch","listeners","callListeners","forEach","call","callKey","fetchingBlockNumber","current","data","blockNumber","results","Object","keys"],"sources":["/Applications/XAMPP/voxel-interface/src/state/multicall/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\n\nimport {\n  addMulticallListeners,\n  errorFetchingMulticallResults,\n  fetchingMulticallResults,\n  removeMulticallListeners,\n  toCallKey,\n  updateMulticallResults,\n} from './actions'\n\nexport interface MulticallState {\n  callListeners?: {\n    // on a per-chain basis\n    [chainId: number]: {\n      // stores for each call key the listeners' preferences\n      [callKey: string]: {\n        // stores how many listeners there are per each blocks per fetch preference\n        [blocksPerFetch: number]: number\n      }\n    }\n  }\n\n  callResults: {\n    [chainId: number]: {\n      [callKey: string]: {\n        data?: string | null\n        blockNumber?: number\n        fetchingBlockNumber?: number\n      }\n    }\n  }\n}\n\nconst initialState: MulticallState = {\n  callResults: {},\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(addMulticallListeners, (state, { payload: { calls, chainId, options: { blocksPerFetch = 1 } = {} } }) => {\n      const listeners: MulticallState['callListeners'] = state.callListeners\n        ? state.callListeners\n        : (state.callListeners = {})\n      listeners[chainId] = listeners[chainId] ?? {}\n      calls.forEach(call => {\n        const callKey = toCallKey(call)\n        listeners[chainId][callKey] = listeners[chainId][callKey] ?? {}\n        listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1\n      })\n    })\n    .addCase(\n      removeMulticallListeners,\n      (state, { payload: { chainId, calls, options: { blocksPerFetch = 1 } = {} } }) => {\n        const listeners: MulticallState['callListeners'] = state.callListeners\n          ? state.callListeners\n          : (state.callListeners = {})\n\n        if (!listeners[chainId]) return\n        calls.forEach(call => {\n          const callKey = toCallKey(call)\n          if (!listeners[chainId][callKey]) return\n          if (!listeners[chainId][callKey][blocksPerFetch]) return\n\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\n            delete listeners[chainId][callKey][blocksPerFetch]\n          } else {\n            listeners[chainId][callKey][blocksPerFetch]--\n          }\n        })\n      },\n    )\n    .addCase(fetchingMulticallResults, (state, { payload: { chainId, fetchingBlockNumber, calls } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      calls.forEach(call => {\n        const callKey = toCallKey(call)\n        const current = state.callResults[chainId][callKey]\n        if (!current) {\n          state.callResults[chainId][callKey] = {\n            fetchingBlockNumber,\n          }\n        } else {\n          if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return\n          state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber\n        }\n      })\n    })\n    .addCase(errorFetchingMulticallResults, (state, { payload: { fetchingBlockNumber, chainId, calls } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      calls.forEach(call => {\n        const callKey = toCallKey(call)\n        const current = state.callResults[chainId][callKey]\n        if (!current) return // only should be dispatched if we are already fetching\n        if (current.fetchingBlockNumber === fetchingBlockNumber) {\n          delete current.fetchingBlockNumber\n          current.data = null\n          current.blockNumber = fetchingBlockNumber\n        }\n      })\n    })\n    .addCase(updateMulticallResults, (state, { payload: { chainId, results, blockNumber } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      Object.keys(results).forEach(callKey => {\n        const current = state.callResults[chainId][callKey]\n        if ((current?.blockNumber ?? 0) > blockNumber) return\n        state.callResults[chainId][callKey] = {\n          data: results[callKey],\n          blockNumber,\n        }\n      })\n    }),\n)\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AAEA,SACEC,qBADF,EAEEC,6BAFF,EAGEC,wBAHF,EAIEC,wBAJF,EAKEC,SALF,EAMEC,sBANF,QAOO,WAPP;AAgCA,IAAMC,YAA4B,GAAG;EACnCC,WAAW,EAAE;AADsB,CAArC;AAIA,eAAeR,aAAa,CAACO,YAAD,EAAe,UAAAE,OAAO;EAAA,OAChDA,OAAO,CACJC,OADH,CACWT,qBADX,EACkC,UAACU,KAAD,QAAkF;IAAA;;IAAA,wBAAxEC,OAAwE;IAAA,IAA7DC,KAA6D,gBAA7DA,KAA6D;IAAA,IAAtDC,OAAsD,gBAAtDA,OAAsD;IAAA,wCAA7CC,OAA6C;IAAA,yDAAX,EAAW;IAAA,iDAAlCC,cAAkC;IAAA,IAAlCA,cAAkC,sCAAjB,CAAiB;IAChH,IAAMC,SAA0C,GAAGN,KAAK,CAACO,aAAN,GAC/CP,KAAK,CAACO,aADyC,GAE9CP,KAAK,CAACO,aAAN,GAAsB,EAF3B;IAGAD,SAAS,CAACH,OAAD,CAAT,yBAAqBG,SAAS,CAACH,OAAD,CAA9B,mEAA2C,EAA3C;IACAD,KAAK,CAACM,OAAN,CAAc,UAAAC,IAAI,EAAI;MAAA;;MACpB,IAAMC,OAAO,GAAGhB,SAAS,CAACe,IAAD,CAAzB;MACAH,SAAS,CAACH,OAAD,CAAT,CAAmBO,OAAnB,6BAA8BJ,SAAS,CAACH,OAAD,CAAT,CAAmBO,OAAnB,CAA9B,yEAA6D,EAA7D;MACAJ,SAAS,CAACH,OAAD,CAAT,CAAmBO,OAAnB,EAA4BL,cAA5B,IAA8C,2BAACC,SAAS,CAACH,OAAD,CAAT,CAAmBO,OAAnB,EAA4BL,cAA5B,CAAD,2EAAgD,CAAhD,IAAqD,CAAnG;IACD,CAJD;EAKD,CAXH,EAYGN,OAZH,CAaIN,wBAbJ,EAcI,UAACO,KAAD,SAAkF;IAAA,0BAAxEC,OAAwE;IAAA,IAA7DE,OAA6D,iBAA7DA,OAA6D;IAAA,IAApDD,KAAoD,iBAApDA,KAAoD;IAAA,0CAA7CE,OAA6C;IAAA,2DAAX,EAAW;IAAA,mDAAlCC,cAAkC;IAAA,IAAlCA,cAAkC,uCAAjB,CAAiB;IAChF,IAAMC,SAA0C,GAAGN,KAAK,CAACO,aAAN,GAC/CP,KAAK,CAACO,aADyC,GAE9CP,KAAK,CAACO,aAAN,GAAsB,EAF3B;IAIA,IAAI,CAACD,SAAS,CAACH,OAAD,CAAd,EAAyB;IACzBD,KAAK,CAACM,OAAN,CAAc,UAAAC,IAAI,EAAI;MACpB,IAAMC,OAAO,GAAGhB,SAAS,CAACe,IAAD,CAAzB;MACA,IAAI,CAACH,SAAS,CAACH,OAAD,CAAT,CAAmBO,OAAnB,CAAL,EAAkC;MAClC,IAAI,CAACJ,SAAS,CAACH,OAAD,CAAT,CAAmBO,OAAnB,EAA4BL,cAA5B,CAAL,EAAkD;;MAElD,IAAIC,SAAS,CAACH,OAAD,CAAT,CAAmBO,OAAnB,EAA4BL,cAA5B,MAAgD,CAApD,EAAuD;QACrD,OAAOC,SAAS,CAACH,OAAD,CAAT,CAAmBO,OAAnB,EAA4BL,cAA5B,CAAP;MACD,CAFD,MAEO;QACLC,SAAS,CAACH,OAAD,CAAT,CAAmBO,OAAnB,EAA4BL,cAA5B;MACD;IACF,CAVD;EAWD,CA/BL,EAiCGN,OAjCH,CAiCWP,wBAjCX,EAiCqC,UAACQ,KAAD,SAAiE;IAAA;;IAAA,0BAAvDC,OAAuD;IAAA,IAA5CE,OAA4C,iBAA5CA,OAA4C;IAAA,IAAnCQ,mBAAmC,iBAAnCA,mBAAmC;IAAA,IAAdT,KAAc,iBAAdA,KAAc;IAClGF,KAAK,CAACH,WAAN,CAAkBM,OAAlB,6BAA6BH,KAAK,CAACH,WAAN,CAAkBM,OAAlB,CAA7B,yEAA2D,EAA3D;IACAD,KAAK,CAACM,OAAN,CAAc,UAAAC,IAAI,EAAI;MACpB,IAAMC,OAAO,GAAGhB,SAAS,CAACe,IAAD,CAAzB;MACA,IAAMG,OAAO,GAAGZ,KAAK,CAACH,WAAN,CAAkBM,OAAlB,EAA2BO,OAA3B,CAAhB;;MACA,IAAI,CAACE,OAAL,EAAc;QACZZ,KAAK,CAACH,WAAN,CAAkBM,OAAlB,EAA2BO,OAA3B,IAAsC;UACpCC,mBAAmB,EAAnBA;QADoC,CAAtC;MAGD,CAJD,MAIO;QAAA;;QACL,IAAI,0BAACC,OAAO,CAACD,mBAAT,yEAAgC,CAAhC,KAAsCA,mBAA1C,EAA+D;QAC/DX,KAAK,CAACH,WAAN,CAAkBM,OAAlB,EAA2BO,OAA3B,EAAoCC,mBAApC,GAA0DA,mBAA1D;MACD;IACF,CAXD;EAYD,CA/CH,EAgDGZ,OAhDH,CAgDWR,6BAhDX,EAgD0C,UAACS,KAAD,SAAiE;IAAA;;IAAA,0BAAvDC,OAAuD;IAAA,IAA5CU,mBAA4C,iBAA5CA,mBAA4C;IAAA,IAAvBR,OAAuB,iBAAvBA,OAAuB;IAAA,IAAdD,KAAc,iBAAdA,KAAc;IACvGF,KAAK,CAACH,WAAN,CAAkBM,OAAlB,8BAA6BH,KAAK,CAACH,WAAN,CAAkBM,OAAlB,CAA7B,2EAA2D,EAA3D;IACAD,KAAK,CAACM,OAAN,CAAc,UAAAC,IAAI,EAAI;MACpB,IAAMC,OAAO,GAAGhB,SAAS,CAACe,IAAD,CAAzB;MACA,IAAMG,OAAO,GAAGZ,KAAK,CAACH,WAAN,CAAkBM,OAAlB,EAA2BO,OAA3B,CAAhB;MACA,IAAI,CAACE,OAAL,EAAc,OAHM,CAGC;;MACrB,IAAIA,OAAO,CAACD,mBAAR,KAAgCA,mBAApC,EAAyD;QACvD,OAAOC,OAAO,CAACD,mBAAf;QACAC,OAAO,CAACC,IAAR,GAAe,IAAf;QACAD,OAAO,CAACE,WAAR,GAAsBH,mBAAtB;MACD;IACF,CATD;EAUD,CA5DH,EA6DGZ,OA7DH,CA6DWJ,sBA7DX,EA6DmC,UAACK,KAAD,SAA2D;IAAA;;IAAA,0BAAjDC,OAAiD;IAAA,IAAtCE,OAAsC,iBAAtCA,OAAsC;IAAA,IAA7BY,OAA6B,iBAA7BA,OAA6B;IAAA,IAApBD,WAAoB,iBAApBA,WAAoB;IAC1Fd,KAAK,CAACH,WAAN,CAAkBM,OAAlB,8BAA6BH,KAAK,CAACH,WAAN,CAAkBM,OAAlB,CAA7B,2EAA2D,EAA3D;IACAa,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBP,OAArB,CAA6B,UAAAE,OAAO,EAAI;MAAA;;MACtC,IAAME,OAAO,GAAGZ,KAAK,CAACH,WAAN,CAAkBM,OAAlB,EAA2BO,OAA3B,CAAhB;MACA,IAAI,yBAACE,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEE,WAAV,uEAAyB,CAAzB,IAA8BA,WAAlC,EAA+C;MAC/Cd,KAAK,CAACH,WAAN,CAAkBM,OAAlB,EAA2BO,OAA3B,IAAsC;QACpCG,IAAI,EAAEE,OAAO,CAACL,OAAD,CADuB;QAEpCI,WAAW,EAAXA;MAFoC,CAAtC;IAID,CAPD;EAQD,CAvEH,CADgD;AAAA,CAAtB,CAA5B"},"metadata":{},"sourceType":"module"}