{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPlainObject = exports.clone = exports.recursive = exports.merge = exports.main = void 0;\nmodule.exports = exports = main;\nexports.default = main;\n\nfunction main() {\n  var items = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    items[_i] = arguments[_i];\n  }\n\n  return merge.apply(void 0, items);\n}\n\nexports.main = main;\nmain.clone = clone;\nmain.isPlainObject = isPlainObject;\nmain.recursive = recursive;\n\nfunction merge() {\n  var items = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    items[_i] = arguments[_i];\n  }\n\n  return _merge(items[0] === true, false, items);\n}\n\nexports.merge = merge;\n\nfunction recursive() {\n  var items = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    items[_i] = arguments[_i];\n  }\n\n  return _merge(items[0] === true, true, items);\n}\n\nexports.recursive = recursive;\n\nfunction clone(input) {\n  if (Array.isArray(input)) {\n    var output = [];\n\n    for (var index = 0; index < input.length; ++index) {\n      output.push(clone(input[index]));\n    }\n\n    return output;\n  } else if (isPlainObject(input)) {\n    var output = {};\n\n    for (var index in input) {\n      output[index] = clone(input[index]);\n    }\n\n    return output;\n  } else {\n    return input;\n  }\n}\n\nexports.clone = clone;\n\nfunction isPlainObject(input) {\n  return input && typeof input === 'object' && !Array.isArray(input);\n}\n\nexports.isPlainObject = isPlainObject;\n\nfunction _recursiveMerge(base, extend) {\n  if (!isPlainObject(base)) return extend;\n\n  for (var key in extend) {\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') continue;\n    base[key] = isPlainObject(base[key]) && isPlainObject(extend[key]) ? _recursiveMerge(base[key], extend[key]) : extend[key];\n  }\n\n  return base;\n}\n\nfunction _merge(isClone, isRecursive, items) {\n  var result;\n  if (isClone || !isPlainObject(result = items.shift())) result = {};\n\n  for (var index = 0; index < items.length; ++index) {\n    var item = items[index];\n    if (!isPlainObject(item)) continue;\n\n    for (var key in item) {\n      if (key === '__proto__' || key === 'constructor' || key === 'prototype') continue;\n      var value = isClone ? clone(item[key]) : item[key];\n      result[key] = isRecursive ? _recursiveMerge(result[key], value) : value;\n    }\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}