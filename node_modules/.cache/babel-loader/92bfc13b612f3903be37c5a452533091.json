{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TryExtensionLinkDialog = void 0;\n\nvar clsx_1 = __importDefault(require(\"clsx\"));\n\nvar preact_1 = require(\"preact\");\n\nvar hooks_1 = require(\"preact/hooks\");\n\nvar util_1 = require(\"../util\");\n\nvar version_1 = require(\"../version\");\n\nvar globe_icon_svg_1 = __importDefault(require(\"./icons/globe-icon-svg\"));\n\nvar link_icon_svg_1 = __importDefault(require(\"./icons/link-icon-svg\"));\n\nvar lock_icon_svg_1 = __importDefault(require(\"./icons/lock-icon-svg\"));\n\nvar QRLogo_1 = __importDefault(require(\"./icons/QRLogo\"));\n\nvar QRCode_1 = require(\"./QRCode\");\n\nvar Spinner_1 = require(\"./Spinner\");\n\nvar TryExtensionLinkDialog_css_1 = __importDefault(require(\"./TryExtensionLinkDialog-css\"));\n\nvar TryExtensionLinkDialog = function TryExtensionLinkDialog(props) {\n  var isOpen = props.isOpen,\n      darkMode = props.darkMode;\n\n  var _ref = (0, hooks_1.useState)(!isOpen),\n      _ref2 = _slicedToArray(_ref, 2),\n      isContainerHidden = _ref2[0],\n      setContainerHidden = _ref2[1];\n\n  var _ref3 = (0, hooks_1.useState)(!isOpen),\n      _ref4 = _slicedToArray(_ref3, 2),\n      isDialogHidden = _ref4[0],\n      setDialogHidden = _ref4[1];\n\n  (0, hooks_1.useEffect)(function () {\n    var timers = [window.setTimeout(function () {\n      setDialogHidden(!isOpen);\n    }, 10)];\n\n    if (isOpen) {\n      setContainerHidden(false);\n    } else {\n      timers.push(window.setTimeout(function () {\n        setContainerHidden(true);\n      }, 360));\n    }\n\n    return function () {\n      timers.forEach(window.clearTimeout);\n    };\n  }, [props.isOpen]);\n  var theme = darkMode ? \"dark\" : \"light\";\n  return (0, preact_1.h)(\"div\", {\n    class: (0, clsx_1.default)(\"-cbwsdk-extension-dialog-container\", isContainerHidden && \"-cbwsdk-extension-dialog-container-hidden\")\n  }, (0, preact_1.h)(\"style\", null, TryExtensionLinkDialog_css_1.default), (0, preact_1.h)(\"div\", {\n    class: (0, clsx_1.default)(\"-cbwsdk-extension-dialog-backdrop\", theme, isDialogHidden && \"-cbwsdk-extension-dialog-backdrop-hidden\")\n  }), (0, preact_1.h)(\"div\", {\n    class: \"-cbwsdk-extension-dialog\"\n  }, (0, preact_1.h)(\"div\", {\n    class: (0, clsx_1.default)(\"-cbwsdk-extension-dialog-box\", isDialogHidden && \"-cbwsdk-extension-dialog-box-hidden\")\n  }, (0, preact_1.h)(TryExtensionBox, {\n    darkMode: darkMode,\n    onInstallClick: function onInstallClick() {\n      window.open(\"https://api.wallet.coinbase.com/rpc/v2/desktop/chrome\", \"_blank\");\n    }\n  }), !props.connectDisabled ? (0, preact_1.h)(ScanQRBox, {\n    darkMode: darkMode,\n    version: props.version,\n    sessionId: props.sessionId,\n    sessionSecret: props.sessionSecret,\n    linkAPIUrl: props.linkAPIUrl,\n    isConnected: props.isConnected,\n    isParentConnection: props.isParentConnection\n  }) : null, props.onCancel && (0, preact_1.h)(CancelButton, {\n    darkMode: darkMode,\n    onClick: props.onCancel\n  }))));\n};\n\nexports.TryExtensionLinkDialog = TryExtensionLinkDialog;\n\nvar TryExtensionBox = function TryExtensionBox(_ref5) {\n  var darkMode = _ref5.darkMode,\n      onInstallClick = _ref5.onInstallClick;\n\n  var _ref6 = (0, hooks_1.useState)(false),\n      _ref7 = _slicedToArray(_ref6, 2),\n      isClicked = _ref7[0],\n      setIsClicked = _ref7[1];\n\n  var clickHandler = (0, hooks_1.useCallback)(function () {\n    if (isClicked) {\n      window.location.reload();\n    } else {\n      onInstallClick();\n      setIsClicked(true);\n    }\n  }, [onInstallClick, isClicked]);\n  var theme = darkMode ? \"dark\" : \"light\";\n  return (0, preact_1.h)(\"div\", {\n    class: (0, clsx_1.default)(\"-cbwsdk-extension-dialog-box-top\", theme)\n  }, (0, preact_1.h)(\"div\", {\n    class: \"-cbwsdk-extension-dialog-box-top-install-region\"\n  }, (0, preact_1.h)(\"h2\", {\n    class: theme\n  }, \"Try the Coinbase Wallet extension\"), isClicked && (0, preact_1.h)(\"div\", {\n    class: \"-cbwsdk-extension-dialog-box-top-subtext\"\n  }, \"After installing Coinbase Wallet, refresh the page and connect again.\"), (0, preact_1.h)(\"button\", {\n    type: \"button\",\n    onClick: clickHandler\n  }, isClicked ? \"Refresh\" : \"Install\")), (0, preact_1.h)(\"div\", {\n    class: (0, clsx_1.default)(\"-cbwsdk-extension-dialog-box-top-info-region\", theme)\n  }, (0, preact_1.h)(DescriptionItem, {\n    darkMode: darkMode,\n    icon: link_icon_svg_1.default,\n    text: \"Connect to crypto apps with one click\"\n  }), (0, preact_1.h)(DescriptionItem, {\n    darkMode: darkMode,\n    icon: lock_icon_svg_1.default,\n    text: \"Your private key is stored securely\"\n  }), (0, preact_1.h)(DescriptionItem, {\n    darkMode: darkMode,\n    icon: globe_icon_svg_1.default,\n    text: \"Works with Ethereum, Polygon, and more\"\n  })));\n};\n\nvar ScanQRBox = function ScanQRBox(props) {\n  var qrUrl = (0, util_1.createQrUrl)(props.sessionId, props.sessionSecret, props.linkAPIUrl, props.isParentConnection);\n  var theme = props.darkMode ? \"dark\" : \"light\";\n  return (0, preact_1.h)(\"div\", {\n    \"data-testid\": \"scan-qr-box\",\n    class: (0, clsx_1.default)(\"-cbwsdk-extension-dialog-box-bottom\", theme)\n  }, (0, preact_1.h)(\"div\", {\n    class: \"-cbwsdk-extension-dialog-box-bottom-description-region\"\n  }, (0, preact_1.h)(\"h2\", {\n    class: theme\n  }, \"Or scan to connect\"), (0, preact_1.h)(\"body\", {\n    class: (0, clsx_1.default)(\"-cbwsdk-extension-dialog-box-bottom-description\", theme)\n  }, \"Open\", \" \", (0, preact_1.h)(\"a\", {\n    href: \"https://wallet.coinbase.com/\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"Coinbase Wallet\"), \" \", \"on your mobile phone and scan\")), (0, preact_1.h)(\"div\", {\n    class: \"-cbwsdk-extension-dialog-box-bottom-qr-region\"\n  }, (0, preact_1.h)(\"div\", {\n    class: \"-cbwsdk-extension-dialog-box-bottom-qr-wrapper\"\n  }, (0, preact_1.h)(QRCode_1.QRCode, {\n    content: qrUrl,\n    width: 150,\n    height: 150,\n    fgColor: \"#000\",\n    bgColor: \"transparent\",\n    image: {\n      svg: QRLogo_1.default,\n      width: 34,\n      height: 34\n    }\n  })), (0, preact_1.h)(\"input\", {\n    type: \"hidden\",\n    name: \"cbwsdk-version\",\n    value: version_1.LIB_VERSION\n  }), (0, preact_1.h)(\"input\", {\n    type: \"hidden\",\n    value: qrUrl\n  }), !props.isConnected && (0, preact_1.h)(\"div\", {\n    \"data-testid\": \"connecting-spinner\",\n    class: (0, clsx_1.default)(\"-cbwsdk-extension-dialog-box-bottom-qr-connecting\", theme)\n  }, (0, preact_1.h)(Spinner_1.Spinner, {\n    size: 36,\n    color: props.darkMode ? \"#FFF\" : \"#000\"\n  }), (0, preact_1.h)(\"p\", null, \"Connecting...\"))));\n};\n\nvar DescriptionItem = function DescriptionItem(props) {\n  var theme = props.darkMode ? \"dark\" : \"light\";\n  return (0, preact_1.h)(\"div\", {\n    class: \"-cbwsdk-extension-dialog-box-top-description\"\n  }, (0, preact_1.h)(\"div\", {\n    class: \"-cbwsdk-extension-dialog-box-top-description-icon-wrapper\"\n  }, (0, preact_1.h)(\"img\", {\n    src: props.icon\n  })), (0, preact_1.h)(\"body\", {\n    class: (0, clsx_1.default)(\"-cbwsdk-extension-dialog-box-top-description-text\", theme)\n  }, props.text));\n};\n\nvar CancelButton = function CancelButton(props) {\n  var theme = props.darkMode ? \"dark\" : \"light\";\n  return (0, preact_1.h)(\"button\", {\n    type: \"button\",\n    class: (0, clsx_1.default)(\"-cbwsdk-extension-dialog-box-cancel\", theme),\n    onClick: props.onClick\n  }, (0, preact_1.h)(\"div\", {\n    class: (0, clsx_1.default)(\"-cbwsdk-extension-dialog-box-cancel-x\", theme)\n  }));\n};","map":null,"metadata":{},"sourceType":"script"}