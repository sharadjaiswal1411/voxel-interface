{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _chainIdMapping,\n    _s = $RefreshSig$();\n\nimport { ChainId } from '@kyberswap/ks-sdk-core';\nimport useSWR from 'swr';\nimport { KS_SETTING_API } from 'constants/env';\nimport { NETWORKS_INFO } from 'constants/networks'; // It's recommended to use NETWORKS_INFO[chainId].route,\n// but very unfortunately that BE uses `bsc` instead of `bnb`\n\nvar chainIdMapping = (_chainIdMapping = {}, _defineProperty(_chainIdMapping, ChainId.BSCMAINNET, 'bsc'), _defineProperty(_chainIdMapping, ChainId.BTTC, 'bttc'), _chainIdMapping);\n\nvar useLiquiditySources = function useLiquiditySources(chainId) {\n  _s();\n\n  var chainString = chainId ? chainIdMapping[chainId] || NETWORKS_INFO[chainId].route : '';\n  return useSWR(\"\".concat(KS_SETTING_API, \"/v1/dexes?chain=ethereum&isEnabled=true&pageSize=100\"), /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n      var _err, response, data, _err2, err;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!chainId || !chainString)) {\n                _context.next = 4;\n                break;\n              }\n\n              _err = \"chain (\".concat(chainId, \") is not supported\");\n              console.error(_err);\n              throw _err;\n\n            case 4:\n              _context.next = 6;\n              return fetch(url);\n\n            case 6:\n              response = _context.sent;\n\n              if (!response.ok) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 10;\n              return response.json();\n\n            case 10:\n              data = _context.sent;\n\n              if (!(data && data.data.dexes)) {\n                _context.next = 13;\n                break;\n              }\n\n              return _context.abrupt(\"return\", data.data.dexes);\n\n            case 13:\n              _err2 = \"no pools found on \".concat(chainString);\n              console.error(_err2);\n              throw _err2;\n\n            case 16:\n              err = \"fetching stats on \".concat(chainString, \" failed\");\n              console.error(err);\n              throw err;\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\n\n_s(useLiquiditySources, \"7xERTuQa/rCStZtEZdi0LgBAmUk=\", false, function () {\n  return [useSWR];\n});\n\nexport default useLiquiditySources;","map":{"version":3,"names":["ChainId","useSWR","KS_SETTING_API","NETWORKS_INFO","chainIdMapping","BSCMAINNET","BTTC","useLiquiditySources","chainId","chainString","route","url","err","console","error","fetch","response","ok","json","data","dexes"],"sources":["/Applications/XAMPP/voxel-interface/src/hooks/useAggregatorStats.ts"],"sourcesContent":["import { ChainId } from '@kyberswap/ks-sdk-core'\nimport useSWR from 'swr'\n\nimport { KS_SETTING_API } from 'constants/env'\nimport { NETWORKS_INFO } from 'constants/networks'\n\n// It's recommended to use NETWORKS_INFO[chainId].route,\n// but very unfortunately that BE uses `bsc` instead of `bnb`\nconst chainIdMapping: Partial<Record<ChainId, string>> = {\n  [ChainId.BSCMAINNET]: 'bsc',\n  [ChainId.BTTC]: 'bttc',\n}\n\nconst useLiquiditySources = (chainId?: ChainId) => {\n  const chainString = chainId ? chainIdMapping[chainId] || NETWORKS_INFO[chainId].route : ''\n\n  return useSWR<{ name: string; logoURL: string; dexId: string }[]>(\n    `${KS_SETTING_API}/v1/dexes?chain=ethereum&isEnabled=true&pageSize=100`,\n    async (url: string) => {\n      if (!chainId || !chainString) {\n        const err = `chain (${chainId}) is not supported`\n        console.error(err)\n        throw err\n      }\n\n      const response = await fetch(url)\n      if (response.ok) {\n        const data = await response.json()\n        if (data && data.data.dexes) {\n          return data.data.dexes\n        }\n\n        const err = `no pools found on ${chainString}`\n        console.error(err)\n        throw err\n      }\n\n      const err = `fetching stats on ${chainString} failed`\n      console.error(err)\n      throw err\n    },\n  )\n}\n\nexport default useLiquiditySources\n"],"mappings":";;;;;;;AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AAEA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,aAAT,QAA8B,oBAA9B,C,CAEA;AACA;;AACA,IAAMC,cAAgD,2DACnDJ,OAAO,CAACK,UAD2C,EAC9B,KAD8B,oCAEnDL,OAAO,CAACM,IAF2C,EAEpC,MAFoC,mBAAtD;;AAKA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,OAAD,EAAuB;EAAA;;EACjD,IAAMC,WAAW,GAAGD,OAAO,GAAGJ,cAAc,CAACI,OAAD,CAAd,IAA2BL,aAAa,CAACK,OAAD,CAAb,CAAuBE,KAArD,GAA6D,EAAxF;EAEA,OAAOT,MAAM,WACRC,cADQ;IAAA,sEAEX,iBAAOS,GAAP;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA,MACM,CAACH,OAAD,IAAY,CAACC,WADnB;gBAAA;gBAAA;cAAA;;cAEUG,IAFV,oBAE0BJ,OAF1B;cAGIK,OAAO,CAACC,KAAR,CAAcF,IAAd;cAHJ,MAIUA,IAJV;;YAAA;cAAA;cAAA,OAOyBG,KAAK,CAACJ,GAAD,CAP9B;;YAAA;cAOQK,QAPR;;cAAA,KAQMA,QAAQ,CAACC,EARf;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OASuBD,QAAQ,CAACE,IAAT,EATvB;;YAAA;cASUC,IATV;;cAAA,MAUQA,IAAI,IAAIA,IAAI,CAACA,IAAL,CAAUC,KAV1B;gBAAA;gBAAA;cAAA;;cAAA,iCAWaD,IAAI,CAACA,IAAL,CAAUC,KAXvB;;YAAA;cAcUR,KAdV,+BAcqCH,WAdrC;cAeII,OAAO,CAACC,KAAR,CAAcF,KAAd;cAfJ,MAgBUA,KAhBV;;YAAA;cAmBQA,GAnBR,+BAmBmCH,WAnBnC;cAoBEI,OAAO,CAACC,KAAR,CAAcF,GAAd;cApBF,MAqBQA,GArBR;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAFW;;IAAA;MAAA;IAAA;EAAA,IAAb;AA0BD,CA7BD;;GAAML,mB;UAGGN,M;;;AA4BT,eAAeM,mBAAf"},"metadata":{},"sourceType":"module"}