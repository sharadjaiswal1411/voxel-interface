{"ast":null,"code":"import _classCallCheck from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { loadModule, logger, fill, isThenable } from '@sentry/utils';\n/** Tracing integration for Apollo */\n\nvar Apollo = /*#__PURE__*/function () {\n  function Apollo() {\n    _classCallCheck(this, Apollo);\n\n    Apollo.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(Apollo, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Apollo.id;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      var pkg = loadModule('apollo-server-core');\n\n      if (!pkg) {\n        logger.error('Apollo Integration was unable to require apollo-server-core package.');\n        return;\n      }\n      /**\n       * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n       */\n\n\n      fill(pkg.ApolloServerBase.prototype, 'constructSchema', function (orig) {\n        return function () {\n          var resolvers = Array.isArray(this.config.resolvers) ? this.config.resolvers : [this.config.resolvers];\n          this.config.resolvers = resolvers.map(function (model) {\n            Object.keys(model).forEach(function (resolverGroupName) {\n              Object.keys(model[resolverGroupName]).forEach(function (resolverName) {\n                if (typeof model[resolverGroupName][resolverName] !== 'function') {\n                  return;\n                }\n\n                wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n              });\n            });\n            return model;\n          });\n          return orig.call(this);\n        };\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'Apollo';\n    }\n  }]);\n\n  return Apollo;\n}();\n\nApollo.__initStatic();\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\n\n\nfunction wrapResolver(model, resolverGroupName, resolverName, getCurrentHub) {\n  fill(model[resolverGroupName], resolverName, function (orig) {\n    return function () {\n      var scope = getCurrentHub().getScope();\n\n      var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n        return _2.getSpan;\n      }, 'call', function (_3) {\n        return _3();\n      }]);\n\n      var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n        return _4.startChild;\n      }, 'call', function (_5) {\n        return _5({\n          description: \"\".concat(resolverGroupName, \".\").concat(resolverName),\n          op: 'db.graphql.apollo'\n        });\n      }]);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var rv = orig.call.apply(orig, [this].concat(args));\n\n      if (isThenable(rv)) {\n        return rv.then(function (res) {\n          _optionalChain([span, 'optionalAccess', function (_6) {\n            return _6.finish;\n          }, 'call', function (_7) {\n            return _7();\n          }]);\n\n          return res;\n        });\n      }\n\n      _optionalChain([span, 'optionalAccess', function (_8) {\n        return _8.finish;\n      }, 'call', function (_9) {\n        return _9();\n      }]);\n\n      return rv;\n    };\n  });\n}\n\nexport { Apollo };","map":null,"metadata":{},"sourceType":"module"}