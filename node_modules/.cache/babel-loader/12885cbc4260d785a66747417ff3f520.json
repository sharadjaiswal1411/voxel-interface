{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar jsonschema_1 = require(\"jsonschema\");\n\nvar values = require(\"lodash.values\");\n\nvar schemas_1 = require(\"./schemas\");\n/**\n * A validator for [JSON-schemas](http://json-schema.org/)\n */\n\n\nvar SchemaValidator =\n/** @class */\nfunction () {\n  /**\n   * Instantiates a SchemaValidator instance\n   */\n  function SchemaValidator() {\n    var e_1, _a;\n\n    this._validator = new jsonschema_1.Validator();\n\n    try {\n      for (var _b = __values(values(schemas_1.schemas)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var schema = _c.value;\n\n        SchemaValidator._assertSchemaDefined(schema);\n\n        this._validator.addSchema(schema, schema.id);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  }\n\n  SchemaValidator._assertSchemaDefined = function (schema) {\n    if (schema === undefined) {\n      throw new Error(\"Cannot add undefined schema\");\n    }\n  };\n  /**\n   * Add a schema to the validator. All schemas and sub-schemas must be added to\n   * the validator before the `validate` and `isValid` methods can be called with\n   * instances of that schema.\n   * @param schema The schema to add\n   */\n\n\n  SchemaValidator.prototype.addSchema = function (schema) {\n    SchemaValidator._assertSchemaDefined(schema);\n\n    this._validator.addSchema(schema, schema.id);\n  }; // In order to validate a complex JS object using jsonschema, we must replace any complex\n  // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other\n  // complex types implement the `toString` method, we can stringify the object and\n  // then parse it. The resultant object can then be checked using jsonschema.\n\n  /**\n   * Validate the JS object conforms to a specific JSON schema\n   * @param instance JS object in question\n   * @param schema Schema to check against\n   * @returns The results of the validation\n   */\n\n\n  SchemaValidator.prototype.validate = function (instance, schema) {\n    SchemaValidator._assertSchemaDefined(schema);\n\n    var jsonSchemaCompatibleObject = JSON.parse(JSON.stringify(instance));\n    return this._validator.validate(jsonSchemaCompatibleObject, schema);\n  };\n  /**\n   * Check whether an instance properly adheres to a JSON schema\n   * @param instance JS object in question\n   * @param schema Schema to check against\n   * @returns Whether or not the instance adheres to the schema\n   */\n\n\n  SchemaValidator.prototype.isValid = function (instance, schema) {\n    var isValid = this.validate(instance, schema).errors.length === 0;\n    return isValid;\n  };\n\n  return SchemaValidator;\n}();\n\nexports.SchemaValidator = SchemaValidator;","map":null,"metadata":{},"sourceType":"script"}