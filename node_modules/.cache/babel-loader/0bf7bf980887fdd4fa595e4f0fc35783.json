{"ast":null,"code":"import _createForOfIteratorHelper from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { max, tau } from \"./math.js\";\n\nfunction range(i, j) {\n  return Array.from({\n    length: j - i\n  }, function (_, k) {\n    return i + k;\n  });\n}\n\nfunction compareValue(compare) {\n  return function (a, b) {\n    return compare(a.source.value + a.target.value, b.source.value + b.target.value);\n  };\n}\n\nexport default function () {\n  return chord(false, false);\n}\nexport function chordTranspose() {\n  return chord(false, true);\n}\nexport function chordDirected() {\n  return chord(true, false);\n}\n\nfunction chord(directed, transpose) {\n  var padAngle = 0,\n      sortGroups = null,\n      sortSubgroups = null,\n      sortChords = null;\n\n  function chord(matrix) {\n    var n = matrix.length,\n        groupSums = new Array(n),\n        groupIndex = range(0, n),\n        chords = new Array(n * n),\n        groups = new Array(n),\n        k = 0,\n        dx;\n    matrix = Float64Array.from({\n      length: n * n\n    }, transpose ? function (_, i) {\n      return matrix[i % n][i / n | 0];\n    } : function (_, i) {\n      return matrix[i / n | 0][i % n];\n    }); // Compute the scaling factor from value to angle in [0, 2pi].\n\n    for (var i = 0; i < n; ++i) {\n      var x = 0;\n\n      for (var j = 0; j < n; ++j) {\n        x += matrix[i * n + j] + directed * matrix[j * n + i];\n      }\n\n      k += groupSums[i] = x;\n    }\n\n    k = max(0, tau - padAngle * n) / k;\n    dx = k ? padAngle : tau / n; // Compute the angles for each group and constituent chord.\n\n    {\n      var _x = 0;\n      if (sortGroups) groupIndex.sort(function (a, b) {\n        return sortGroups(groupSums[a], groupSums[b]);\n      });\n\n      var _iterator = _createForOfIteratorHelper(groupIndex),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var i = _step.value;\n          var x0 = _x;\n\n          if (directed) {\n            var subgroupIndex = range(~n + 1, n).filter(function (j) {\n              return j < 0 ? matrix[~j * n + i] : matrix[i * n + j];\n            });\n            if (sortSubgroups) subgroupIndex.sort(function (a, b) {\n              return sortSubgroups(a < 0 ? -matrix[~a * n + i] : matrix[i * n + a], b < 0 ? -matrix[~b * n + i] : matrix[i * n + b]);\n            });\n\n            var _iterator2 = _createForOfIteratorHelper(subgroupIndex),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _j = _step2.value;\n\n                if (_j < 0) {\n                  var _chord = chords[~_j * n + i] || (chords[~_j * n + i] = {\n                    source: null,\n                    target: null\n                  });\n\n                  _chord.target = {\n                    index: i,\n                    startAngle: _x,\n                    endAngle: _x += matrix[~_j * n + i] * k,\n                    value: matrix[~_j * n + i]\n                  };\n                } else {\n                  var _chord2 = chords[i * n + _j] || (chords[i * n + _j] = {\n                    source: null,\n                    target: null\n                  });\n\n                  _chord2.source = {\n                    index: i,\n                    startAngle: _x,\n                    endAngle: _x += matrix[i * n + _j] * k,\n                    value: matrix[i * n + _j]\n                  };\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            groups[i] = {\n              index: i,\n              startAngle: x0,\n              endAngle: _x,\n              value: groupSums[i]\n            };\n          } else {\n            var _subgroupIndex = range(0, n).filter(function (j) {\n              return matrix[i * n + j] || matrix[j * n + i];\n            });\n\n            if (sortSubgroups) _subgroupIndex.sort(function (a, b) {\n              return sortSubgroups(matrix[i * n + a], matrix[i * n + b]);\n            });\n\n            var _iterator3 = _createForOfIteratorHelper(_subgroupIndex),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _j2 = _step3.value;\n\n                var _chord3 = void 0;\n\n                if (i < _j2) {\n                  _chord3 = chords[i * n + _j2] || (chords[i * n + _j2] = {\n                    source: null,\n                    target: null\n                  });\n                  _chord3.source = {\n                    index: i,\n                    startAngle: _x,\n                    endAngle: _x += matrix[i * n + _j2] * k,\n                    value: matrix[i * n + _j2]\n                  };\n                } else {\n                  _chord3 = chords[_j2 * n + i] || (chords[_j2 * n + i] = {\n                    source: null,\n                    target: null\n                  });\n                  _chord3.target = {\n                    index: i,\n                    startAngle: _x,\n                    endAngle: _x += matrix[i * n + _j2] * k,\n                    value: matrix[i * n + _j2]\n                  };\n                  if (i === _j2) _chord3.source = _chord3.target;\n                }\n\n                if (_chord3.source && _chord3.target && _chord3.source.value < _chord3.target.value) {\n                  var source = _chord3.source;\n                  _chord3.source = _chord3.target;\n                  _chord3.target = source;\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            groups[i] = {\n              index: i,\n              startAngle: x0,\n              endAngle: _x,\n              value: groupSums[i]\n            };\n          }\n\n          _x += dx;\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    } // Remove empty chords.\n\n    chords = Object.values(chords);\n    chords.groups = groups;\n    return sortChords ? chords.sort(sortChords) : chords;\n  }\n\n  chord.padAngle = function (_) {\n    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;\n  };\n\n  chord.sortGroups = function (_) {\n    return arguments.length ? (sortGroups = _, chord) : sortGroups;\n  };\n\n  chord.sortSubgroups = function (_) {\n    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n  };\n\n  chord.sortChords = function (_) {\n    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n  };\n\n  return chord;\n}","map":null,"metadata":{},"sourceType":"module"}