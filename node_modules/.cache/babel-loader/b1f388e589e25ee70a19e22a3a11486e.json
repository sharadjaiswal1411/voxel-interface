{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereum_types_1 = require(\"ethereum-types\");\n\nvar ethers = require(\"ethers\");\n\nvar _ = require(\"lodash\");\n\nvar _1 = require(\".\");\n\nvar address_utils_1 = require(\"./address_utils\");\n\nvar configured_bignumber_1 = require(\"./configured_bignumber\");\n/**\n * AbiDecoder allows you to decode event logs given a set of supplied contract ABI's. It takes the contract's event\n * signature from the ABI and attempts to decode the logs using it.\n */\n\n\nvar AbiDecoder =\n/** @class */\nfunction () {\n  /**\n   * Instantiate an AbiDecoder\n   * @param abiArrays An array of contract ABI's\n   * @return AbiDecoder instance\n   */\n  function AbiDecoder(abiArrays) {\n    var _this = this;\n\n    this._eventIds = {};\n    this._selectorToFunctionInfo = {};\n\n    _.each(abiArrays, function (abi) {\n      _this.addABI(abi);\n    });\n  }\n  /**\n   * Retrieves the function selector from calldata.\n   * @param calldata hex-encoded calldata.\n   * @return hex-encoded function selector.\n   */\n\n\n  AbiDecoder._getFunctionSelector = function (calldata) {\n    var functionSelectorLength = 10;\n\n    if (!calldata.startsWith('0x') || calldata.length < functionSelectorLength) {\n      throw new Error(\"Malformed calldata. Must include a hex prefix '0x' and 4-byte function selector. Got '\" + calldata + \"'\");\n    }\n\n    var functionSelector = calldata.substr(0, functionSelectorLength);\n    return functionSelector;\n  };\n  /**\n   * Attempt to decode a log given the ABI's the AbiDecoder knows about.\n   * @param log The log to attempt to decode\n   * @return The decoded log if the requisite ABI was available. Otherwise the log unaltered.\n   */\n\n\n  AbiDecoder.prototype.tryToDecodeLogOrNoop = function (log) {\n    var eventId = log.topics[0];\n    var numIndexedArgs = log.topics.length - 1;\n\n    if (this._eventIds[eventId] === undefined || this._eventIds[eventId][numIndexedArgs] === undefined) {\n      return log;\n    }\n\n    var event = this._eventIds[eventId][numIndexedArgs];\n    var ethersInterface = new ethers.utils.Interface([event]);\n    var decodedParams = {};\n    var topicsIndex = 1;\n    var decodedData;\n\n    try {\n      decodedData = ethersInterface.events[event.name].decode(log.data);\n    } catch (error) {\n      if (error.code === ethers.errors.INVALID_ARGUMENT) {\n        // Because we index events by Method ID, and Method IDs are derived from the method\n        // name and the input parameters, it's possible that the return value of the event\n        // does not match our ABI. If that's the case, then ethers will throw an error\n        // when we try to parse the event. We handle that case here by returning the log rather\n        // than throwing an error.\n        return log;\n      }\n\n      throw error;\n    }\n\n    var didFailToDecode = false;\n\n    _.forEach(event.inputs, function (param, i) {\n      // Indexed parameters are stored in topics. Non-indexed ones in decodedData\n      var value = param.indexed ? log.topics[topicsIndex++] : decodedData[i];\n\n      if (value === undefined) {\n        didFailToDecode = true;\n        return;\n      }\n\n      if (param.type === ethereum_types_1.SolidityTypes.Address) {\n        var baseHex = 16;\n        value = address_utils_1.addressUtils.padZeros(new configured_bignumber_1.BigNumber(value.toLowerCase()).toString(baseHex));\n      } else if (param.type === ethereum_types_1.SolidityTypes.Uint256 || param.type === ethereum_types_1.SolidityTypes.Uint) {\n        value = new configured_bignumber_1.BigNumber(value);\n      } else if (param.type === ethereum_types_1.SolidityTypes.Uint8) {\n        value = new configured_bignumber_1.BigNumber(value).toNumber();\n      }\n\n      decodedParams[param.name] = value;\n    });\n\n    if (didFailToDecode) {\n      return log;\n    } else {\n      return __assign({}, log, {\n        event: event.name,\n        args: decodedParams\n      });\n    }\n  };\n  /**\n   * Decodes calldata for a known ABI.\n   * @param calldata hex-encoded calldata.\n   * @param contractName used to disambiguate similar ABI's (optional).\n   * @return Decoded calldata. Includes: function name and signature, along with the decoded arguments.\n   */\n\n\n  AbiDecoder.prototype.decodeCalldataOrThrow = function (calldata, contractName) {\n    var functionSelector = AbiDecoder._getFunctionSelector(calldata);\n\n    var candidateFunctionInfos = this._selectorToFunctionInfo[functionSelector];\n\n    if (candidateFunctionInfos === undefined) {\n      throw new Error(\"No functions registered for selector '\" + functionSelector + \"'\");\n    }\n\n    var functionInfo = _.find(candidateFunctionInfos, function (candidateFunctionInfo) {\n      return contractName === undefined || _.toLower(contractName) === _.toLower(candidateFunctionInfo.contractName);\n    });\n\n    if (functionInfo === undefined) {\n      throw new Error(\"No function registered with selector \" + functionSelector + \" and contract name \" + contractName + \".\");\n    } else if (functionInfo.abiEncoder === undefined) {\n      throw new Error(\"Function ABI Encoder is not defined, for function registered with selector \" + functionSelector + \" and contract name \" + contractName + \".\");\n    }\n\n    var functionName = functionInfo.abiEncoder.getDataItem().name;\n    var functionSignature = functionInfo.abiEncoder.getSignatureType();\n    var functionArguments = functionInfo.abiEncoder.decode(calldata);\n    var decodedCalldata = {\n      functionName: functionName,\n      functionSignature: functionSignature,\n      functionArguments: functionArguments\n    };\n    return decodedCalldata;\n  };\n  /**\n   * Adds a set of ABI definitions, after which calldata and logs targeting these ABI's can be decoded.\n   * Additional properties can be included to disambiguate similar ABI's. For example, if two functions\n   * have the same signature but different parameter names, then their ABI definitions can be disambiguated\n   * by specifying a contract name.\n   * @param abiDefinitions ABI definitions for a given contract.\n   * @param contractName Name of contract that encapsulates the ABI definitions (optional).\n   *                     This can be used when decoding calldata to disambiguate methods with\n   *                     the same signature but different parameter names.\n   */\n\n\n  AbiDecoder.prototype.addABI = function (abiArray, contractName) {\n    var _this = this;\n\n    if (abiArray === undefined) {\n      return;\n    }\n\n    var ethersInterface = new ethers.utils.Interface(abiArray);\n\n    _.map(abiArray, function (abi) {\n      switch (abi.type) {\n        case ethereum_types_1.AbiType.Event:\n          // tslint:disable-next-line:no-unnecessary-type-assertion\n          _this._addEventABI(abi, ethersInterface);\n\n          break;\n\n        case ethereum_types_1.AbiType.Function:\n          // tslint:disable-next-line:no-unnecessary-type-assertion\n          _this._addMethodABI(abi, contractName);\n\n          break;\n\n        default:\n          // ignore other types\n          break;\n      }\n    });\n  };\n\n  AbiDecoder.prototype._addEventABI = function (eventAbi, ethersInterface) {\n    var _a;\n\n    var topic = ethersInterface.events[eventAbi.name].topic;\n\n    var numIndexedArgs = _.reduce(eventAbi.inputs, function (sum, input) {\n      return input.indexed ? sum + 1 : sum;\n    }, 0);\n\n    this._eventIds[topic] = __assign({}, this._eventIds[topic], (_a = {}, _a[numIndexedArgs] = eventAbi, _a));\n  };\n\n  AbiDecoder.prototype._addMethodABI = function (methodAbi, contractName) {\n    var abiEncoder = new _1.AbiEncoder.Method(methodAbi);\n    var functionSelector = abiEncoder.getSelector();\n\n    if (!(functionSelector in this._selectorToFunctionInfo)) {\n      this._selectorToFunctionInfo[functionSelector] = [];\n    } // Recored a copy of this ABI for each deployment\n\n\n    var functionSignature = abiEncoder.getSignature();\n\n    this._selectorToFunctionInfo[functionSelector].push({\n      functionSignature: functionSignature,\n      abiEncoder: abiEncoder,\n      contractName: contractName\n    });\n  };\n\n  return AbiDecoder;\n}();\n\nexports.AbiDecoder = AbiDecoder;","map":null,"metadata":{},"sourceType":"script"}