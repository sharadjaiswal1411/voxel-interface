{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\nvar global = getGlobalObject();\n/** HttpContext integration collects information about HTTP request headers */\n\nvar HttpContext = /*#__PURE__*/function () {\n  function HttpContext() {\n    _classCallCheck(this, HttpContext);\n\n    HttpContext.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(HttpContext, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = HttpContext.id;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      addGlobalEventProcessor(function (event) {\n        if (getCurrentHub().getIntegration(HttpContext)) {\n          // if none of the information we want exists, don't bother\n          if (!global.navigator && !global.location && !global.document) {\n            return event;\n          } // grab as much info as exists and add it to the event\n\n\n          var url = event.request && event.request.url || global.location && global.location.href;\n\n          var _ref = global.document || {},\n              referrer = _ref.referrer;\n\n          var _ref2 = global.navigator || {},\n              userAgent = _ref2.userAgent;\n\n          var headers = _objectSpread(_objectSpread(_objectSpread({}, event.request && event.request.headers), referrer && {\n            Referer: referrer\n          }), userAgent && {\n            'User-Agent': userAgent\n          });\n\n          var request = _objectSpread(_objectSpread({}, url && {\n            url: url\n          }), {}, {\n            headers: headers\n          });\n\n          return _objectSpread(_objectSpread({}, event), {}, {\n            request: request\n          });\n        }\n\n        return event;\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'HttpContext';\n    }\n  }]);\n\n  return HttpContext;\n}();\n\nHttpContext.__initStatic();\n\nexport { HttpContext };","map":null,"metadata":{},"sourceType":"module"}