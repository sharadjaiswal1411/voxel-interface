{"ast":null,"code":"import _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { parse } from 'messageformat-parser';\n\nvar isString = function isString(s) {\n  return typeof s === \"string\";\n};\n\nvar isFunction = function isFunction(f) {\n  return typeof f === \"function\";\n};\n/** Memoized cache */\n\n\nvar numberFormats = new Map();\nvar dateFormats = new Map();\n\nfunction date(locales) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var memoize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return function (value) {\n    if (isString(value)) value = new Date(value);\n\n    if (memoize) {\n      var key = cacheKey(locales, format);\n      var cachedFormatter = dateFormats.get(key);\n\n      if (cachedFormatter) {\n        return cachedFormatter.format(value);\n      }\n\n      var _formatter = new Intl.DateTimeFormat(locales, format);\n\n      dateFormats.set(key, _formatter);\n      return _formatter.format(value);\n    }\n\n    var formatter = new Intl.DateTimeFormat(locales, format);\n    return formatter.format(value);\n  };\n}\n\nfunction number(locales) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var memoize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return function (value) {\n    if (memoize) {\n      var key = cacheKey(locales, format);\n      var cachedFormatter = numberFormats.get(key);\n\n      if (cachedFormatter) {\n        return cachedFormatter.format(value);\n      }\n\n      var _formatter2 = new Intl.NumberFormat(locales, format);\n\n      numberFormats.set(key, _formatter2);\n      return _formatter2.format(value);\n    }\n\n    var formatter = new Intl.NumberFormat(locales, format);\n    return formatter.format(value);\n  };\n}\n/** Memoize helpers */\n\n\nfunction cacheKey(locales) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var localeKey = Array.isArray(locales) ? locales.sort().join('-') : locales;\n  return \"\".concat(localeKey, \"-\").concat(JSON.stringify(options));\n}\n\nvar formats = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  date: date,\n  number: number\n});\nvar UNICODE_REGEX = /\\\\u[a-fA-F0-9]{4}|\\\\x[a-fA-F0-9]{2}/g;\n\nvar defaultFormats = function defaultFormats(locale, locales) {\n  var localeData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    plurals: undefined\n  };\n  var formats = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  locales = locales || locale;\n  var plurals = localeData.plurals;\n\n  var style = function style(format) {\n    return isString(format) ? formats[format] || {\n      style: format\n    } : format;\n  };\n\n  var replaceOctothorpe = function replaceOctothorpe(value, message) {\n    return function (ctx) {\n      var msg = isFunction(message) ? message(ctx) : message;\n      var norm = Array.isArray(msg) ? msg : [msg];\n      var valueStr = number(locales)(value);\n      return norm.map(function (m) {\n        return isString(m) ? m.replace(\"#\", valueStr) : m;\n      });\n    };\n  };\n\n  if (!plurals) {\n    console.error(\"Plurals for locale \".concat(locale, \" aren't loaded. Use i18n.loadLocaleData method to load plurals for specific locale. Using other plural rule as a fallback.\"));\n  }\n\n  return {\n    plural: function plural(value, _ref) {\n      var _ref$offset = _ref.offset,\n          offset = _ref$offset === void 0 ? 0 : _ref$offset,\n          rules = _objectWithoutProperties(_ref, [\"offset\"]);\n\n      var message = rules[value] || rules[plurals === null || plurals === void 0 ? void 0 : plurals(value - offset)] || rules.other;\n      return replaceOctothorpe(value - offset, message);\n    },\n    selectordinal: function selectordinal(value, _ref2) {\n      var _ref2$offset = _ref2.offset,\n          offset = _ref2$offset === void 0 ? 0 : _ref2$offset,\n          rules = _objectWithoutProperties(_ref2, [\"offset\"]);\n\n      var message = rules[value] || rules[plurals === null || plurals === void 0 ? void 0 : plurals(value - offset, true)] || rules.other;\n      return replaceOctothorpe(value - offset, message);\n    },\n    select: function select(value, rules) {\n      return rules[value] || rules.other;\n    },\n    number: function number$1(value, format) {\n      return number(locales, style(format))(value);\n    },\n    date: function date$1(value, format) {\n      return date(locales, style(format))(value);\n    },\n    undefined: function undefined$1(value) {\n      return value;\n    }\n  };\n}; // Params -> CTX\n\n/**\r\n * Creates a context object, which formats ICU MessageFormat arguments based on\r\n * argument type.\r\n *\r\n * @param locale     - Locale of message\r\n * @param locales      - Locales to be used when formatting the numbers or dates\r\n * @param values       - Parameters for variable interpolation\r\n * @param localeData - Locale data (e.g: plurals)\r\n * @param formats - Custom format styles\r\n * @returns {function(string, string, any)}\r\n */\n\n\nfunction context(_ref3) {\n  var locale = _ref3.locale,\n      locales = _ref3.locales,\n      values = _ref3.values,\n      formats = _ref3.formats,\n      localeData = _ref3.localeData;\n  var formatters = defaultFormats(locale, locales, localeData, formats);\n\n  var ctx = function ctx(name, type, format) {\n    var value = values[name];\n    var formatted = formatters[type](value, format);\n    var message = isFunction(formatted) ? formatted(ctx) : formatted;\n    return Array.isArray(message) ? message.join(\"\") : message;\n  };\n\n  return ctx;\n}\n\nfunction interpolate(translation, locale, locales, localeData) {\n  return function (values) {\n    var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var ctx = context({\n      locale: locale,\n      locales: locales,\n      localeData: localeData,\n      formats: formats,\n      values: values\n    });\n\n    var formatMessage = function formatMessage(message) {\n      if (!Array.isArray(message)) return message;\n      return message.reduce(function (message, token) {\n        if (isString(token)) return message + token;\n\n        var _token = _slicedToArray(token, 3),\n            name = _token[0],\n            type = _token[1],\n            format = _token[2];\n\n        var interpolatedFormat = {};\n\n        if (format != null && !isString(format)) {\n          Object.keys(format).forEach(function (key) {\n            interpolatedFormat[key] = formatMessage(format[key]);\n          });\n        } else {\n          interpolatedFormat = format;\n        }\n\n        var value = ctx(name, type, interpolatedFormat);\n        if (value == null) return message;\n        return message + value;\n      }, \"\");\n    };\n\n    var result = formatMessage(translation);\n    if (isString(result) && UNICODE_REGEX.test(result)) return JSON.parse(\"\\\"\".concat(result.trim(), \"\\\"\"));\n    if (isString(result)) return result.trim();\n    return result;\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction processTokens(tokens) {\n  if (!tokens.filter(function (token) {\n    return !isString(token);\n  }).length) {\n    return tokens.join(\"\");\n  }\n\n  return tokens.map(function (token) {\n    if (isString(token)) {\n      return token; // # in plural case\n    } else if (token.type === \"octothorpe\") {\n      return \"#\"; // simple argument\n    } else if (token.type === \"argument\") {\n      return [token.arg]; // argument with custom format (date, number)\n    } else if (token.type === \"function\") {\n      var _param = token.param && token.param.tokens[0];\n\n      var param = typeof _param === \"string\" ? _param.trim() : _param;\n      return [token.arg, token.key, param].filter(Boolean);\n    }\n\n    var offset = token.offset ? parseInt(token.offset) : undefined; // complex argument with cases\n\n    var formatProps = {};\n    token.cases.forEach(function (item) {\n      formatProps[item.key] = processTokens(item.tokens);\n    });\n    return [token.arg, token.type, _objectSpread({\n      offset: offset\n    }, formatProps)];\n  });\n} // Message -> (Params -> String)\n\n\nfunction compile(message) {\n  try {\n    return processTokens(parse(message));\n  } catch (e) {\n    console.error(\"Message cannot be parsed due to syntax errors: \".concat(message));\n    return message;\n  }\n}\n\nvar EventEmitter = /*#__PURE__*/function () {\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n\n    this._events = {};\n  }\n\n  _createClass(EventEmitter, [{\n    key: \"on\",\n    value: function on(event, listener) {\n      var _this = this;\n\n      if (!this._hasEvent(event)) this._events[event] = [];\n\n      this._events[event].push(listener);\n\n      return function () {\n        return _this.removeListener(event, listener);\n      };\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(event, listener) {\n      if (!this._hasEvent(event)) return;\n\n      var index = this._events[event].indexOf(listener);\n\n      if (~index) this._events[event].splice(index, 1);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var _this2 = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (!this._hasEvent(event)) return;\n\n      this._events[event].map(function (listener) {\n        return listener.apply(_this2, args);\n      });\n    }\n  }, {\n    key: \"_hasEvent\",\n    value: function _hasEvent(event) {\n      return Array.isArray(this._events[event]);\n    }\n  }]);\n\n  return EventEmitter;\n}();\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar I18n = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(I18n, _EventEmitter);\n\n  var _super = _createSuper(I18n);\n\n  function I18n(params) {\n    var _this;\n\n    _classCallCheck(this, I18n);\n\n    _this = _super.call(this);\n    _this._messages = {};\n    _this._localeData = {};\n    if (params.missing != null) _this._missing = params.missing;\n    if (params.messages != null) _this.load(params.messages);\n    if (params.localeData != null) _this.loadLocaleData(params.localeData);\n\n    if (params.locale != null || params.locales != null) {\n      _this.activate(params.locale, params.locales);\n    }\n\n    return _this;\n  }\n\n  _createClass(I18n, [{\n    key: \"_loadLocaleData\",\n    value: function _loadLocaleData(locale, localeData) {\n      if (this._localeData[locale] == null) {\n        this._localeData[locale] = localeData;\n      } else {\n        Object.assign(this._localeData[locale], localeData);\n      }\n    }\n  }, {\n    key: \"loadLocaleData\",\n    value: function loadLocaleData(localeOrAllData, localeData) {\n      var _this2 = this;\n\n      if (localeData != null) {\n        // loadLocaleData('en', enLocaleData)\n        // Loading locale data for a single locale.\n        this._loadLocaleData(localeOrAllData, localeData);\n      } else {\n        // loadLocaleData(allLocaleData)\n        // Loading all locale data at once.\n        Object.keys(localeOrAllData).forEach(function (locale) {\n          return _this2._loadLocaleData(locale, localeOrAllData[locale]);\n        });\n      }\n\n      this.emit(\"change\");\n    }\n  }, {\n    key: \"_load\",\n    value: function _load(locale, messages) {\n      if (this._messages[locale] == null) {\n        this._messages[locale] = messages;\n      } else {\n        Object.assign(this._messages[locale], messages);\n      }\n    }\n  }, {\n    key: \"load\",\n    value: function load(localeOrMessages, messages) {\n      var _this3 = this;\n\n      if (messages != null) {\n        // load('en', catalog)\n        // Loading a catalog for a single locale.\n        this._load(localeOrMessages, messages);\n      } else {\n        // load(catalogs)\n        // Loading several locales at once.\n        Object.keys(localeOrMessages).forEach(function (locale) {\n          return _this3._load(locale, localeOrMessages[locale]);\n        });\n      }\n\n      this.emit(\"change\");\n    }\n  }, {\n    key: \"activate\",\n    value: function activate(locale, locales) {\n      {\n        if (!this._messages[locale]) {\n          console.warn(\"Messages for locale \\\"\".concat(locale, \"\\\" not loaded.\"));\n        }\n\n        if (!this._localeData[locale]) {\n          console.warn(\"Locale data for locale \\\"\".concat(locale, \"\\\" not loaded. Plurals won't work correctly.\"));\n        }\n      }\n      this._locale = locale;\n      this._locales = locales;\n      this.emit(\"change\");\n    } // method for translation and formatting\n\n  }, {\n    key: \"_\",\n    value: function _(id) {\n      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          message = _ref.message,\n          formats = _ref.formats,\n          context = _ref.context;\n\n      if (!isString(id)) {\n        values = id.values || values;\n        message = id.message;\n        context = id.context;\n        id = id.id;\n      }\n\n      var messageMissing = !context && !this.messages[id];\n      var contextualMessageMissing = context && !this.messages[context][id];\n      var messageUnreachable = contextualMessageMissing || messageMissing; // replace missing messages with custom message for debugging\n\n      var missing = this._missing;\n\n      if (missing && messageUnreachable) {\n        return isFunction(missing) ? missing(this._locale, id, context) : missing;\n      }\n\n      if (messageUnreachable) {\n        this.emit(\"missing\", {\n          id: id,\n          context: context,\n          locale: this._locale\n        });\n      }\n\n      var translation;\n\n      if (context && !contextualMessageMissing) {\n        // context is like a subdirectory of other keys\n        translation = this.messages[context][id] || message || id;\n      } else {\n        translation = this.messages[id] || message || id;\n      }\n\n      {\n        translation = isString(translation) ? compile(translation) : translation;\n      } // hack for parsing unicode values inside a string to get parsed in react native environments\n\n      if (isString(translation) && UNICODE_REGEX.test(translation)) return JSON.parse(\"\\\"\".concat(translation, \"\\\"\"));\n      if (isString(translation)) return translation;\n      return interpolate(translation, this._locale, this._locales, this.localeData)(values, formats);\n    }\n  }, {\n    key: \"date\",\n    value: function date$1(value, format) {\n      return date(this._locales || this._locale, format)(value);\n    }\n  }, {\n    key: \"number\",\n    value: function number$1(value, format) {\n      return number(this._locales || this._locale, format)(value);\n    }\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this._locale;\n    }\n  }, {\n    key: \"locales\",\n    get: function get() {\n      return this._locales;\n    }\n  }, {\n    key: \"messages\",\n    get: function get() {\n      var _this$_messages$this$;\n\n      return (_this$_messages$this$ = this._messages[this._locale]) !== null && _this$_messages$this$ !== void 0 ? _this$_messages$this$ : {};\n    }\n  }, {\n    key: \"localeData\",\n    get: function get() {\n      var _this$_localeData$thi;\n\n      return (_this$_localeData$thi = this._localeData[this._locale]) !== null && _this$_localeData$thi !== void 0 ? _this$_localeData$thi : {};\n    }\n  }]);\n\n  return I18n;\n}(EventEmitter);\n\nfunction setupI18n() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new I18n(params);\n}\n\nvar i18n = setupI18n();\nexport { I18n, formats, i18n, setupI18n };","map":null,"metadata":{},"sourceType":"module"}