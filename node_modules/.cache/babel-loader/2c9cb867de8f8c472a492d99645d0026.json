{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = require(\"lodash\");\n\nvar set_1 = require(\"../abstract_data_types/types/set\");\n\nvar constants_1 = require(\"../utils/constants\");\n\nvar ArrayDataType =\n/** @class */\nfunction (_super) {\n  __extends(ArrayDataType, _super);\n\n  function ArrayDataType(dataItem, dataTypeFactory) {\n    var _this = this; // Construct parent\n\n\n    var isArray = true;\n\n    var _a = __read(ArrayDataType._decodeElementTypeAndLengthFromType(dataItem.type), 2),\n        arrayElementType = _a[0],\n        arrayLength = _a[1];\n\n    _this = _super.call(this, dataItem, dataTypeFactory, isArray, arrayLength, arrayElementType) || this; // Set array properties\n\n    _this._elementType = arrayElementType;\n    return _this;\n  }\n\n  ArrayDataType.matchType = function (type) {\n    return ArrayDataType._MATCHER.test(type);\n  };\n\n  ArrayDataType._decodeElementTypeAndLengthFromType = function (type) {\n    var matches = ArrayDataType._MATCHER.exec(type);\n\n    if (matches === null || matches.length !== 3) {\n      throw new Error(\"Could not parse array: \" + type);\n    } else if (matches[1] === undefined) {\n      throw new Error(\"Could not parse array type: \" + type);\n    } else if (matches[2] === undefined) {\n      throw new Error(\"Could not parse array length: \" + type);\n    }\n\n    var arrayElementType = matches[1];\n    var arrayLength = _.isEmpty(matches[2]) ? undefined : parseInt(matches[2], constants_1.constants.DEC_BASE);\n    return [arrayElementType, arrayLength];\n  };\n\n  ArrayDataType.prototype.getSignatureType = function () {\n    return this._computeSignature(false);\n  };\n\n  ArrayDataType.prototype.getSignature = function (isDetailed) {\n    if (_.isEmpty(this.getDataItem().name) || !isDetailed) {\n      return this.getSignatureType();\n    }\n\n    var name = this.getDataItem().name;\n    var lastIndexOfScopeDelimiter = name.lastIndexOf('.');\n    var isScopedName = lastIndexOfScopeDelimiter !== undefined && lastIndexOfScopeDelimiter > 0;\n    var shortName = isScopedName ? name.substr(lastIndexOfScopeDelimiter + 1) : name;\n\n    var detailedSignature = shortName + \" \" + this._computeSignature(isDetailed);\n\n    return detailedSignature;\n  };\n\n  ArrayDataType.prototype._computeSignature = function (isDetailed) {\n    // Compute signature for a single array element\n    var elementDataItem = {\n      type: this._elementType,\n      name: ''\n    };\n    var elementComponents = this.getDataItem().components;\n\n    if (elementComponents !== undefined) {\n      elementDataItem.components = elementComponents;\n    }\n\n    var elementDataType = this.getFactory().create(elementDataItem);\n    var elementSignature = elementDataType.getSignature(isDetailed); // Construct signature for array of type `element`\n\n    if (this._arrayLength === undefined) {\n      return elementSignature + \"[]\";\n    } else {\n      return elementSignature + \"[\" + this._arrayLength + \"]\";\n    }\n  };\n\n  ArrayDataType._MATCHER = RegExp('^(.+)\\\\[([0-9]*)\\\\]$');\n  return ArrayDataType;\n}(set_1.AbstractSetDataType);\n\nexports.ArrayDataType = ArrayDataType;","map":null,"metadata":{},"sourceType":"script"}