{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { loadModule, logger, fill, isThenable } from '@sentry/utils'; // This allows us to use the same array for both defaults options and the type itself.\n// (note `as const` at the end to make it a union of string literal types (i.e. \"a\" | \"b\" | ... )\n// and not just a string[])\n\nvar OPERATIONS = ['aggregate', // aggregate(pipeline, options, callback)\n'bulkWrite', // bulkWrite(operations, options, callback)\n'countDocuments', // countDocuments(query, options, callback)\n'createIndex', // createIndex(fieldOrSpec, options, callback)\n'createIndexes', // createIndexes(indexSpecs, options, callback)\n'deleteMany', // deleteMany(filter, options, callback)\n'deleteOne', // deleteOne(filter, options, callback)\n'distinct', // distinct(key, query, options, callback)\n'drop', // drop(options, callback)\n'dropIndex', // dropIndex(indexName, options, callback)\n'dropIndexes', // dropIndexes(options, callback)\n'estimatedDocumentCount', // estimatedDocumentCount(options, callback)\n'find', // find(query, options, callback)\n'findOne', // findOne(query, options, callback)\n'findOneAndDelete', // findOneAndDelete(filter, options, callback)\n'findOneAndReplace', // findOneAndReplace(filter, replacement, options, callback)\n'findOneAndUpdate', // findOneAndUpdate(filter, update, options, callback)\n'indexes', // indexes(options, callback)\n'indexExists', // indexExists(indexes, options, callback)\n'indexInformation', // indexInformation(options, callback)\n'initializeOrderedBulkOp', // initializeOrderedBulkOp(options, callback)\n'insertMany', // insertMany(docs, options, callback)\n'insertOne', // insertOne(doc, options, callback)\n'isCapped', // isCapped(options, callback)\n'mapReduce', // mapReduce(map, reduce, options, callback)\n'options', // options(options, callback)\n'parallelCollectionScan', // parallelCollectionScan(options, callback)\n'rename', // rename(newName, options, callback)\n'replaceOne', // replaceOne(filter, doc, options, callback)\n'stats', // stats(options, callback)\n'updateMany', // updateMany(filter, update, options, callback)\n'updateOne' // updateOne(filter, update, options, callback)\n]; // All of the operations above take `options` and `callback` as their final parameters, but some of them\n// take additional parameters as well. For those operations, this is a map of\n// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's\n// positional arguments when we add them to the span's `data` object later\n\nvar OPERATION_SIGNATURES = {\n  // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well\n  // see https://github.com/getsentry/sentry-javascript/pull/3102\n  bulkWrite: ['operations'],\n  countDocuments: ['query'],\n  createIndex: ['fieldOrSpec'],\n  createIndexes: ['indexSpecs'],\n  deleteMany: ['filter'],\n  deleteOne: ['filter'],\n  distinct: ['key', 'query'],\n  dropIndex: ['indexName'],\n  find: ['query'],\n  findOne: ['query'],\n  findOneAndDelete: ['filter'],\n  findOneAndReplace: ['filter', 'replacement'],\n  findOneAndUpdate: ['filter', 'update'],\n  indexExists: ['indexes'],\n  insertMany: ['docs'],\n  insertOne: ['doc'],\n  mapReduce: ['map', 'reduce'],\n  rename: ['newName'],\n  replaceOne: ['filter', 'doc'],\n  updateMany: ['filter', 'update'],\n  updateOne: ['filter', 'update']\n};\n/** Tracing integration for mongo package */\n\nvar Mongo = /*#__PURE__*/function () {\n  /**\n   * @inheritDoc\n   */\n  function Mongo() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Mongo);\n\n    ;\n\n    Mongo.prototype.__init.call(this);\n\n    this._operations = Array.isArray(options.operations) ? options.operations : OPERATIONS;\n    this._describeOperations = 'describeOperations' in options ? options.describeOperations : true;\n    this._useMongoose = !!options.useMongoose;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(Mongo, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Mongo.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      var moduleName = this._useMongoose ? 'mongoose' : 'mongodb';\n      var pkg = loadModule(moduleName);\n\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error(\"Mongo Integration was unable to require `\".concat(moduleName, \"` package.\"));\n        return;\n      }\n\n      this._instrumentOperations(pkg.Collection, this._operations, getCurrentHub);\n    }\n    /**\n     * Patches original collection methods\n     */\n\n  }, {\n    key: \"_instrumentOperations\",\n    value: function _instrumentOperations(collection, operations, getCurrentHub) {\n      var _this = this;\n\n      operations.forEach(function (operation) {\n        return _this._patchOperation(collection, operation, getCurrentHub);\n      });\n    }\n    /**\n     * Patches original collection to utilize our tracing functionality\n     */\n\n  }, {\n    key: \"_patchOperation\",\n    value: function _patchOperation(collection, operation, getCurrentHub) {\n      if (!(operation in collection.prototype)) return;\n\n      var getSpanContext = this._getSpanContextFromOperationArguments.bind(this);\n\n      fill(collection.prototype, operation, function (orig) {\n        return function () {\n          var _this2 = this;\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          var lastArg = args[args.length - 1];\n          var scope = getCurrentHub().getScope();\n\n          var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n            return _2.getSpan;\n          }, 'call', function (_3) {\n            return _3();\n          }]); // Check if the operation was passed a callback. (mapReduce requires a different check, as\n          // its (non-callback) arguments can also be functions.)\n\n\n          if (typeof lastArg !== 'function' || operation === 'mapReduce' && args.length === 2) {\n            var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n              return _4.startChild;\n            }, 'call', function (_5) {\n              return _5(getSpanContext(_this2, operation, args));\n            }]);\n\n            var maybePromise = orig.call.apply(orig, [this].concat(args));\n\n            if (isThenable(maybePromise)) {\n              return maybePromise.then(function (res) {\n                _optionalChain([span, 'optionalAccess', function (_6) {\n                  return _6.finish;\n                }, 'call', function (_7) {\n                  return _7();\n                }]);\n\n                return res;\n              });\n            } else {\n              _optionalChain([span, 'optionalAccess', function (_8) {\n                return _8.finish;\n              }, 'call', function (_9) {\n                return _9();\n              }]);\n\n              return maybePromise;\n            }\n          }\n\n          var span = _optionalChain([parentSpan, 'optionalAccess', function (_10) {\n            return _10.startChild;\n          }, 'call', function (_11) {\n            return _11(getSpanContext(_this2, operation, args.slice(0, -1)));\n          }]);\n\n          return orig.call.apply(orig, [this].concat(_toConsumableArray(args.slice(0, -1)), [function (err, result) {\n            _optionalChain([span, 'optionalAccess', function (_12) {\n              return _12.finish;\n            }, 'call', function (_13) {\n              return _13();\n            }]);\n\n            lastArg(err, result);\n          }]));\n        };\n      });\n    }\n    /**\n     * Form a SpanContext based on the user input to a given operation.\n     */\n\n  }, {\n    key: \"_getSpanContextFromOperationArguments\",\n    value: function _getSpanContextFromOperationArguments(collection, operation, args) {\n      var data = {\n        collectionName: collection.collectionName,\n        dbName: collection.dbName,\n        namespace: collection.namespace\n      };\n      var spanContext = {\n        op: 'db',\n        description: operation,\n        data: data\n      }; // If the operation takes no arguments besides `options` and `callback`, or if argument\n      // collection is disabled for this operation, just return early.\n\n      var signature = OPERATION_SIGNATURES[operation];\n      var shouldDescribe = Array.isArray(this._describeOperations) ? this._describeOperations.includes(operation) : this._describeOperations;\n\n      if (!signature || !shouldDescribe) {\n        return spanContext;\n      }\n\n      try {\n        // Special case for `mapReduce`, as the only one accepting functions as arguments.\n        if (operation === 'mapReduce') {\n          var _args = _slicedToArray(args, 2),\n              map = _args[0],\n              reduce = _args[1];\n\n          data[signature[0]] = typeof map === 'string' ? map : map.name || '<anonymous>';\n          data[signature[1]] = typeof reduce === 'string' ? reduce : reduce.name || '<anonymous>';\n        } else {\n          for (var i = 0; i < signature.length; i++) {\n            data[signature[i]] = JSON.stringify(args[i]);\n          }\n        }\n      } catch (_oO) {// no-empty\n      }\n\n      return spanContext;\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Mongo';\n    }\n  }]);\n\n  return Mongo;\n}();\n\nMongo.__initStatic();\n\nexport { Mongo };","map":null,"metadata":{},"sourceType":"module"}