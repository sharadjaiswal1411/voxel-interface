{"ast":null,"code":"import { FOCUS_NO_AUTOFOCUS } from '../constants';\n\nvar isElementHidden = function isElementHidden(node) {\n  // we can measure only \"elements\"\n  // consider others as \"visible\"\n  if (node.nodeType !== Node.ELEMENT_NODE) {\n    return false;\n  }\n\n  var computedStyle = window.getComputedStyle(node, null);\n\n  if (!computedStyle || !computedStyle.getPropertyValue) {\n    return false;\n  }\n\n  return computedStyle.getPropertyValue('display') === 'none' || computedStyle.getPropertyValue('visibility') === 'hidden';\n};\n\nvar getParentNode = function getParentNode(node) {\n  // DOCUMENT_FRAGMENT_NODE can also point on ShadowRoot. In this case .host will point on the next node\n  return node.parentNode && node.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node.parentNode.host : node.parentNode;\n};\n\nvar isTopNode = function isTopNode(node) {\n  // @ts-ignore\n  return node === document || node && node.nodeType === Node.DOCUMENT_NODE;\n};\n\nvar isVisibleUncached = function isVisibleUncached(node, checkParent) {\n  return !node || isTopNode(node) || !isElementHidden(node) && checkParent(getParentNode(node));\n};\n\nexport var isVisibleCached = function isVisibleCached(visibilityCache, node) {\n  var cached = visibilityCache.get(node);\n\n  if (cached !== undefined) {\n    return cached;\n  }\n\n  var result = isVisibleUncached(node, isVisibleCached.bind(undefined, visibilityCache));\n  visibilityCache.set(node, result);\n  return result;\n};\n\nvar isAutoFocusAllowedUncached = function isAutoFocusAllowedUncached(node, checkParent) {\n  return node && !isTopNode(node) ? isAutoFocusAllowed(node) ? checkParent(getParentNode(node)) : false : true;\n};\n\nexport var isAutoFocusAllowedCached = function isAutoFocusAllowedCached(cache, node) {\n  var cached = cache.get(node);\n\n  if (cached !== undefined) {\n    return cached;\n  }\n\n  var result = isAutoFocusAllowedUncached(node, isAutoFocusAllowedCached.bind(undefined, cache));\n  cache.set(node, result);\n  return result;\n};\nexport var getDataset = function getDataset(node) {\n  // @ts-ignore\n  return node.dataset;\n};\nexport var isHTMLButtonElement = function isHTMLButtonElement(node) {\n  return node.tagName === 'BUTTON';\n};\nexport var isHTMLInputElement = function isHTMLInputElement(node) {\n  return node.tagName === 'INPUT';\n};\nexport var isRadioElement = function isRadioElement(node) {\n  return isHTMLInputElement(node) && node.type === 'radio';\n};\nexport var notHiddenInput = function notHiddenInput(node) {\n  return !((isHTMLInputElement(node) || isHTMLButtonElement(node)) && (node.type === 'hidden' || node.disabled));\n};\nexport var isAutoFocusAllowed = function isAutoFocusAllowed(node) {\n  var attribute = node.getAttribute(FOCUS_NO_AUTOFOCUS);\n  return ![true, 'true', ''].includes(attribute);\n};\nexport var isGuard = function isGuard(node) {\n  var _a;\n\n  return Boolean(node && ((_a = getDataset(node)) === null || _a === void 0 ? void 0 : _a.focusGuard));\n};\nexport var isNotAGuard = function isNotAGuard(node) {\n  return !isGuard(node);\n};\nexport var isDefined = function isDefined(x) {\n  return Boolean(x);\n};","map":null,"metadata":{},"sourceType":"module"}