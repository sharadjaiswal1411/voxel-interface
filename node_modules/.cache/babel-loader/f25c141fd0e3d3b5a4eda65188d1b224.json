{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar _ = require(\"lodash\");\n\nvar configured_bignumber_1 = require(\"../../../configured_bignumber\");\n\nvar set_1 = require(\"../../calldata/blocks/set\");\n\nvar constants_1 = require(\"../../utils/constants\");\n\nvar data_type_1 = require(\"../data_type\");\n\nvar pointer_1 = require(\"./pointer\");\n\nvar AbstractSetDataType =\n/** @class */\nfunction (_super) {\n  __extends(AbstractSetDataType, _super);\n\n  function AbstractSetDataType(dataItem, factory, isArray, arrayLength, arrayElementType) {\n    var _a, _b;\n\n    if (isArray === void 0) {\n      isArray = false;\n    }\n\n    var _this = _super.call(this, dataItem, factory) || this;\n\n    _this._memberIndexByName = {};\n    _this._members = [];\n    _this._isArray = isArray;\n    _this._arrayLength = arrayLength;\n    _this._arrayElementType = arrayElementType;\n\n    if (isArray && arrayLength !== undefined) {\n      _a = __read(_this._createMembersWithLength(dataItem, arrayLength), 2), _this._members = _a[0], _this._memberIndexByName = _a[1];\n    } else if (!isArray) {\n      _b = __read(_this._createMembersWithKeys(dataItem), 2), _this._members = _b[0], _this._memberIndexByName = _b[1];\n    }\n\n    return _this;\n  }\n\n  AbstractSetDataType.prototype.generateCalldataBlock = function (value, parentBlock) {\n    var block = value instanceof Array ? this._generateCalldataBlockFromArray(value, parentBlock) : this._generateCalldataBlockFromObject(value, parentBlock);\n    return block;\n  };\n\n  AbstractSetDataType.prototype.generateValue = function (calldata, rules) {\n    var _this = this;\n\n    var _a;\n\n    var members = this._members; // Case 1: This is an array of undefined length, which means that `this._members` was not\n    //         populated in the constructor. So we must construct the set of members now.\n\n    if (this._isArray && this._arrayLength === undefined) {\n      var arrayLengthBuf = calldata.popWord();\n      var arrayLengthHex = ethUtil.bufferToHex(arrayLengthBuf);\n      var arrayLength = new configured_bignumber_1.BigNumber(arrayLengthHex, constants_1.constants.HEX_BASE);\n      _a = __read(this._createMembersWithLength(this.getDataItem(), arrayLength.toNumber()), 1), members = _a[0];\n    } // Create a new scope in the calldata, before descending into the members of this set.\n\n\n    calldata.startScope();\n    var value;\n\n    if (rules.shouldConvertStructsToObjects && !this._isArray) {\n      // Construct an object with values for each member of the set.\n      value = {};\n\n      _.each(this._memberIndexByName, function (idx, key) {\n        var member = _this._members[idx];\n        var memberValue = member.generateValue(calldata, rules);\n        value[key] = memberValue;\n      });\n    } else {\n      // Construct an array with values for each member of the set.\n      value = [];\n\n      _.each(members, function (member, idx) {\n        var memberValue = member.generateValue(calldata, rules);\n        value.push(memberValue);\n      });\n    } // Close this scope and return tetheh value.\n\n\n    calldata.endScope();\n    return value;\n  };\n\n  AbstractSetDataType.prototype.isStatic = function () {\n    // An array with an undefined length is never static.\n    if (this._isArray && this._arrayLength === undefined) {\n      return false;\n    } // If any member of the set is a pointer then the set is not static.\n\n\n    var dependentMember = _.find(this._members, function (member) {\n      return member instanceof pointer_1.AbstractPointerDataType;\n    });\n\n    var isStatic = dependentMember === undefined;\n    return isStatic;\n  };\n\n  AbstractSetDataType.prototype.getDefaultValue = function (rules) {\n    var _this = this;\n\n    var defaultValue;\n\n    if (this._isArray && this._arrayLength === undefined) {\n      defaultValue = [];\n    } else if (rules !== undefined && rules.shouldConvertStructsToObjects && !this._isArray) {\n      defaultValue = {};\n\n      _.each(this._memberIndexByName, function (idx, key) {\n        var member = _this._members[idx];\n        var memberValue = member.getDefaultValue();\n        defaultValue[key] = memberValue;\n      });\n    } else {\n      defaultValue = [];\n\n      _.each(this._members, function (member, idx) {\n        var memberValue = member.getDefaultValue();\n        defaultValue.push(memberValue);\n      });\n    }\n\n    return defaultValue;\n  };\n\n  AbstractSetDataType.prototype._generateCalldataBlockFromArray = function (value, parentBlock) {\n    var _a; // Sanity check: if the set has a defined length then `value` must have the same length.\n\n\n    if (this._arrayLength !== undefined && value.length !== this._arrayLength) {\n      throw new Error(\"Expected array of \" + JSON.stringify(this._arrayLength) + \" elements, but got array of length \" + JSON.stringify(value.length));\n    } // Create a new calldata block for this set.\n\n\n    var parentName = parentBlock === undefined ? '' : parentBlock.getName();\n    var block = new set_1.SetCalldataBlock(this.getDataItem().name, this.getSignature(), parentName); // If this set has an undefined length then set its header to be the number of elements.\n\n    var members = this._members;\n\n    if (this._isArray && this._arrayLength === undefined) {\n      _a = __read(this._createMembersWithLength(this.getDataItem(), value.length), 1), members = _a[0];\n      var lenBuf = ethUtil.setLengthLeft(ethUtil.toBuffer(\"0x\" + value.length.toString(constants_1.constants.HEX_BASE)), constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n      block.setHeader(lenBuf);\n    } // Create blocks for members of set.\n\n\n    var memberCalldataBlocks = [];\n\n    _.each(members, function (member, idx) {\n      var memberBlock = member.generateCalldataBlock(value[idx], block);\n      memberCalldataBlocks.push(memberBlock);\n    });\n\n    block.setMembers(memberCalldataBlocks);\n    return block;\n  };\n\n  AbstractSetDataType.prototype._generateCalldataBlockFromObject = function (obj, parentBlock) {\n    var _this = this; // Create a new calldata block for this set.\n\n\n    var parentName = parentBlock === undefined ? '' : parentBlock.getName();\n    var block = new set_1.SetCalldataBlock(this.getDataItem().name, this.getSignature(), parentName); // Create blocks for members of set.\n\n    var memberCalldataBlocks = [];\n\n    _.forEach(this._memberIndexByName, function (memberIndex, memberName) {\n      if (!(memberName in obj)) {\n        throw new Error(\"Could not assign tuple to object: missing key '\" + memberName + \"' in object \" + JSON.stringify(obj));\n      }\n\n      var memberValue = obj[memberName];\n\n      var memberBlock = _this._members[memberIndex].generateCalldataBlock(memberValue, block);\n\n      memberCalldataBlocks.push(memberBlock);\n    }); // Associate member blocks with Set block.\n\n\n    block.setMembers(memberCalldataBlocks);\n    return block;\n  };\n\n  AbstractSetDataType.prototype._computeSignatureOfMembers = function (isDetailed) {\n    var _this = this; // Compute signature of members\n\n\n    var signature = \"(\";\n\n    _.each(this._members, function (member, i) {\n      signature += member.getSignature(isDetailed);\n\n      if (i < _this._members.length - 1) {\n        signature += ',';\n      }\n    });\n\n    signature += ')';\n    return signature;\n  };\n\n  AbstractSetDataType.prototype._createMembersWithKeys = function (dataItem) {\n    var _this = this; // Sanity check\n\n\n    if (dataItem.components === undefined) {\n      throw new Error(\"Tried to create a set using key/value pairs, but no components were defined by the input DataItem '\" + dataItem.name + \"'.\");\n    } // Create one member for each component of `dataItem`\n\n\n    var members = [];\n    var memberIndexByName = {};\n    var memberNames = [];\n\n    _.each(dataItem.components, function (memberItem) {\n      // If a component with `name` already exists then\n      // rename to `name_nameIdx` to avoid naming conflicts.\n      var memberName = memberItem.name;\n      var nameIdx = 0;\n\n      while (_.includes(memberNames, memberName) || _.isEmpty(memberName)) {\n        nameIdx++;\n        memberName = memberItem.name + \"_\" + nameIdx;\n      }\n\n      memberNames.push(memberName);\n      var childDataItem = {\n        type: memberItem.type,\n        name: dataItem.name + \".\" + memberName\n      };\n      var components = memberItem.components;\n\n      if (components !== undefined) {\n        childDataItem.components = components;\n      }\n\n      var child = _this.getFactory().create(childDataItem, _this);\n\n      memberIndexByName[memberName] = members.length;\n      members.push(child);\n    });\n\n    return [members, memberIndexByName];\n  };\n\n  AbstractSetDataType.prototype._createMembersWithLength = function (dataItem, length) {\n    var _this = this; // Create `length` members, deriving the type from `dataItem`\n\n\n    var members = [];\n    var memberIndexByName = {};\n\n    var range = _.range(length);\n\n    _.each(range, function (idx) {\n      var memberDataItem = {\n        type: _this._arrayElementType === undefined ? '' : _this._arrayElementType,\n        name: dataItem.name + \"[\" + idx.toString(constants_1.constants.DEC_BASE) + \"]\"\n      };\n      var components = dataItem.components;\n\n      if (components !== undefined) {\n        memberDataItem.components = components;\n      }\n\n      var memberType = _this.getFactory().create(memberDataItem, _this);\n\n      memberIndexByName[idx.toString(constants_1.constants.DEC_BASE)] = members.length;\n      members.push(memberType);\n    });\n\n    return [members, memberIndexByName];\n  };\n\n  return AbstractSetDataType;\n}(data_type_1.DataType);\n\nexports.AbstractSetDataType = AbstractSetDataType;","map":null,"metadata":{},"sourceType":"script"}