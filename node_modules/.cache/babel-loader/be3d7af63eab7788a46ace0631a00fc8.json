{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Router, Trade } from '@kyberswap/ks-sdk-classic';\nimport { Percent, TradeType } from '@kyberswap/ks-sdk-core';\nimport { SwapRouter as ProAmmRouter, Trade as ProAmmTrade } from '@kyberswap/ks-sdk-elastic';\nimport JSBI from 'jsbi';\nimport { useMemo } from 'react';\nimport { formatCurrencyAmount } from 'utils/formatBalance';\nimport { BIPS_BASE, INITIAL_ALLOWED_SLIPPAGE } from '../constants';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { basisPointsToPercent, calculateGasMargin, getDynamicFeeRouterContract, getProAmmRouterContract, isAddress, shortenAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport { useTradeExactIn } from './Trades';\nimport { useActiveWeb3React } from './index';\nimport useENS from './useENS';\nimport useTransactionDeadline from './useTransactionDeadline';\nexport var SwapCallbackState;\n\n(function (SwapCallbackState) {\n  SwapCallbackState[SwapCallbackState[\"INVALID\"] = 0] = \"INVALID\";\n  SwapCallbackState[SwapCallbackState[\"LOADING\"] = 1] = \"LOADING\";\n  SwapCallbackState[SwapCallbackState[\"VALID\"] = 2] = \"VALID\";\n})(SwapCallbackState || (SwapCallbackState = {}));\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(trade) {\n  _s();\n\n  var allowedSlippage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INITIAL_ALLOWED_SLIPPAGE;\n  var // in bips\n  recipientAddressOrName // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n  = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      account = _useActiveWeb3React.account,\n      chainId = _useActiveWeb3React.chainId,\n      library = _useActiveWeb3React.library;\n\n  var _useENS = useENS(recipientAddressOrName),\n      recipientAddress = _useENS.address;\n\n  var recipient = recipientAddressOrName === null ? account : recipientAddress;\n  var deadline = useTransactionDeadline();\n  var tradeBestExacInAnyway = useTradeExactIn(trade instanceof ProAmmTrade ? undefined : trade === null || trade === void 0 ? void 0 : trade.inputAmount, trade instanceof ProAmmTrade ? undefined : (trade === null || trade === void 0 ? void 0 : trade.outputAmount.currency) || undefined);\n  return useMemo(function () {\n    if (!trade || !recipient || !library || !account || !chainId || !deadline) return [];\n\n    if (trade instanceof Trade) {\n      var routerContract = getDynamicFeeRouterContract(chainId, library, account);\n\n      if (!routerContract) {\n        return [];\n      }\n\n      var swapMethods = [Router.swapCallParameters(trade, {\n        feeOnTransfer: false,\n        allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n        recipient: recipient,\n        deadline: deadline.toNumber()\n      })];\n\n      if (trade.tradeType === TradeType.EXACT_INPUT) {\n        swapMethods.push(Router.swapCallParameters(trade, {\n          feeOnTransfer: true,\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient: recipient,\n          deadline: deadline.toNumber()\n        }));\n      } else if (!!tradeBestExacInAnyway) {\n        swapMethods.push(Router.swapCallParameters(tradeBestExacInAnyway, {\n          feeOnTransfer: true,\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient: recipient,\n          deadline: deadline.toNumber()\n        }));\n      }\n\n      return swapMethods.map(function (_ref) {\n        var methodName = _ref.methodName,\n            args = _ref.args,\n            value = _ref.value;\n        return {\n          address: routerContract.address,\n          calldata: routerContract.interface.encodeFunctionData(methodName, args),\n          value: value\n        };\n      });\n    } else {\n      var routerProAmmContract = getProAmmRouterContract(chainId, library, account);\n      if (!routerProAmmContract) return [];\n      var options = {\n        recipient: recipient,\n        slippageTolerance: basisPointsToPercent(allowedSlippage),\n        deadline: deadline.toString()\n      };\n\n      var _ProAmmRouter$swapCal = ProAmmRouter.swapCallParameters([trade], options),\n          value = _ProAmmRouter$swapCal.value,\n          calldata = _ProAmmRouter$swapCal.calldata;\n\n      return [{\n        address: routerProAmmContract.address,\n        calldata: calldata,\n        value: value\n      }];\n    }\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade, tradeBestExacInAnyway]);\n} // returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\n\n\n_s(useSwapCallArguments, \"NyLdtMNGV8Qt3dabl5dep/VDSLY=\", false, function () {\n  return [useActiveWeb3React, useENS, useTransactionDeadline, useTradeExactIn];\n});\n\nexport function useSwapCallback(trade) {\n  _s2();\n\n  var allowedSlippage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INITIAL_ALLOWED_SLIPPAGE;\n  var // in bips\n  recipientAddressOrName // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n  = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _useActiveWeb3React2 = useActiveWeb3React(),\n      account = _useActiveWeb3React2.account,\n      chainId = _useActiveWeb3React2.chainId,\n      library = _useActiveWeb3React2.library;\n\n  var swapCalls = useSwapCallArguments(trade, allowedSlippage, recipientAddressOrName);\n  var addTransactionWithType = useTransactionAdder();\n\n  var _useENS2 = useENS(recipientAddressOrName),\n      recipientAddress = _useENS2.address;\n\n  var recipient = recipientAddressOrName === null ? account : recipientAddress;\n  return useMemo(function () {\n    if (!trade || !library || !account || !chainId) {\n      return {\n        state: SwapCallbackState.INVALID,\n        callback: null,\n        error: 'Missing dependencies'\n      };\n    }\n\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return {\n          state: SwapCallbackState.INVALID,\n          callback: null,\n          error: 'Invalid recipient'\n        };\n      } else {\n        return {\n          state: SwapCallbackState.LOADING,\n          callback: null,\n          error: null\n        };\n      }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: function () {\n        var _onSwap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var estimatedCalls, successfulEstimation, errorCalls, _successfulEstimation, address, calldata, value;\n\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return Promise.all(swapCalls.map(function (call) {\n                    var address = call.address,\n                        calldata = call.calldata,\n                        value = call.value;\n                    var tx = !value || isZero(value) ? {\n                      from: account,\n                      to: address,\n                      data: calldata\n                    } : {\n                      from: account,\n                      to: address,\n                      data: calldata,\n                      value: value\n                    };\n                    return library.estimateGas(tx).then(function (gasEstimate) {\n                      return {\n                        call: call,\n                        gasEstimate: gasEstimate\n                      };\n                    }).catch(function (gasError) {\n                      // This callback only for swap legacy, dont need to track error on sentry\n                      console.debug('Gas estimate failed, trying eth_call to extract error', call);\n                      return library.call(tx).then(function (result) {\n                        console.debug('Unexpected successful call after failed estimate gas', call, gasError, result);\n                        return {\n                          call: call,\n                          error: new Error('Unexpected issue with estimating the gas. Please try again.')\n                        };\n                      }).catch(function (callError) {\n                        console.debug('Call threw error', call, callError);\n                        var errorMessage;\n\n                        switch (callError.message) {\n                          case 'execution reverted: DmmExchangeRouter: INSUFFICIENT_OUTPUT_AMOUNT':\n                          case 'execution reverted: DmmExchangeRouter: EXCESSIVE_INPUT_AMOUNT':\n                            errorMessage = 'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';\n                            break;\n\n                          default:\n                            errorMessage = \"The transaction cannot succeed due to error: \".concat(callError.message, \". This is probably an issue with one of the tokens you are swapping.\");\n                        }\n\n                        return {\n                          call: call,\n                          error: new Error(errorMessage)\n                        };\n                      });\n                    });\n                  }));\n\n                case 2:\n                  estimatedCalls = _context.sent;\n                  // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n                  successfulEstimation = estimatedCalls.find(function (el, ix, list) {\n                    return 'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]);\n                  }); // return new Promise((resolve, reject) => resolve(\"\"))\n\n                  if (successfulEstimation) {\n                    _context.next = 9;\n                    break;\n                  }\n\n                  errorCalls = estimatedCalls.filter(function (call) {\n                    return 'error' in call;\n                  });\n\n                  if (!(errorCalls.length > 0)) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  throw errorCalls[errorCalls.length - 1].error;\n\n                case 8:\n                  throw new Error('Unexpected error. Please contact support: none of the calls threw an error');\n\n                case 9:\n                  _successfulEstimation = successfulEstimation.call, address = _successfulEstimation.address, calldata = _successfulEstimation.calldata, value = _successfulEstimation.value;\n                  return _context.abrupt(\"return\", library.getSigner().sendTransaction(_objectSpread(_objectSpread({\n                    from: account,\n                    to: address,\n                    data: calldata\n                  }, 'gasEstimate' in successfulEstimation ? {\n                    gasLimit: calculateGasMargin(successfulEstimation.gasEstimate)\n                  } : {}), value && !isZero(value) ? {\n                    value: value\n                  } : {})).then(function (response) {\n                    var inputSymbol = trade.inputAmount.currency.symbol;\n                    var outputSymbol = trade.outputAmount.currency.symbol;\n                    var inputAmount = formatCurrencyAmount(trade.inputAmount);\n                    var outputAmount = formatCurrencyAmount(trade.outputAmount);\n                    var base = \"\".concat(inputAmount, \" \").concat(inputSymbol, \" for \").concat(outputAmount, \" \").concat(outputSymbol);\n                    var withRecipient = recipient === account ? base : \"\".concat(base, \" to \").concat(recipientAddressOrName && isAddress(recipientAddressOrName) ? shortenAddress(recipientAddressOrName) : recipientAddressOrName);\n                    addTransactionWithType(response, {\n                      type: 'Swap',\n                      summary: withRecipient\n                    });\n                    return response.hash;\n                  }).catch(function (error) {\n                    // if the user rejected the tx, pass this along\n                    if ((error === null || error === void 0 ? void 0 : error.code) === 4001) {\n                      throw new Error('Transaction rejected.');\n                    } else {\n                      // otherwise, the error was unexpected and we need to convey that\n                      console.error(\"Swap failed\", error, address, calldata, value);\n                      throw new Error(\"Swap failed: \".concat(error.message));\n                    }\n                  }));\n\n                case 11:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function onSwap() {\n          return _onSwap.apply(this, arguments);\n        }\n\n        return onSwap;\n      }(),\n      error: null\n    };\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransactionWithType]);\n}\n\n_s2(useSwapCallback, \"aJd7XMxqsB2XmN4PlS5z/fkAmws=\", false, function () {\n  return [useActiveWeb3React, useSwapCallArguments, useTransactionAdder, useENS];\n});","map":{"version":3,"names":["Router","Trade","Percent","TradeType","SwapRouter","ProAmmRouter","ProAmmTrade","JSBI","useMemo","formatCurrencyAmount","BIPS_BASE","INITIAL_ALLOWED_SLIPPAGE","useTransactionAdder","basisPointsToPercent","calculateGasMargin","getDynamicFeeRouterContract","getProAmmRouterContract","isAddress","shortenAddress","isZero","useTradeExactIn","useActiveWeb3React","useENS","useTransactionDeadline","SwapCallbackState","useSwapCallArguments","trade","allowedSlippage","recipientAddressOrName","account","chainId","library","recipientAddress","address","recipient","deadline","tradeBestExacInAnyway","undefined","inputAmount","outputAmount","currency","routerContract","swapMethods","swapCallParameters","feeOnTransfer","BigInt","toNumber","tradeType","EXACT_INPUT","push","map","methodName","args","value","calldata","interface","encodeFunctionData","routerProAmmContract","options","slippageTolerance","toString","useSwapCallback","swapCalls","addTransactionWithType","state","INVALID","callback","error","LOADING","VALID","Promise","all","call","tx","from","to","data","estimateGas","then","gasEstimate","catch","gasError","console","debug","result","Error","callError","errorMessage","message","estimatedCalls","successfulEstimation","find","el","ix","list","length","errorCalls","filter","getSigner","sendTransaction","gasLimit","response","inputSymbol","symbol","outputSymbol","base","withRecipient","type","summary","hash","code","onSwap"],"sources":["/Applications/XAMPP/voxel-interface/src/hooks/useSwapCallback.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { Router, Trade } from '@kyberswap/ks-sdk-classic'\nimport { Currency, Percent, TradeType } from '@kyberswap/ks-sdk-core'\nimport { SwapRouter as ProAmmRouter, Trade as ProAmmTrade } from '@kyberswap/ks-sdk-elastic'\nimport JSBI from 'jsbi'\nimport { useMemo } from 'react'\n\nimport { formatCurrencyAmount } from 'utils/formatBalance'\n\nimport { BIPS_BASE, INITIAL_ALLOWED_SLIPPAGE } from '../constants'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport {\n  basisPointsToPercent,\n  calculateGasMargin,\n  getDynamicFeeRouterContract,\n  getProAmmRouterContract,\n  isAddress,\n  shortenAddress,\n} from '../utils'\nimport isZero from '../utils/isZero'\nimport { useTradeExactIn } from './Trades'\nimport { useActiveWeb3React } from './index'\nimport useENS from './useENS'\nimport useTransactionDeadline from './useTransactionDeadline'\n\nexport type AnyTrade = Trade<Currency, Currency, TradeType> | ProAmmTrade<Currency, Currency, TradeType>\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface SwapCall {\n  address: string\n  calldata: string\n  value: string\n}\n\ninterface SuccessfulCall {\n  call: SwapCall\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall {\n  call: SwapCall\n  error: Error\n}\n\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(\n  trade: AnyTrade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n  const deadline = useTransactionDeadline()\n  const tradeBestExacInAnyway = useTradeExactIn(\n    trade instanceof ProAmmTrade ? undefined : trade?.inputAmount,\n    trade instanceof ProAmmTrade ? undefined : trade?.outputAmount.currency || undefined,\n  )\n  return useMemo(() => {\n    if (!trade || !recipient || !library || !account || !chainId || !deadline) return []\n\n    if (trade instanceof Trade) {\n      const routerContract: Contract | null = getDynamicFeeRouterContract(chainId, library, account)\n      if (!routerContract) {\n        return []\n      }\n      const swapMethods = [\n        Router.swapCallParameters(trade, {\n          feeOnTransfer: false,\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient,\n          deadline: deadline.toNumber(),\n        }),\n      ]\n\n      if (trade.tradeType === TradeType.EXACT_INPUT) {\n        swapMethods.push(\n          Router.swapCallParameters(trade, {\n            feeOnTransfer: true,\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n            recipient,\n            deadline: deadline.toNumber(),\n          }),\n        )\n      } else if (!!tradeBestExacInAnyway) {\n        swapMethods.push(\n          Router.swapCallParameters(tradeBestExacInAnyway, {\n            feeOnTransfer: true,\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n            recipient,\n            deadline: deadline.toNumber(),\n          }),\n        )\n      }\n\n      return swapMethods.map(({ methodName, args, value }) => ({\n        address: routerContract.address,\n        calldata: routerContract.interface.encodeFunctionData(methodName, args),\n        value,\n      }))\n    } else {\n      const routerProAmmContract: Contract | null = getProAmmRouterContract(chainId, library, account)\n      if (!routerProAmmContract) return []\n      const options = {\n        recipient,\n        slippageTolerance: basisPointsToPercent(allowedSlippage),\n        deadline: deadline.toString(),\n      }\n\n      const { value, calldata } = ProAmmRouter.swapCallParameters([trade], options)\n      return [\n        {\n          address: routerProAmmContract.address,\n          calldata,\n          value,\n        },\n      ]\n    }\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade, tradeBestExacInAnyway])\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: AnyTrade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipientAddressOrName)\n\n  const addTransactionWithType = useTransactionAdder()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\n      } else {\n        return { state: SwapCallbackState.LOADING, callback: null, error: null }\n      }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\n          swapCalls.map(call => {\n            const { address, calldata, value } = call\n            const tx =\n              !value || isZero(value)\n                ? { from: account, to: address, data: calldata }\n                : {\n                    from: account,\n                    to: address,\n                    data: calldata,\n                    value,\n                  }\n\n            return library\n              .estimateGas(tx)\n              .then(gasEstimate => {\n                return {\n                  call,\n                  gasEstimate,\n                }\n              })\n              .catch(gasError => {\n                // This callback only for swap legacy, dont need to track error on sentry\n                console.debug('Gas estimate failed, trying eth_call to extract error', call)\n\n                return library\n                  .call(tx)\n                  .then(result => {\n                    console.debug('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\n                  })\n                  .catch(callError => {\n                    console.debug('Call threw error', call, callError)\n                    let errorMessage: string\n                    switch (callError.message) {\n                      case 'execution reverted: DmmExchangeRouter: INSUFFICIENT_OUTPUT_AMOUNT':\n                      case 'execution reverted: DmmExchangeRouter: EXCESSIVE_INPUT_AMOUNT':\n                        errorMessage =\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\n                        break\n                      default:\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.message}. This is probably an issue with one of the tokens you are swapping.`\n                    }\n                    return { call, error: new Error(errorMessage) }\n                  })\n              })\n          }),\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]),\n        )\n        // return new Promise((resolve, reject) => resolve(\"\"))\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\n        }\n\n        const {\n          call: { address, calldata, value },\n        } = successfulEstimation\n\n        return library\n          .getSigner()\n          .sendTransaction({\n            from: account,\n            to: address,\n            data: calldata,\n            // let the wallet try if we can't estimate the gas\n            ...('gasEstimate' in successfulEstimation\n              ? { gasLimit: calculateGasMargin(successfulEstimation.gasEstimate) }\n              : {}),\n            ...(value && !isZero(value) ? { value } : {}),\n          })\n          .then((response: any) => {\n            const inputSymbol = trade.inputAmount.currency.symbol\n            const outputSymbol = trade.outputAmount.currency.symbol\n            const inputAmount = formatCurrencyAmount(trade.inputAmount)\n            const outputAmount = formatCurrencyAmount(trade.outputAmount)\n\n            const base = `${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\n            const withRecipient =\n              recipient === account\n                ? base\n                : `${base} to ${\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\n                      ? shortenAddress(recipientAddressOrName)\n                      : recipientAddressOrName\n                  }`\n\n            addTransactionWithType(response, {\n              type: 'Swap',\n              summary: withRecipient,\n            })\n\n            return response.hash\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.')\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, address, calldata, value)\n              throw new Error(`Swap failed: ${error.message}`)\n            }\n          })\n      },\n      error: null,\n    }\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransactionWithType])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}