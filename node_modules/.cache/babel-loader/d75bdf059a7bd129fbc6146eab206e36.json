{"ast":null,"code":"import _taggedTemplateLiteral from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\n\nimport { gql } from '@apollo/client';\nexport var PROMM_JOINED_POSITION = function PROMM_JOINED_POSITION(fairlaunchAddress, pid, block24) {\n  var query = \"\\n{\\n  joinedPositions(first: 1000, where : {pid: \".concat(pid, \", fairLaunch: \\\"\").concat(fairlaunchAddress, \"\\\"}) {\\n    id\\n    pool {\\n      liquidity\\n      reinvestL\\n      tick\\n      feeTier\\n      sqrtPrice\\n      token0 {\\n        id\\n        symbol\\n        name\\n        decimals\\n        derivedETH\\n      }\\n      token1 {\\n        id\\n        symbol\\n        name\\n        decimals\\n        derivedETH\\n      }\\n    }\\n    position {\\n      tickLower {\\n        tickIdx\\n      }\\n      tickUpper {\\n        tickIdx\\n      }\\n      liquidity\\n    }\\n  }\\n  farmingPool(id: \\\"\").concat(fairlaunchAddress, \"_\").concat(pid, \"\\\") {\\n    startTime\\n    endTime\\n    pool {\\n      totalValueLockedUSD\\n      feesUSD\\n    }\\n    rewardTokens{\\n      decimals\\n      id\\n      symbol\\n      name\\n    }\\n    totalRewardAmounts\\n  }\\n  farmingPools(\\n    where: {id: \\\"\").concat(fairlaunchAddress, \"_\").concat(pid, \"\\\"}\\n    \").concat(block24 ? \"    block: {number: \".concat(block24, \"}\") : '', \"\\n  ) {\\n    pool {\\n      feesUSD\\n      totalValueLockedUSD\\n    }\\n  }\\n}\\n  \");\n  return gql(query);\n};\n_c = PROMM_JOINED_POSITION;\nexport var PROMM_POOLS_BULK = function PROMM_POOLS_BULK(block, pools) {\n  var poolString = \"[\";\n  pools.map(function (address) {\n    return poolString += \"\\\"\".concat(address, \"\\\",\");\n  });\n  poolString += ']';\n  var queryString = \"\\n    query pools {\\n      pools(where: {id_in: \".concat(poolString, \"},\") + (block ? \"block: {number: \".concat(block, \"} ,\") : \"\") + \" orderBy: totalValueLockedUSD, orderDirection: desc, subgraphError: allow) {\\n        id\\n        feeTier\\n        liquidity\\n        reinvestL\\n        sqrtPrice\\n        tick\\n        token0 {\\n            id\\n            symbol\\n            name\\n            decimals\\n            derivedETH\\n        }\\n        token1 {\\n            id\\n            symbol\\n            name\\n            decimals\\n            derivedETH\\n        }\\n        token0Price\\n        token1Price\\n        volumeUSD\\n        txCount\\n        totalValueLockedToken0\\n        totalValueLockedToken1\\n        totalValueLockedUSD\\n      }\\n    }\\n    \";\n  return gql(queryString);\n};\n_c2 = PROMM_POOLS_BULK;\nexport var ALL_TICKS = function ALL_TICKS(poolAddress) {\n  var p = '\"' + poolAddress + '\"';\n  return gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    query allV3Ticks {\\n      ticks(first: 1000,  where: { poolAddress: \", \" }, orderBy: tickIdx) {\\n        tickIdx\\n        liquidityNet\\n        price0\\n        price1\\n      }\\n    }\\n  \"])), p);\n};\n_c3 = ALL_TICKS;\nexport var POOL_POSITION_COUNT = function POOL_POSITION_COUNT(poolAddresses) {\n  var p = JSON.stringify(poolAddresses.map(function (id) {\n    return id.toLowerCase();\n  }));\n  return gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    query positionCount {\\n      pools(first: 1000,  where: { id_in: \", \" }) {\\n        id\\n        positionCount\\n        feeTier\\n        closedPostionCount\\n      }\\n    }\\n  \"])), p);\n};\n_c4 = POOL_POSITION_COUNT;\nexport var PROMM_GET_POOL_VALUES_AFTER_MINTS_SUCCESS = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n  query getPoolValuesAfterMintsSuccess($poolAddress: String!) {\\n    pool(id: $poolAddress) {\\n      id\\n      totalValueLockedToken0\\n      totalValueLockedToken1\\n      totalValueLockedUSD\\n      feeTier\\n      mints(orderBy: timestamp, orderDirection: desc, first: 20) {\\n        id\\n        amount0\\n        amount1\\n        amountUSD\\n      }\\n    }\\n  }\\n\"])));\nexport var PROMM_GET_POOL_VALUES_AFTER_BURNS_SUCCESS = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n  query getPoolValuesAfterBurnsSuccess($poolAddress: String!) {\\n    pool(id: $poolAddress) {\\n      id\\n      totalValueLockedToken0\\n      totalValueLockedToken1\\n      totalValueLockedUSD\\n      feeTier\\n      burns(orderBy: timestamp, orderDirection: desc, first: 20) {\\n        id\\n        amount0\\n        amount1\\n        amountUSD\\n      }\\n    }\\n  }\\n\"])));\nexport var PROMM_GET_MINT_VALUES_AFTER_CREATE_POOL_SUCCESS = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n  query getPoolValuesAfterBurnsSuccess($transactionHash: String!) {\\n    transaction(id: $transactionHash) {\\n      id\\n      mints {\\n        id\\n        amount0\\n        amount1\\n        amountUSD\\n      }\\n    }\\n  }\\n\"])));\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"PROMM_JOINED_POSITION\");\n$RefreshReg$(_c2, \"PROMM_POOLS_BULK\");\n$RefreshReg$(_c3, \"ALL_TICKS\");\n$RefreshReg$(_c4, \"POOL_POSITION_COUNT\");","map":{"version":3,"names":["gql","PROMM_JOINED_POSITION","fairlaunchAddress","pid","block24","query","PROMM_POOLS_BULK","block","pools","poolString","map","address","queryString","ALL_TICKS","poolAddress","p","POOL_POSITION_COUNT","poolAddresses","JSON","stringify","id","toLowerCase","PROMM_GET_POOL_VALUES_AFTER_MINTS_SUCCESS","PROMM_GET_POOL_VALUES_AFTER_BURNS_SUCCESS","PROMM_GET_MINT_VALUES_AFTER_CREATE_POOL_SUCCESS"],"sources":["/Applications/XAMPP/voxel-interface/src/apollo/queries/promm.ts"],"sourcesContent":["import { gql } from '@apollo/client'\n\nexport const PROMM_JOINED_POSITION = (fairlaunchAddress: string, pid: number, block24: number) => {\n  const query = `\n{\n  joinedPositions(first: 1000, where : {pid: ${pid}, fairLaunch: \"${fairlaunchAddress}\"}) {\n    id\n    pool {\n      liquidity\n      reinvestL\n      tick\n      feeTier\n      sqrtPrice\n      token0 {\n        id\n        symbol\n        name\n        decimals\n        derivedETH\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n        derivedETH\n      }\n    }\n    position {\n      tickLower {\n        tickIdx\n      }\n      tickUpper {\n        tickIdx\n      }\n      liquidity\n    }\n  }\n  farmingPool(id: \"${fairlaunchAddress}_${pid}\") {\n    startTime\n    endTime\n    pool {\n      totalValueLockedUSD\n      feesUSD\n    }\n    rewardTokens{\n      decimals\n      id\n      symbol\n      name\n    }\n    totalRewardAmounts\n  }\n  farmingPools(\n    where: {id: \"${fairlaunchAddress}_${pid}\"}\n    ${block24 ? `    block: {number: ${block24}}` : ''}\n  ) {\n    pool {\n      feesUSD\n      totalValueLockedUSD\n    }\n  }\n}\n  `\n  return gql(query)\n}\n\nexport const PROMM_POOLS_BULK = (block: number | undefined, pools: string[]) => {\n  let poolString = `[`\n  pools.map(address => {\n    return (poolString += `\"${address}\",`)\n  })\n  poolString += ']'\n  const queryString =\n    `\n    query pools {\n      pools(where: {id_in: ${poolString}},` +\n    (block ? `block: {number: ${block}} ,` : ``) +\n    ` orderBy: totalValueLockedUSD, orderDirection: desc, subgraphError: allow) {\n        id\n        feeTier\n        liquidity\n        reinvestL\n        sqrtPrice\n        tick\n        token0 {\n            id\n            symbol\n            name\n            decimals\n            derivedETH\n        }\n        token1 {\n            id\n            symbol\n            name\n            decimals\n            derivedETH\n        }\n        token0Price\n        token1Price\n        volumeUSD\n        txCount\n        totalValueLockedToken0\n        totalValueLockedToken1\n        totalValueLockedUSD\n      }\n    }\n    `\n\n  return gql(queryString)\n}\n\nexport interface ProMMPoolFields {\n  id: string\n  feeTier: string\n  liquidity: string\n  sqrtPrice: string\n  reinvestL: string\n  tick: string\n  token0: {\n    id: string\n    symbol: string\n    name: string\n    decimals: string\n    derivedETH: string\n  }\n  token1: {\n    id: string\n    symbol: string\n    name: string\n    decimals: string\n    derivedETH: string\n  }\n  token0Price: string\n  token1Price: string\n  volumeUSD: string\n  txCount: string\n  totalValueLockedToken0: string\n  totalValueLockedToken1: string\n  totalValueLockedUSD: string\n}\n\nexport interface Tick {\n  tickIdx: number\n  liquidityNet: string\n  price0: string\n  price1: string\n}\n\nexport const ALL_TICKS = (poolAddress: string) => {\n  const p = '\"' + poolAddress + '\"'\n  return gql`\n    query allV3Ticks {\n      ticks(first: 1000,  where: { poolAddress: ${p} }, orderBy: tickIdx) {\n        tickIdx\n        liquidityNet\n        price0\n        price1\n      }\n    }\n  `\n}\n\nexport const POOL_POSITION_COUNT = (poolAddresses: string[]) => {\n  const p = JSON.stringify(poolAddresses.map(id => id.toLowerCase()))\n\n  return gql`\n    query positionCount {\n      pools(first: 1000,  where: { id_in: ${p} }) {\n        id\n        positionCount\n        feeTier\n        closedPostionCount\n      }\n    }\n  `\n}\n\nexport const PROMM_GET_POOL_VALUES_AFTER_MINTS_SUCCESS = gql`\n  query getPoolValuesAfterMintsSuccess($poolAddress: String!) {\n    pool(id: $poolAddress) {\n      id\n      totalValueLockedToken0\n      totalValueLockedToken1\n      totalValueLockedUSD\n      feeTier\n      mints(orderBy: timestamp, orderDirection: desc, first: 20) {\n        id\n        amount0\n        amount1\n        amountUSD\n      }\n    }\n  }\n`\n\nexport const PROMM_GET_POOL_VALUES_AFTER_BURNS_SUCCESS = gql`\n  query getPoolValuesAfterBurnsSuccess($poolAddress: String!) {\n    pool(id: $poolAddress) {\n      id\n      totalValueLockedToken0\n      totalValueLockedToken1\n      totalValueLockedUSD\n      feeTier\n      burns(orderBy: timestamp, orderDirection: desc, first: 20) {\n        id\n        amount0\n        amount1\n        amountUSD\n      }\n    }\n  }\n`\n\nexport const PROMM_GET_MINT_VALUES_AFTER_CREATE_POOL_SUCCESS = gql`\n  query getPoolValuesAfterBurnsSuccess($transactionHash: String!) {\n    transaction(id: $transactionHash) {\n      id\n      mints {\n        id\n        amount0\n        amount1\n        amountUSD\n      }\n    }\n  }\n`\n"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,iBAAD,EAA4BC,GAA5B,EAAyCC,OAAzC,EAA6D;EAChG,IAAMC,KAAK,+DAEkCF,GAFlC,6BAEuDD,iBAFvD,2eAmCQA,iBAnCR,cAmC6BC,GAnC7B,2PAmDMD,iBAnDN,cAmD2BC,GAnD3B,sBAoDPC,OAAO,iCAA0BA,OAA1B,SAAuC,EApDvC,qFAAX;EA6DA,OAAOJ,GAAG,CAACK,KAAD,CAAV;AACD,CA/DM;KAAMJ,qB;AAiEb,OAAO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAA4BC,KAA5B,EAAgD;EAC9E,IAAIC,UAAU,MAAd;EACAD,KAAK,CAACE,GAAN,CAAU,UAAAC,OAAO,EAAI;IACnB,OAAQF,UAAU,gBAAQE,OAAR,QAAlB;EACD,CAFD;EAGAF,UAAU,IAAI,GAAd;EACA,IAAMG,WAAW,GACf,0DAEyBH,UAFzB,WAGCF,KAAK,6BAAsBA,KAAtB,aAHN,ynBADF;EAqCA,OAAOP,GAAG,CAACY,WAAD,CAAV;AACD,CA5CM;MAAMN,gB;AAmFb,OAAO,IAAMO,SAAS,GAAG,SAAZA,SAAY,CAACC,WAAD,EAAyB;EAChD,IAAMC,CAAC,GAAG,MAAMD,WAAN,GAAoB,GAA9B;EACA,OAAOd,GAAP,sQAEgDe,CAFhD;AAUD,CAZM;MAAMF,S;AAcb,OAAO,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,aAAD,EAA6B;EAC9D,IAAMF,CAAC,GAAGG,IAAI,CAACC,SAAL,CAAeF,aAAa,CAACP,GAAd,CAAkB,UAAAU,EAAE;IAAA,OAAIA,EAAE,CAACC,WAAH,EAAJ;EAAA,CAApB,CAAf,CAAV;EAEA,OAAOrB,GAAP,4PAE0Ce,CAF1C;AAUD,CAbM;MAAMC,mB;AAeb,OAAO,IAAMM,yCAAyC,GAAGtB,GAAH,kbAA/C;AAkBP,OAAO,IAAMuB,yCAAyC,GAAGvB,GAAH,kbAA/C;AAkBP,OAAO,IAAMwB,+CAA+C,GAAGxB,GAAH,sSAArD"},"metadata":{},"sourceType":"module"}