{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Contract } from '@ethersproject/contracts';\nimport { namehash } from 'ethers/lib/utils';\nvar REGISTRAR_ABI = [{\n  constant: true,\n  inputs: [{\n    name: 'node',\n    type: 'bytes32'\n  }],\n  name: 'resolver',\n  outputs: [{\n    name: 'resolverAddress',\n    type: 'address'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}];\nvar REGISTRAR_ADDRESS = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e';\nvar RESOLVER_ABI = [{\n  constant: true,\n  inputs: [{\n    internalType: 'bytes32',\n    name: 'node',\n    type: 'bytes32'\n  }],\n  name: 'contenthash',\n  outputs: [{\n    internalType: 'bytes',\n    name: '',\n    type: 'bytes'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}]; // cache the resolver contracts since most of them are the public resolver\n\nfunction resolverContract(resolverAddress, provider) {\n  return new Contract(resolverAddress, RESOLVER_ABI, provider);\n}\n/**\n * Fetches and decodes the result of an ENS contenthash lookup on mainnet to a URI\n * @param ensName to resolve\n * @param provider provider to use to fetch the data\n */\n\n\nexport default function resolveENSContentHash(_x, _x2) {\n  return _resolveENSContentHash.apply(this, arguments);\n}\n\nfunction _resolveENSContentHash() {\n  _resolveENSContentHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ensName, provider) {\n    var ensRegistrarContract, hash, resolverAddress;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ensRegistrarContract = new Contract(REGISTRAR_ADDRESS, REGISTRAR_ABI, provider);\n            hash = namehash(ensName);\n            _context.next = 4;\n            return ensRegistrarContract.resolver(hash);\n\n          case 4:\n            resolverAddress = _context.sent;\n            return _context.abrupt(\"return\", resolverContract(resolverAddress, provider).contenthash(hash));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _resolveENSContentHash.apply(this, arguments);\n}","map":{"version":3,"names":["Contract","namehash","REGISTRAR_ABI","constant","inputs","name","type","outputs","payable","stateMutability","REGISTRAR_ADDRESS","RESOLVER_ABI","internalType","resolverContract","resolverAddress","provider","resolveENSContentHash","ensName","ensRegistrarContract","hash","resolver","contenthash"],"sources":["/Applications/XAMPP/voxel-interface/src/utils/resolveENSContentHash.ts"],"sourcesContent":["import { Provider } from '@ethersproject/abstract-provider'\nimport { Contract } from '@ethersproject/contracts'\nimport { namehash } from 'ethers/lib/utils'\n\nconst REGISTRAR_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'resolver',\n    outputs: [\n      {\n        name: 'resolverAddress',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n]\nconst REGISTRAR_ADDRESS = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\n\nconst RESOLVER_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'contenthash',\n    outputs: [\n      {\n        internalType: 'bytes',\n        name: '',\n        type: 'bytes',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n]\n\n// cache the resolver contracts since most of them are the public resolver\nfunction resolverContract(resolverAddress: string, provider: Provider): Contract {\n  return new Contract(resolverAddress, RESOLVER_ABI, provider)\n}\n\n/**\n * Fetches and decodes the result of an ENS contenthash lookup on mainnet to a URI\n * @param ensName to resolve\n * @param provider provider to use to fetch the data\n */\nexport default async function resolveENSContentHash(ensName: string, provider: Provider): Promise<string> {\n  const ensRegistrarContract = new Contract(REGISTRAR_ADDRESS, REGISTRAR_ABI, provider)\n  const hash = namehash(ensName)\n  const resolverAddress = await ensRegistrarContract.resolver(hash)\n  return resolverContract(resolverAddress, provider).contenthash(hash)\n}\n"],"mappings":";;AACA,SAASA,QAAT,QAAyB,0BAAzB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,IAAMC,aAAa,GAAG,CACpB;EACEC,QAAQ,EAAE,IADZ;EAEEC,MAAM,EAAE,CACN;IACEC,IAAI,EAAE,MADR;IAEEC,IAAI,EAAE;EAFR,CADM,CAFV;EAQED,IAAI,EAAE,UARR;EASEE,OAAO,EAAE,CACP;IACEF,IAAI,EAAE,iBADR;IAEEC,IAAI,EAAE;EAFR,CADO,CATX;EAeEE,OAAO,EAAE,KAfX;EAgBEC,eAAe,EAAE,MAhBnB;EAiBEH,IAAI,EAAE;AAjBR,CADoB,CAAtB;AAqBA,IAAMI,iBAAiB,GAAG,4CAA1B;AAEA,IAAMC,YAAY,GAAG,CACnB;EACER,QAAQ,EAAE,IADZ;EAEEC,MAAM,EAAE,CACN;IACEQ,YAAY,EAAE,SADhB;IAEEP,IAAI,EAAE,MAFR;IAGEC,IAAI,EAAE;EAHR,CADM,CAFV;EASED,IAAI,EAAE,aATR;EAUEE,OAAO,EAAE,CACP;IACEK,YAAY,EAAE,OADhB;IAEEP,IAAI,EAAE,EAFR;IAGEC,IAAI,EAAE;EAHR,CADO,CAVX;EAiBEE,OAAO,EAAE,KAjBX;EAkBEC,eAAe,EAAE,MAlBnB;EAmBEH,IAAI,EAAE;AAnBR,CADmB,CAArB,C,CAwBA;;AACA,SAASO,gBAAT,CAA0BC,eAA1B,EAAmDC,QAAnD,EAAiF;EAC/E,OAAO,IAAIf,QAAJ,CAAac,eAAb,EAA8BH,YAA9B,EAA4CI,QAA5C,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,wBAA8BC,qBAA9B;EAAA;AAAA;;;sFAAe,iBAAqCC,OAArC,EAAsDF,QAAtD;IAAA;IAAA;MAAA;QAAA;UAAA;YACPG,oBADO,GACgB,IAAIlB,QAAJ,CAAaU,iBAAb,EAAgCR,aAAhC,EAA+Ca,QAA/C,CADhB;YAEPI,IAFO,GAEAlB,QAAQ,CAACgB,OAAD,CAFR;YAAA;YAAA,OAGiBC,oBAAoB,CAACE,QAArB,CAA8BD,IAA9B,CAHjB;;UAAA;YAGPL,eAHO;YAAA,iCAIND,gBAAgB,CAACC,eAAD,EAAkBC,QAAlB,CAAhB,CAA4CM,WAA5C,CAAwDF,IAAxD,CAJM;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C"},"metadata":{},"sourceType":"module"}