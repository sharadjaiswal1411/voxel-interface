{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { Price } from '@kyberswap/ks-sdk-core';\nimport { TICK_SPACINGS, TickMath, encodeSqrtRatioX96, nearestUsableTick, priceToClosestTick } from '@kyberswap/ks-sdk-elastic';\nimport JSBI from 'jsbi';\nexport function tryParsePrice(baseToken, quoteToken, value) {\n  var _fraction$length;\n\n  if (!baseToken || !quoteToken || !value) {\n    return undefined;\n  }\n\n  if (!value.match(/^\\d*\\.?\\d+$/)) {\n    return undefined;\n  }\n\n  var _value$split = value.split('.'),\n      _value$split2 = _slicedToArray(_value$split, 2),\n      whole = _value$split2[0],\n      fraction = _value$split2[1];\n\n  var decimals = (_fraction$length = fraction === null || fraction === void 0 ? void 0 : fraction.length) !== null && _fraction$length !== void 0 ? _fraction$length : 0;\n  var withoutDecimals = JSBI.BigInt((whole !== null && whole !== void 0 ? whole : '') + (fraction !== null && fraction !== void 0 ? fraction : ''));\n  return new Price(baseToken, quoteToken, JSBI.multiply(JSBI.BigInt(Math.pow(10, decimals)), JSBI.BigInt(Math.pow(10, baseToken.decimals))), //denom\n  JSBI.multiply(withoutDecimals, JSBI.BigInt(Math.pow(10, quoteToken.decimals))));\n}\nexport function tryParseTick(baseToken, quoteToken, feeAmount, value) {\n  if (!baseToken || !quoteToken || !feeAmount || !value) {\n    return undefined;\n  }\n\n  var price = tryParsePrice(baseToken, quoteToken, value);\n\n  if (!price) {\n    return undefined;\n  }\n\n  var tick; // check price is within min/max bounds, if outside return min/max\n\n  var sqrtRatioX96 = encodeSqrtRatioX96(price.numerator, price.denominator);\n\n  if (JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MAX_SQRT_RATIO)) {\n    tick = TickMath.MAX_TICK;\n  } else if (JSBI.lessThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO)) {\n    tick = TickMath.MIN_TICK;\n  } else {\n    // this function is agnostic to the base, will always return the correct tick\n    tick = priceToClosestTick(price);\n  }\n\n  return nearestUsableTick(tick, TICK_SPACINGS[feeAmount]);\n}","map":{"version":3,"names":["Price","TICK_SPACINGS","TickMath","encodeSqrtRatioX96","nearestUsableTick","priceToClosestTick","JSBI","tryParsePrice","baseToken","quoteToken","value","undefined","match","split","whole","fraction","decimals","length","withoutDecimals","BigInt","multiply","tryParseTick","feeAmount","price","tick","sqrtRatioX96","numerator","denominator","greaterThanOrEqual","MAX_SQRT_RATIO","MAX_TICK","lessThanOrEqual","MIN_SQRT_RATIO","MIN_TICK"],"sources":["/Applications/XAMPP/voxel-interface/src/state/mint/proamm/utils.ts"],"sourcesContent":["import { Price, Token } from '@kyberswap/ks-sdk-core'\nimport {\n  FeeAmount,\n  TICK_SPACINGS,\n  TickMath,\n  encodeSqrtRatioX96,\n  nearestUsableTick,\n  priceToClosestTick,\n} from '@kyberswap/ks-sdk-elastic'\nimport JSBI from 'jsbi'\n\nexport function tryParsePrice(baseToken?: Token, quoteToken?: Token, value?: string) {\n  if (!baseToken || !quoteToken || !value) {\n    return undefined\n  }\n\n  if (!value.match(/^\\d*\\.?\\d+$/)) {\n    return undefined\n  }\n\n  const [whole, fraction] = value.split('.')\n\n  const decimals = fraction?.length ?? 0\n  const withoutDecimals = JSBI.BigInt((whole ?? '') + (fraction ?? ''))\n\n  return new Price(\n    baseToken,\n    quoteToken,\n    JSBI.multiply(JSBI.BigInt(10 ** decimals), JSBI.BigInt(10 ** baseToken.decimals)), //denom\n    JSBI.multiply(withoutDecimals, JSBI.BigInt(10 ** quoteToken.decimals)), //num\n  )\n}\n\nexport function tryParseTick(\n  baseToken?: Token,\n  quoteToken?: Token,\n  feeAmount?: FeeAmount,\n  value?: string,\n): number | undefined {\n  if (!baseToken || !quoteToken || !feeAmount || !value) {\n    return undefined\n  }\n\n  const price = tryParsePrice(baseToken, quoteToken, value)\n\n  if (!price) {\n    return undefined\n  }\n\n  let tick: number\n\n  // check price is within min/max bounds, if outside return min/max\n  const sqrtRatioX96 = encodeSqrtRatioX96(price.numerator, price.denominator)\n\n  if (JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MAX_SQRT_RATIO)) {\n    tick = TickMath.MAX_TICK\n  } else if (JSBI.lessThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO)) {\n    tick = TickMath.MIN_TICK\n  } else {\n    // this function is agnostic to the base, will always return the correct tick\n    tick = priceToClosestTick(price)\n  }\n\n  return nearestUsableTick(tick, TICK_SPACINGS[feeAmount])\n}\n"],"mappings":";AAAA,SAASA,KAAT,QAA6B,wBAA7B;AACA,SAEEC,aAFF,EAGEC,QAHF,EAIEC,kBAJF,EAKEC,iBALF,EAMEC,kBANF,QAOO,2BAPP;AAQA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAO,SAASC,aAAT,CAAuBC,SAAvB,EAA0CC,UAA1C,EAA8DC,KAA9D,EAA8E;EAAA;;EACnF,IAAI,CAACF,SAAD,IAAc,CAACC,UAAf,IAA6B,CAACC,KAAlC,EAAyC;IACvC,OAAOC,SAAP;EACD;;EAED,IAAI,CAACD,KAAK,CAACE,KAAN,CAAY,aAAZ,CAAL,EAAiC;IAC/B,OAAOD,SAAP;EACD;;EAED,mBAA0BD,KAAK,CAACG,KAAN,CAAY,GAAZ,CAA1B;EAAA;EAAA,IAAOC,KAAP;EAAA,IAAcC,QAAd;;EAEA,IAAMC,QAAQ,uBAAGD,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEE,MAAb,+DAAuB,CAArC;EACA,IAAMC,eAAe,GAAGZ,IAAI,CAACa,MAAL,CAAY,CAACL,KAAD,aAACA,KAAD,cAACA,KAAD,GAAU,EAAV,KAAiBC,QAAjB,aAAiBA,QAAjB,cAAiBA,QAAjB,GAA6B,EAA7B,CAAZ,CAAxB;EAEA,OAAO,IAAIf,KAAJ,CACLQ,SADK,EAELC,UAFK,EAGLH,IAAI,CAACc,QAAL,CAAcd,IAAI,CAACa,MAAL,UAAY,EAAZ,EAAkBH,QAAlB,EAAd,EAA2CV,IAAI,CAACa,MAAL,UAAY,EAAZ,EAAkBX,SAAS,CAACQ,QAA5B,EAA3C,CAHK,EAG8E;EACnFV,IAAI,CAACc,QAAL,CAAcF,eAAd,EAA+BZ,IAAI,CAACa,MAAL,UAAY,EAAZ,EAAkBV,UAAU,CAACO,QAA7B,EAA/B,CAJK,CAAP;AAMD;AAED,OAAO,SAASK,YAAT,CACLb,SADK,EAELC,UAFK,EAGLa,SAHK,EAILZ,KAJK,EAKe;EACpB,IAAI,CAACF,SAAD,IAAc,CAACC,UAAf,IAA6B,CAACa,SAA9B,IAA2C,CAACZ,KAAhD,EAAuD;IACrD,OAAOC,SAAP;EACD;;EAED,IAAMY,KAAK,GAAGhB,aAAa,CAACC,SAAD,EAAYC,UAAZ,EAAwBC,KAAxB,CAA3B;;EAEA,IAAI,CAACa,KAAL,EAAY;IACV,OAAOZ,SAAP;EACD;;EAED,IAAIa,IAAJ,CAXoB,CAapB;;EACA,IAAMC,YAAY,GAAGtB,kBAAkB,CAACoB,KAAK,CAACG,SAAP,EAAkBH,KAAK,CAACI,WAAxB,CAAvC;;EAEA,IAAIrB,IAAI,CAACsB,kBAAL,CAAwBH,YAAxB,EAAsCvB,QAAQ,CAAC2B,cAA/C,CAAJ,EAAoE;IAClEL,IAAI,GAAGtB,QAAQ,CAAC4B,QAAhB;EACD,CAFD,MAEO,IAAIxB,IAAI,CAACyB,eAAL,CAAqBN,YAArB,EAAmCvB,QAAQ,CAAC8B,cAA5C,CAAJ,EAAiE;IACtER,IAAI,GAAGtB,QAAQ,CAAC+B,QAAhB;EACD,CAFM,MAEA;IACL;IACAT,IAAI,GAAGnB,kBAAkB,CAACkB,KAAD,CAAzB;EACD;;EAED,OAAOnB,iBAAiB,CAACoB,IAAD,EAAOvB,aAAa,CAACqB,SAAD,CAApB,CAAxB;AACD"},"metadata":{},"sourceType":"module"}