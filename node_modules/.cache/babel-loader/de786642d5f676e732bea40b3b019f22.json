{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { isTransactionRecent, useAllTransactions } from '../state/transactions/hooks';\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a, b) {\n  return b.addedTime - a.addedTime;\n}\n\nvar useTransactionStatus = function useTransactionStatus() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      pendingTXStatus = _useState2[0],\n      setPendingTXStatus = _useState2[1]; // Determine if change in transactions, if so, run query again\n\n\n  var allTransactions = useAllTransactions();\n  var sortedRecentTransactions = useMemo(function () {\n    var txs = Object.values(allTransactions);\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst);\n  }, [allTransactions]);\n  var pending = sortedRecentTransactions.filter(function (tx) {\n    return !tx.receipt;\n  }).map(function (tx) {\n    return tx.hash;\n  });\n  var hasPendingTransactions = !!pending.length;\n  useEffect(function () {\n    setPendingTXStatus(hasPendingTransactions);\n  }, [hasPendingTransactions]);\n  return pendingTXStatus;\n};\n\n_s(useTransactionStatus, \"1WowDGuX2zwN/eAKqVkdeO+p8Jc=\", false, function () {\n  return [useAllTransactions];\n});\n\nexport default useTransactionStatus;","map":{"version":3,"names":["useEffect","useMemo","useState","isTransactionRecent","useAllTransactions","newTransactionsFirst","a","b","addedTime","useTransactionStatus","pendingTXStatus","setPendingTXStatus","allTransactions","sortedRecentTransactions","txs","Object","values","filter","sort","pending","tx","receipt","map","hash","hasPendingTransactions","length"],"sources":["/Applications/XAMPP/voxel-interface/src/hooks/useTransactionStatus.ts"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react'\n\nimport { isTransactionRecent, useAllTransactions } from '../state/transactions/hooks'\nimport { TransactionDetails } from '../state/transactions/reducer'\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\nconst useTransactionStatus = () => {\n  const [pendingTXStatus, setPendingTXStatus] = useState<any>(false)\n\n  // Determine if change in transactions, if so, run query again\n  const allTransactions = useAllTransactions()\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n  const pending = sortedRecentTransactions.filter(tx => !tx.receipt).map(tx => tx.hash)\n  const hasPendingTransactions = !!pending.length\n\n  useEffect(() => {\n    setPendingTXStatus(hasPendingTransactions)\n  }, [hasPendingTransactions])\n\n  return pendingTXStatus\n}\n\nexport default useTransactionStatus\n"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AAEA,SAASC,mBAAT,EAA8BC,kBAA9B,QAAwD,6BAAxD;;AAGA;AACA,SAASC,oBAAT,CAA8BC,CAA9B,EAAqDC,CAArD,EAA4E;EAC1E,OAAOA,CAAC,CAACC,SAAF,GAAcF,CAAC,CAACE,SAAvB;AACD;;AAED,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;EAAA;;EACjC,gBAA8CP,QAAQ,CAAM,KAAN,CAAtD;EAAA;EAAA,IAAOQ,eAAP;EAAA,IAAwBC,kBAAxB,iBADiC,CAGjC;;;EACA,IAAMC,eAAe,GAAGR,kBAAkB,EAA1C;EACA,IAAMS,wBAAwB,GAAGZ,OAAO,CAAC,YAAM;IAC7C,IAAMa,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,eAAd,CAAZ;IACA,OAAOE,GAAG,CAACG,MAAJ,CAAWd,mBAAX,EAAgCe,IAAhC,CAAqCb,oBAArC,CAAP;EACD,CAHuC,EAGrC,CAACO,eAAD,CAHqC,CAAxC;EAIA,IAAMO,OAAO,GAAGN,wBAAwB,CAACI,MAAzB,CAAgC,UAAAG,EAAE;IAAA,OAAI,CAACA,EAAE,CAACC,OAAR;EAAA,CAAlC,EAAmDC,GAAnD,CAAuD,UAAAF,EAAE;IAAA,OAAIA,EAAE,CAACG,IAAP;EAAA,CAAzD,CAAhB;EACA,IAAMC,sBAAsB,GAAG,CAAC,CAACL,OAAO,CAACM,MAAzC;EAEAzB,SAAS,CAAC,YAAM;IACdW,kBAAkB,CAACa,sBAAD,CAAlB;EACD,CAFQ,EAEN,CAACA,sBAAD,CAFM,CAAT;EAIA,OAAOd,eAAP;AACD,CAjBD;;GAAMD,oB;UAIoBL,kB;;;AAe1B,eAAeK,oBAAf"},"metadata":{},"sourceType":"module"}