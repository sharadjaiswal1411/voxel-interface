{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { BigNumber, utils } from \"ethers\";\nimport moment from 'moment';\nimport { useCallback } from \"react\";\nimport { CONTRACT_NOT_FOUND_MSG } from \"constants/messages\";\nimport { useActiveWeb3React } from \"hooks\";\nimport { useNFTStakingContract, useERC721Contract, useTokenContract, useNFTStakingFactoryContract, useTokenStakingFactoryContract, useTokenStakingContract } from \"hooks/useContract\";\nimport { useTransactionAdder } from \"state/transactions/hooks\";\nimport { calculateGasMargin } from \"utils\";\nexport var useStakingAction = function useStakingAction() {\n  _s();\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      chainId = _useActiveWeb3React.chainId,\n      account = _useActiveWeb3React.account;\n\n  var stakingFactory = useNFTStakingFactoryContract();\n  var fetchPools = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var allVaults;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (stakingFactory) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n          case 2:\n            _context.next = 4;\n            return stakingFactory.listVaults();\n\n          case 4:\n            allVaults = _context.sent;\n            return _context.abrupt(\"return\", allVaults);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [stakingFactory, chainId]);\n  return {\n    fetchPools: fetchPools\n  };\n};\n\n_s(useStakingAction, \"sXmPfYQIt1p1tQmGM4qYKhyD0F4=\", false, function () {\n  return [useActiveWeb3React, useNFTStakingFactoryContract];\n});\n\nexport var useTokenStakingAction = function useTokenStakingAction() {\n  _s2();\n\n  var _useActiveWeb3React2 = useActiveWeb3React(),\n      chainId = _useActiveWeb3React2.chainId,\n      account = _useActiveWeb3React2.account;\n\n  var stakingFactory = useTokenStakingFactoryContract();\n  var fetchPools = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var allVaults;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (stakingFactory) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n          case 2:\n            _context2.next = 4;\n            return stakingFactory.listVaults();\n\n          case 4:\n            allVaults = _context2.sent;\n            console.log(\"allVaults\", allVaults);\n            return _context2.abrupt(\"return\", allVaults);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), [stakingFactory, chainId]);\n  return {\n    fetchPools: fetchPools\n  };\n};\n\n_s2(useTokenStakingAction, \"7fkTpi9qLVxz2T8WBJwt2Cd8n7E=\", false, function () {\n  return [useActiveWeb3React, useTokenStakingFactoryContract];\n});\n\nfunction toMonthDaysMinutesSeconds(seconds) {\n  var date1 = new Date();\n  var b = moment(date1),\n      a = moment(b).add(seconds, 'seconds'),\n      intervals = ['years', 'months', 'weeks', 'days'],\n      out = [];\n\n  for (var i = 0; i < intervals.length; i++) {\n    var unit = intervals[i];\n    var diff = a.diff(b, unit);\n    b.add(diff, unit);\n\n    if (diff > 0) {\n      if (diff == 1) {\n        unit = unit.slice(\"s\", -1);\n      }\n\n      out.push(diff + ' ' + unit);\n    }\n  }\n\n  return out.join(', ');\n}\n\n;\nexport var useTokenStakingDetailsAction = function useTokenStakingDetailsAction(stakingAddress, stakedToken) {\n  _s3();\n\n  var _useActiveWeb3React3 = useActiveWeb3React(),\n      chainId = _useActiveWeb3React3.chainId,\n      account = _useActiveWeb3React3.account;\n\n  var addTransactionWithType = useTransactionAdder();\n  var contract = useTokenStakingContract(stakingAddress);\n  var tokenContract = useTokenContract(stakedToken);\n  var fetchPoolInfo = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    var data, tokenStaked, _data$, apy, closingIn, lockPeriod, minStakeRequired, rewardToken, stakedToken, totalStaked, isApproved, balance, now, isClosed, denom, rewardEarned, poolInfo;\n\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(!contract || !tokenContract)) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n          case 2:\n            _context3.next = 4;\n            return contract.getPoolInfo();\n\n          case 4:\n            data = _context3.sent;\n            _context3.next = 7;\n            return contract.minStakeRequiredOf(account);\n\n          case 7:\n            tokenStaked = _context3.sent;\n            _data$ = data[0], apy = _data$.apy, closingIn = _data$.closingIn, lockPeriod = _data$.lockPeriod, minStakeRequired = _data$.minStakeRequired, rewardToken = _data$.rewardToken, stakedToken = _data$.stakedToken, totalStaked = _data$.totalStaked;\n            _context3.next = 11;\n            return tokenContract.allowance(account, stakingAddress);\n\n          case 11:\n            isApproved = _context3.sent;\n            _context3.next = 14;\n            return tokenContract.balanceOf(account);\n\n          case 14:\n            balance = _context3.sent;\n            now = Date.now() / 1000;\n            isClosed = now > closingIn.toNumber();\n            denom = BigNumber.from(10).pow(16);\n            rewardEarned = data[1];\n            poolInfo = {\n              apr: apy.toNumber() / 100,\n              closingIn: closingIn.toNumber(),\n              lockPeriod: toMonthDaysMinutesSeconds(lockPeriod.toNumber()),\n              minStakeRequired: Number(utils.formatEther(minStakeRequired)),\n              rewardToken: rewardToken,\n              stakedToken: stakedToken,\n              totalStaked: Number(utils.formatEther(totalStaked)),\n              rewardEarned: Number(utils.formatEther(rewardEarned)),\n              tokenStaked: Number(utils.formatEther(tokenStaked)),\n              availableTokens: balance.div(denom).toNumber(),\n              isClosed: isClosed,\n              isApproved: isApproved.div(denom).toNumber()\n            };\n            return _context3.abrupt(\"return\", poolInfo);\n\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })), [contract, chainId]);\n  var approve = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var balance, estimateGas, tx;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (tokenContract) {\n              _context4.next = 2;\n              break;\n            }\n\n            throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n          case 2:\n            _context4.next = 4;\n            return tokenContract.balanceOf(account);\n\n          case 4:\n            balance = _context4.sent;\n            _context4.next = 7;\n            return tokenContract.estimateGas.approve(stakingAddress, balance.toString());\n\n          case 7:\n            estimateGas = _context4.sent;\n            _context4.next = 10;\n            return tokenContract.approve(stakingAddress, balance.toString(), {\n              gasLimit: calculateGasMargin(estimateGas)\n            });\n\n          case 10:\n            tx = _context4.sent;\n            addTransactionWithType(tx, {\n              type: \"Approve\",\n              summary: \"Staking contract approved\"\n            });\n            return _context4.abrupt(\"return\", tx.hash);\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  })), [addTransactionWithType, tokenContract]); // Deposit\n\n  var stake = useCallback( /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(tokens) {\n      var estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (contract) {\n                _context5.next = 2;\n                break;\n              }\n\n              throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n            case 2:\n              tokens = utils.parseUnits(tokens.toString(), 18).toString();\n              _context5.next = 5;\n              return contract.estimateGas.stake(tokens);\n\n            case 5:\n              estimateGas = _context5.sent;\n              _context5.next = 8;\n              return contract.stake(tokens, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 8:\n              tx = _context5.sent;\n              addTransactionWithType(tx, {\n                type: \"Stake\",\n                summary: \"Tokens Staked\"\n              });\n              return _context5.abrupt(\"return\", tx.hash);\n\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x) {\n      return _ref5.apply(this, arguments);\n    };\n  }(), [addTransactionWithType, contract, chainId]);\n  var unStake = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n    var estimateGas, tx;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (contract) {\n              _context6.next = 2;\n              break;\n            }\n\n            throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n          case 2:\n            _context6.next = 4;\n            return contract.estimateGas.unstake();\n\n          case 4:\n            estimateGas = _context6.sent;\n            _context6.next = 7;\n            return contract.unstake({\n              gasLimit: calculateGasMargin(estimateGas)\n            });\n\n          case 7:\n            tx = _context6.sent;\n            addTransactionWithType(tx, {\n              type: \"Withdraw\",\n              summary: \"Tokens unstaked\"\n            });\n            return _context6.abrupt(\"return\", tx.hash);\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  })), [addTransactionWithType, contract]);\n  var harvest = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n    var estimateGas, tx;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            if (contract) {\n              _context7.next = 2;\n              break;\n            }\n\n            throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n          case 2:\n            _context7.next = 4;\n            return contract.estimateGas.withdrawAvailableReward();\n\n          case 4:\n            estimateGas = _context7.sent;\n            _context7.next = 7;\n            return contract.withdrawAvailableReward({\n              gasLimit: calculateGasMargin(estimateGas)\n            });\n\n          case 7:\n            tx = _context7.sent;\n            addTransactionWithType(tx, {\n              type: \"Withdraw\",\n              summary: \"Harvest Rewards\"\n            });\n            return _context7.abrupt(\"return\", tx.hash);\n\n          case 10:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  })), [addTransactionWithType, contract]);\n  return {\n    fetchPoolInfo: fetchPoolInfo,\n    stake: stake,\n    unStake: unStake,\n    approve: approve,\n    harvest: harvest\n  };\n};\n\n_s3(useTokenStakingDetailsAction, \"ovdnPvYXia0nTQAeqrYk90ZKhYk=\", false, function () {\n  return [useActiveWeb3React, useTransactionAdder, useTokenStakingContract, useTokenContract];\n});\n\nexport var useFarmAction = function useFarmAction(stakingAddress, nftAddress) {\n  _s4();\n\n  var _useActiveWeb3React4 = useActiveWeb3React(),\n      chainId = _useActiveWeb3React4.chainId,\n      account = _useActiveWeb3React4.account;\n\n  var addTransactionWithType = useTransactionAdder();\n  var contract = useNFTStakingContract(stakingAddress);\n  var stakingFactory = useNFTStakingFactoryContract();\n  var posManager = useERC721Contract(nftAddress);\n  var approve = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n    var estimateGas, tx;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (posManager) {\n              _context8.next = 2;\n              break;\n            }\n\n            throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n          case 2:\n            _context8.next = 4;\n            return posManager.estimateGas.setApprovalForAll(stakingAddress, true);\n\n          case 4:\n            estimateGas = _context8.sent;\n            _context8.next = 7;\n            return posManager.setApprovalForAll(stakingAddress, true, {\n              gasLimit: calculateGasMargin(estimateGas)\n            });\n\n          case 7:\n            tx = _context8.sent;\n            addTransactionWithType(tx, {\n              type: \"Approve\",\n              summary: \"Staking contract approved\"\n            });\n            return _context8.abrupt(\"return\", tx.hash);\n\n          case 10:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  })), [addTransactionWithType, nftAddress, posManager]);\n  var isApprovedContract = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n    var tx;\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            if (!(!contract || !posManager)) {\n              _context9.next = 2;\n              break;\n            }\n\n            throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n          case 2:\n            _context9.next = 4;\n            return posManager.isApprovedForAll(account, stakingAddress);\n\n          case 4:\n            tx = _context9.sent;\n            console.log(tx);\n            return _context9.abrupt(\"return\", tx);\n\n          case 7:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  })), [nftAddress, posManager]);\n  var fetchNfts = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n    var tx;\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            if (contract) {\n              _context10.next = 2;\n              break;\n            }\n\n            throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n          case 2:\n            _context10.next = 4;\n            return contract.getStakedTokens(account);\n\n          case 4:\n            tx = _context10.sent;\n            return _context10.abrupt(\"return\", tx);\n\n          case 6:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  })), [contract, nftAddress, chainId]);\n  var fetchBalance = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n    var tx;\n    return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            if (contract) {\n              _context11.next = 2;\n              break;\n            }\n\n            throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n          case 2:\n            _context11.next = 4;\n            return contract.stakers(account);\n\n          case 4:\n            tx = _context11.sent;\n            return _context11.abrupt(\"return\", tx === null || tx === void 0 ? void 0 : tx.balance);\n\n          case 6:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  })), [contract, nftAddress, chainId]); // Deposit\n\n  var deposit = useCallback( /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(nftId) {\n      var estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (contract) {\n                _context12.next = 2;\n                break;\n              }\n\n              throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n            case 2:\n              _context12.next = 4;\n              return contract.estimateGas.stake(nftId);\n\n            case 4:\n              estimateGas = _context12.sent;\n              _context12.next = 7;\n              return contract.stake(nftId, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 7:\n              tx = _context12.sent;\n              addTransactionWithType(tx, {\n                type: \"Stake\",\n                summary: \"NFT Staked\"\n              });\n              return _context12.abrupt(\"return\", tx.hash);\n\n            case 10:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    return function (_x2) {\n      return _ref12.apply(this, arguments);\n    };\n  }(), [addTransactionWithType, contract, chainId]);\n  var withdraw = useCallback( /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(nftId) {\n      var estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              if (contract) {\n                _context13.next = 2;\n                break;\n              }\n\n              throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n            case 2:\n              _context13.next = 4;\n              return contract.estimateGas.unstake(nftId);\n\n            case 4:\n              estimateGas = _context13.sent;\n              _context13.next = 7;\n              return contract.unstake(nftId, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 7:\n              tx = _context13.sent;\n              addTransactionWithType(tx, {\n                type: \"Withdraw\",\n                summary: \"Nft unstaked\"\n              });\n              return _context13.abrupt(\"return\", tx.hash);\n\n            case 10:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    return function (_x3) {\n      return _ref13.apply(this, arguments);\n    };\n  }(), [addTransactionWithType, contract]);\n  var emergencyWithdraw = useCallback( /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(nftIds) {\n      var estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (contract) {\n                _context14.next = 2;\n                break;\n              }\n\n              throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n            case 2:\n              _context14.next = 4;\n              return contract.estimateGas.emergencyWithdraw(nftIds);\n\n            case 4:\n              estimateGas = _context14.sent;\n              _context14.next = 7;\n              return contract.emergencyWithdraw(nftIds, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 7:\n              tx = _context14.sent;\n              addTransactionWithType(tx, {\n                type: \"ForceWithdraw\"\n              });\n              return _context14.abrupt(\"return\", tx.hash);\n\n            case 10:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    return function (_x4) {\n      return _ref14.apply(this, arguments);\n    };\n  }(), [addTransactionWithType, contract]);\n  var stake = useCallback( /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(pid, nftIds, liqs) {\n      var estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (contract) {\n                _context15.next = 2;\n                break;\n              }\n\n              throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n            case 2:\n              _context15.next = 4;\n              return contract.estimateGas.join(pid, nftIds, liqs);\n\n            case 4:\n              estimateGas = _context15.sent;\n              _context15.next = 7;\n              return contract.join(pid, nftIds, liqs, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 7:\n              tx = _context15.sent;\n              addTransactionWithType(tx, {\n                type: \"Stake\",\n                summary: \"liquidity into farm\"\n              });\n              return _context15.abrupt(\"return\", tx.hash);\n\n            case 10:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15);\n    }));\n\n    return function (_x5, _x6, _x7) {\n      return _ref15.apply(this, arguments);\n    };\n  }(), [addTransactionWithType, contract]);\n  var unstake = useCallback( /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(pid, nftIds, liqs) {\n      var estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              if (contract) {\n                _context16.next = 2;\n                break;\n              }\n\n              throw new Error(CONTRACT_NOT_FOUND_MSG);\n\n            case 2:\n              _context16.prev = 2;\n              _context16.next = 5;\n              return contract.estimateGas.exit(pid, nftIds, liqs);\n\n            case 5:\n              estimateGas = _context16.sent;\n              _context16.next = 8;\n              return contract.exit(pid, nftIds, liqs, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 8:\n              tx = _context16.sent;\n              addTransactionWithType(tx, {\n                type: \"Unstake\",\n                summary: \"liquidity from farm\"\n              });\n              return _context16.abrupt(\"return\", tx.hash);\n\n            case 13:\n              _context16.prev = 13;\n              _context16.t0 = _context16[\"catch\"](2);\n              console.log(_context16.t0);\n\n            case 16:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, null, [[2, 13]]);\n    }));\n\n    return function (_x8, _x9, _x10) {\n      return _ref16.apply(this, arguments);\n    };\n  }(), [addTransactionWithType, contract]);\n  var harvest = useCallback( /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(nftIds, poolIds) {\n      var encodeData, estimateGas, tx;\n      return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              if (contract) {\n                _context17.next = 2;\n                break;\n              }\n\n              return _context17.abrupt(\"return\");\n\n            case 2:\n              encodeData = poolIds.map(function (id) {\n                return defaultAbiCoder.encode([\"tupple(uint256[] pIds)\"], [{\n                  pIds: [id]\n                }]);\n              });\n              _context17.prev = 3;\n              _context17.next = 6;\n              return contract.estimateGas.harvestMultiplePools(nftIds, encodeData);\n\n            case 6:\n              estimateGas = _context17.sent;\n              _context17.next = 9;\n              return contract.harvestMultiplePools(nftIds, encodeData, {\n                gasLimit: calculateGasMargin(estimateGas)\n              });\n\n            case 9:\n              tx = _context17.sent;\n              addTransactionWithType(tx, {\n                type: \"Harvest\"\n              });\n              return _context17.abrupt(\"return\", tx);\n\n            case 14:\n              _context17.prev = 14;\n              _context17.t0 = _context17[\"catch\"](3);\n              console.log(_context17.t0);\n\n            case 17:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, null, [[3, 14]]);\n    }));\n\n    return function (_x11, _x12) {\n      return _ref17.apply(this, arguments);\n    };\n  }(), [addTransactionWithType, contract]);\n  return {\n    deposit: deposit,\n    withdraw: withdraw,\n    approve: approve,\n    stake: stake,\n    unstake: unstake,\n    harvest: harvest,\n    emergencyWithdraw: emergencyWithdraw,\n    fetchNfts: fetchNfts,\n    isApprovedContract: isApprovedContract,\n    fetchBalance: fetchBalance\n  };\n};\n\n_s4(useFarmAction, \"cSZA4XoXsL7PTg90B24qoOdLFI4=\", false, function () {\n  return [useActiveWeb3React, useTransactionAdder, useNFTStakingContract, useNFTStakingFactoryContract, useERC721Contract];\n});","map":{"version":3,"names":["defaultAbiCoder","BigNumber","utils","moment","useCallback","CONTRACT_NOT_FOUND_MSG","useActiveWeb3React","useNFTStakingContract","useERC721Contract","useTokenContract","useNFTStakingFactoryContract","useTokenStakingFactoryContract","useTokenStakingContract","useTransactionAdder","calculateGasMargin","useStakingAction","chainId","account","stakingFactory","fetchPools","Error","listVaults","allVaults","useTokenStakingAction","console","log","toMonthDaysMinutesSeconds","seconds","date1","Date","b","a","add","intervals","out","i","length","unit","diff","slice","push","join","useTokenStakingDetailsAction","stakingAddress","stakedToken","addTransactionWithType","contract","tokenContract","fetchPoolInfo","getPoolInfo","data","minStakeRequiredOf","tokenStaked","apy","closingIn","lockPeriod","minStakeRequired","rewardToken","totalStaked","allowance","isApproved","balanceOf","balance","now","isClosed","toNumber","denom","from","pow","rewardEarned","poolInfo","apr","Number","formatEther","availableTokens","div","approve","estimateGas","toString","gasLimit","tx","type","summary","hash","stake","tokens","parseUnits","unStake","unstake","harvest","withdrawAvailableReward","useFarmAction","nftAddress","posManager","setApprovalForAll","isApprovedContract","isApprovedForAll","fetchNfts","getStakedTokens","fetchBalance","stakers","deposit","nftId","withdraw","emergencyWithdraw","nftIds","pid","liqs","exit","poolIds","encodeData","map","id","encode","pIds","harvestMultiplePools"],"sources":["/Applications/XAMPP/voxel-interface/src/state/nfts/promm/hooks.ts"],"sourcesContent":["import { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { BigNumber,utils } from \"ethers\";\nimport  moment from 'moment';\nimport { useCallback } from \"react\";\nimport { CONTRACT_NOT_FOUND_MSG } from \"constants/messages\";\nimport { useActiveWeb3React } from \"hooks\";\nimport {\n  useNFTStakingContract,\n  useERC721Contract,\n  useTokenContract,\n  useNFTStakingFactoryContract,\n  useTokenStakingFactoryContract,\n  useTokenStakingContract,\n} from \"hooks/useContract\";\n\nimport { useTransactionAdder } from \"state/transactions/hooks\";\n\nimport { calculateGasMargin } from \"utils\";\n\n\nexport const useStakingAction = () => {\n  const { chainId, account } = useActiveWeb3React();\n  const stakingFactory = useNFTStakingFactoryContract();\n\n\n  const fetchPools = useCallback(async () => {\n    if (!stakingFactory) {\n      throw new Error(CONTRACT_NOT_FOUND_MSG);\n    }\n    const allVaults = await stakingFactory.listVaults();\n\n    return allVaults;\n  }, [stakingFactory, chainId]);\n\n  return { fetchPools };\n};\n\nexport const useTokenStakingAction = () => {\n  const { chainId, account } = useActiveWeb3React();\n  const stakingFactory = useTokenStakingFactoryContract();\n\n  const fetchPools = useCallback(async () => {\n    if (!stakingFactory) {\n      throw new Error(CONTRACT_NOT_FOUND_MSG);\n    }\n    const allVaults = await stakingFactory.listVaults();\n    console.log(\"allVaults\", allVaults);\n\n    return allVaults;\n  }, [stakingFactory, chainId]);\n\n  return { fetchPools };\n};\n\n\n function toMonthDaysMinutesSeconds(seconds:any) {\n\n  const date1   = new Date();\n\n  const b = moment(date1),\n      a = moment(b).add(seconds, 'seconds'),\n      intervals = ['years','months','weeks','days'],\n      out = [];\n  for(let i=0; i<intervals.length; i++){\n      let unit: any =intervals[i];\n      const diff = a.diff(b, unit);\n      b.add(diff, unit);\n      if(diff>0){\n        if(diff==1){\n           unit=unit.slice(\"s\", -1); \n        }\n        out.push(diff + ' ' + unit);\n      }\n      \n  }\n  return out.join(', ');\n};\n\n\n\nexport const useTokenStakingDetailsAction= (stakingAddress: string, stakedToken:string)=>{\n  const { chainId, account } = useActiveWeb3React();\n  const addTransactionWithType = useTransactionAdder();\n  const contract = useTokenStakingContract(stakingAddress);\n  const tokenContract =useTokenContract(stakedToken);\n\n  const fetchPoolInfo = useCallback(async () => {\n    if (!contract || !tokenContract) {\n      throw new Error(CONTRACT_NOT_FOUND_MSG);\n    }\n    const data = await contract.getPoolInfo();\n    const tokenStaked=await contract.minStakeRequiredOf(account);\n    const {apy,closingIn,lockPeriod,minStakeRequired,rewardToken,stakedToken,totalStaked}=data[0];\n    const isApproved=await tokenContract.allowance(account, stakingAddress);\n    const balance=await tokenContract.balanceOf(account);\n    const now = Date.now() / 1000\n    const isClosed= (now>closingIn.toNumber())\n    const denom = BigNumber.from(10).pow(16)\n    const rewardEarned=data[1];\n    const poolInfo ={\n      apr:apy.toNumber()/100,\n      closingIn:closingIn.toNumber(),\n      lockPeriod:toMonthDaysMinutesSeconds(lockPeriod.toNumber()),\n      minStakeRequired:Number(utils.formatEther(minStakeRequired)),\n      rewardToken,\n      stakedToken,\n      totalStaked:Number(utils.formatEther(totalStaked)),\n      rewardEarned:Number(utils.formatEther(rewardEarned)),\n      tokenStaked:Number(utils.formatEther(tokenStaked)),\n      availableTokens:balance.div(denom).toNumber(),\n      isClosed:isClosed,\n      isApproved:isApproved.div(denom).toNumber(),\n    };\n    \n    return poolInfo;\n  }, [contract, chainId]);\n\n  const approve = useCallback(async () => {\n    if (!tokenContract) {\n      throw new Error(CONTRACT_NOT_FOUND_MSG);\n    }\n    const balance=await tokenContract.balanceOf(account);\n    const estimateGas = await tokenContract.estimateGas.approve(\n      stakingAddress,\n      balance.toString()\n    );\n    const tx = await tokenContract.approve(stakingAddress, balance.toString(), {\n      gasLimit: calculateGasMargin(estimateGas),\n    });\n    addTransactionWithType(tx, {\n      type: \"Approve\",\n      summary: `Staking contract approved`,\n    });\n\n    return tx.hash;\n  }, [addTransactionWithType, tokenContract]);\n\n  // Deposit\n  const stake = useCallback(\n    async (tokens: string) => {\n      if (!contract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG);\n      }\n\n      tokens=utils.parseUnits(tokens.toString(), 18).toString()\n\n      const estimateGas = await contract.estimateGas.stake(tokens);\n      const tx = await contract.stake(tokens, {\n        gasLimit: calculateGasMargin(estimateGas),\n      });\n      addTransactionWithType(tx, { type: \"Stake\", summary: `Tokens Staked` });\n\n      return tx.hash;\n    },\n    [addTransactionWithType, contract, chainId]\n  );\n\n  const unStake = useCallback(\n    async () => {\n      if (!contract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG);\n      }\n\n      const estimateGas = await contract.estimateGas.unstake();\n      const tx = await contract.unstake({\n        gasLimit: calculateGasMargin(estimateGas),\n      });\n      addTransactionWithType(tx, { type: \"Withdraw\", summary: `Tokens unstaked` });\n\n      return tx.hash;\n    },\n    [addTransactionWithType, contract]\n  );\n\n   const harvest = useCallback(\n    async () => {\n      if (!contract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG);\n      }\n\n      const estimateGas = await contract.estimateGas.withdrawAvailableReward();\n      const tx = await contract.withdrawAvailableReward({\n        gasLimit: calculateGasMargin(estimateGas),\n      });\n      addTransactionWithType(tx, { type: \"Withdraw\", summary: `Harvest Rewards` });\n\n      return tx.hash;\n    },\n    [addTransactionWithType, contract]\n  );\n\n  return { fetchPoolInfo, stake, unStake,approve,harvest };\n\n}\n\nexport const useFarmAction = (stakingAddress: string, nftAddress: string) => {\n  const { chainId, account } = useActiveWeb3React();\n  const addTransactionWithType = useTransactionAdder();\n  const contract = useNFTStakingContract(stakingAddress);\n  const stakingFactory = useNFTStakingFactoryContract();\n  const posManager = useERC721Contract(nftAddress);\n\n  const approve = useCallback(async () => {\n    if (!posManager) {\n      throw new Error(CONTRACT_NOT_FOUND_MSG);\n    }\n    const estimateGas = await posManager.estimateGas.setApprovalForAll(\n      stakingAddress,\n      true\n    );\n    const tx = await posManager.setApprovalForAll(stakingAddress, true, {\n      gasLimit: calculateGasMargin(estimateGas),\n    });\n    addTransactionWithType(tx, {\n      type: \"Approve\",\n      summary: `Staking contract approved`,\n    });\n\n    return tx.hash;\n  }, [addTransactionWithType, nftAddress, posManager]);\n\n  const isApprovedContract = useCallback(async () => {\n    if (!contract || !posManager) {\n      throw new Error(CONTRACT_NOT_FOUND_MSG);\n    }\n\n    const tx = await posManager.isApprovedForAll(account, stakingAddress);\n    console.log(tx);\n    return tx;\n  }, [nftAddress, posManager]);\n\n  const fetchNfts = useCallback(async () => {\n    if (!contract) {\n      throw new Error(CONTRACT_NOT_FOUND_MSG);\n    }\n\n    const tx = await contract.getStakedTokens(account);\n\n    return tx;\n  }, [contract, nftAddress, chainId]);\n\n  const fetchBalance = useCallback(async () => {\n    if (!contract) {\n      throw new Error(CONTRACT_NOT_FOUND_MSG);\n    }\n\n    const tx = await contract.stakers(account);\n\n    return tx?.balance;\n  }, [contract, nftAddress, chainId]);\n\n  // Deposit\n  const deposit = useCallback(\n    async (nftId: string) => {\n      if (!contract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG);\n      }\n\n      const estimateGas = await contract.estimateGas.stake(nftId);\n      const tx = await contract.stake(nftId, {\n        gasLimit: calculateGasMargin(estimateGas),\n      });\n      addTransactionWithType(tx, { type: \"Stake\", summary: `NFT Staked` });\n\n      return tx.hash;\n    },\n    [addTransactionWithType, contract, chainId]\n  );\n\n  const withdraw = useCallback(\n    async (nftId: string) => {\n      if (!contract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG);\n      }\n\n      const estimateGas = await contract.estimateGas.unstake(nftId);\n      const tx = await contract.unstake(nftId, {\n        gasLimit: calculateGasMargin(estimateGas),\n      });\n      addTransactionWithType(tx, { type: \"Withdraw\", summary: `Nft unstaked` });\n\n      return tx.hash;\n    },\n    [addTransactionWithType, contract]\n  );\n\n  const emergencyWithdraw = useCallback(\n    async (nftIds: BigNumber[]) => {\n      if (!contract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG);\n      }\n      const estimateGas = await contract.estimateGas.emergencyWithdraw(nftIds);\n      const tx = await contract.emergencyWithdraw(nftIds, {\n        gasLimit: calculateGasMargin(estimateGas),\n      });\n      addTransactionWithType(tx, { type: \"ForceWithdraw\" });\n\n      return tx.hash;\n    },\n    [addTransactionWithType, contract]\n  );\n\n  const stake = useCallback(\n    async (pid: BigNumber, nftIds: BigNumber[], liqs: BigNumber[]) => {\n      if (!contract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG);\n      }\n\n      const estimateGas = await contract.estimateGas.join(pid, nftIds, liqs);\n      const tx = await contract.join(pid, nftIds, liqs, {\n        gasLimit: calculateGasMargin(estimateGas),\n      });\n      addTransactionWithType(tx, {\n        type: \"Stake\",\n        summary: `liquidity into farm`,\n      });\n\n      return tx.hash;\n    },\n    [addTransactionWithType, contract]\n  );\n\n  const unstake = useCallback(\n    async (pid: BigNumber, nftIds: BigNumber[], liqs: BigNumber[]) => {\n      if (!contract) {\n        throw new Error(CONTRACT_NOT_FOUND_MSG);\n      }\n      try {\n        const estimateGas = await contract.estimateGas.exit(pid, nftIds, liqs);\n        const tx = await contract.exit(pid, nftIds, liqs, {\n          gasLimit: calculateGasMargin(estimateGas),\n        });\n        addTransactionWithType(tx, {\n          type: \"Unstake\",\n          summary: `liquidity from farm`,\n        });\n\n        return tx.hash;\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [addTransactionWithType, contract]\n  );\n\n  const harvest = useCallback(\n    async (nftIds: BigNumber[], poolIds: BigNumber[]) => {\n      if (!contract) return;\n\n      const encodeData = poolIds.map((id) =>\n        defaultAbiCoder.encode([\"tupple(uint256[] pIds)\"], [{ pIds: [id] }])\n      );\n\n      try {\n        const estimateGas = await contract.estimateGas.harvestMultiplePools(\n          nftIds,\n          encodeData\n        );\n        const tx = await contract.harvestMultiplePools(nftIds, encodeData, {\n          gasLimit: calculateGasMargin(estimateGas),\n        });\n        addTransactionWithType(tx, { type: \"Harvest\" });\n        return tx;\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [addTransactionWithType, contract]\n  );\n\n  return {\n    deposit,\n    withdraw,\n    approve,\n    stake,\n    unstake,\n    harvest,\n    emergencyWithdraw,\n    fetchNfts,\n    isApprovedContract,\n    fetchBalance,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}