{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar web3_wrapper_1 = require(\"@0x/web3-wrapper\");\n\nvar subprovider_1 = require(\"./subprovider\");\n/**\n * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine)\n * subprovider interface and the provider sendAsync interface.\n * It handles inconsistencies with Metamask implementations of various JSON RPC methods.\n * It forwards JSON RPC requests involving the domain of a signer (getAccounts,\n * sendTransaction, signMessage etc...) to the provider instance supplied at instantiation. All other requests\n * are passed onwards for subsequent subproviders to handle.\n */\n\n\nvar MetamaskSubprovider =\n/** @class */\nfunction (_super) {\n  __extends(MetamaskSubprovider, _super);\n  /**\n   * Instantiates a new MetamaskSubprovider\n   * @param supportedProvider Web3 provider that should handle  all user account related requests\n   */\n\n\n  function MetamaskSubprovider(supportedProvider) {\n    var _this = _super.call(this) || this;\n\n    var provider = utils_1.providerUtils.standardizeOrThrow(supportedProvider);\n    _this._web3Wrapper = new web3_wrapper_1.Web3Wrapper(provider);\n    _this._provider = provider;\n    return _this;\n  }\n  /**\n   * This method conforms to the web3-provider-engine interface.\n   * It is called internally by the ProviderEngine when it is this subproviders\n   * turn to handle a JSON RPC request.\n   * @param payload JSON RPC payload\n   * @param next Callback to call if this subprovider decides not to handle the request\n   * @param end Callback to call if subprovider handled the request and wants to pass back the request.\n   */\n  // tslint:disable-next-line:prefer-function-over-method async-suffix\n\n\n  MetamaskSubprovider.prototype.handleRequest = function (payload, next, end) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, message, address, _c, nodeVersion, err_1, accounts, err_2, _d, txParams, txData, txHash, err_3, signature, err_4, messageJSON, signature, err_5;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _c = payload.method;\n\n            switch (_c) {\n              case 'web3_clientVersion':\n                return [3\n                /*break*/\n                , 1];\n\n              case 'eth_accounts':\n                return [3\n                /*break*/\n                , 5];\n\n              case 'eth_sendTransaction':\n                return [3\n                /*break*/\n                , 9];\n\n              case 'eth_sign':\n                return [3\n                /*break*/\n                , 14];\n\n              case 'eth_signTypedData':\n                return [3\n                /*break*/\n                , 19];\n\n              case 'eth_signTypedData_v3':\n                return [3\n                /*break*/\n                , 19];\n            }\n\n            return [3\n            /*break*/\n            , 24];\n\n          case 1:\n            _e.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._web3Wrapper.getNodeVersionAsync()];\n\n          case 2:\n            nodeVersion = _e.sent();\n            end(null, nodeVersion);\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _e.sent();\n            end(err_1);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n\n          case 5:\n            _e.trys.push([5, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this._web3Wrapper.getAvailableAddressesAsync()];\n\n          case 6:\n            accounts = _e.sent();\n            end(null, accounts);\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            err_2 = _e.sent();\n            end(err_2);\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n\n          case 9:\n            _d = __read(payload.params, 1), txParams = _d[0];\n            _e.label = 10;\n\n          case 10:\n            _e.trys.push([10, 12,, 13]);\n\n            txData = web3_wrapper_1.marshaller.unmarshalTxData(txParams);\n            return [4\n            /*yield*/\n            , this._web3Wrapper.sendTransactionAsync(txData)];\n\n          case 11:\n            txHash = _e.sent();\n            end(null, txHash);\n            return [3\n            /*break*/\n            , 13];\n\n          case 12:\n            err_3 = _e.sent();\n            end(err_3);\n            return [3\n            /*break*/\n            , 13];\n\n          case 13:\n            return [2\n            /*return*/\n            ];\n\n          case 14:\n            _a = __read(payload.params, 2), address = _a[0], message = _a[1];\n            _e.label = 15;\n\n          case 15:\n            _e.trys.push([15, 17,, 18]);\n\n            return [4\n            /*yield*/\n            , this._web3Wrapper.sendRawPayloadAsync({\n              method: 'personal_sign',\n              params: [message, address]\n            })];\n\n          case 16:\n            signature = _e.sent();\n            signature ? end(null, signature) : end(new Error('Error performing eth_sign'), null);\n            return [3\n            /*break*/\n            , 18];\n\n          case 17:\n            err_4 = _e.sent();\n            end(err_4);\n            return [3\n            /*break*/\n            , 18];\n\n          case 18:\n            return [2\n            /*return*/\n            ];\n\n          case 19:\n            _b = __read(payload.params, 2), address = _b[0], message = _b[1];\n            _e.label = 20;\n\n          case 20:\n            _e.trys.push([20, 22,, 23]);\n\n            messageJSON = JSON.stringify(message);\n            return [4\n            /*yield*/\n            , this._web3Wrapper.sendRawPayloadAsync({\n              method: 'eth_signTypedData_v3',\n              params: [address, messageJSON]\n            })];\n\n          case 21:\n            signature = _e.sent();\n            signature ? end(null, signature) : end(new Error('Error performing eth_signTypedData'), null);\n            return [3\n            /*break*/\n            , 23];\n\n          case 22:\n            err_5 = _e.sent();\n            end(err_5);\n            return [3\n            /*break*/\n            , 23];\n\n          case 23:\n            return [2\n            /*return*/\n            ];\n\n          case 24:\n            next();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * This method conforms to the provider sendAsync interface.\n   * Allowing the MetamaskSubprovider to be used as a generic provider (outside of Web3ProviderEngine) with the\n   * addition of wrapping the inconsistent Metamask behaviour\n   * @param payload JSON RPC payload\n   * @return The contents nested under the result key of the response body\n   */\n\n\n  MetamaskSubprovider.prototype.sendAsync = function (payload, callback) {\n    var _this = this;\n\n    void this.handleRequest(payload, // handleRequest has decided to not handle this, so fall through to the provider\n    function () {\n      var sendAsync = _this._provider.sendAsync.bind(_this._provider);\n\n      sendAsync(payload, callback);\n    }, // handleRequest has called end and will handle this\n    function (err, data) {\n      err ? callback(err) : callback(null, __assign({}, payload, {\n        result: data\n      }));\n    });\n  };\n\n  return MetamaskSubprovider;\n}(subprovider_1.Subprovider);\n\nexports.MetamaskSubprovider = MetamaskSubprovider;","map":null,"metadata":{},"sourceType":"script"}