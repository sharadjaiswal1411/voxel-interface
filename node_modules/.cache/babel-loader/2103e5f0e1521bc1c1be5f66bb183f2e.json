{"ast":null,"code":"import _toConsumableArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\nvar _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nexport var DOTS = '...';\n\nvar range = function range(start, end) {\n  var length = end - start + 1;\n  /*\n  \tCreate an array of certain length and set the elements within it from\n    start value to end value.\n  */\n\n  return Array.from({\n    length: length\n  }, function (_, idx) {\n    return idx + start;\n  });\n};\n\nexport var usePagination = function usePagination(_ref) {\n  _s();\n\n  var totalCount = _ref.totalCount,\n      pageSize = _ref.pageSize,\n      _ref$siblingCount = _ref.siblingCount,\n      siblingCount = _ref$siblingCount === void 0 ? 1 : _ref$siblingCount,\n      currentPage = _ref.currentPage;\n  var paginationRange = useMemo(function () {\n    var totalPageCount = Math.ceil(totalCount / pageSize); // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\n\n    var totalPageNumbers = siblingCount + 5;\n    /*\n      Case 1:\n      If the number of pages is less than the page numbers we want to show in our\n      paginationComponent, we return the range [1..totalPageCount]\n    */\n\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n    /*\n    \tCalculate left and right sibling index and make sure they are within range 1 and totalPageCount\n    */\n\n\n    var leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    var rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n    /*\n      We do not show dots just when there is just one page number to be inserted between the extremes of sibling and the page limits i.e 1 and totalPageCount. Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\n    */\n\n    var shouldShowLeftDots = leftSiblingIndex > 2;\n    var shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n    var firstPageIndex = 1;\n    var lastPageIndex = totalPageCount;\n    /*\n    \tCase 2: No left dots to show, but rights dots to be shown\n    */\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      var leftItemCount = 3 + 2 * siblingCount;\n      var leftRange = range(1, leftItemCount);\n      return [].concat(_toConsumableArray(leftRange), [DOTS, totalPageCount]);\n    }\n    /*\n    \tCase 3: No right dots to show, but left dots to be shown\n    */\n\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      var rightItemCount = 3 + 2 * siblingCount;\n      var rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n      return [firstPageIndex, DOTS].concat(_toConsumableArray(rightRange));\n    }\n    /*\n    \tCase 4: Both left and right dots to be shown\n    */\n\n\n    var middleRange = range(leftSiblingIndex, rightSiblingIndex);\n    return [firstPageIndex, DOTS].concat(_toConsumableArray(middleRange), [DOTS, lastPageIndex]);\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n  return paginationRange;\n};\n\n_s(usePagination, \"tLviJI6rwkyze3+kNwkFLwjvB48=\");","map":{"version":3,"names":["useMemo","DOTS","range","start","end","length","Array","from","_","idx","usePagination","totalCount","pageSize","siblingCount","currentPage","paginationRange","totalPageCount","Math","ceil","totalPageNumbers","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","leftRange","rightItemCount","rightRange","middleRange"],"sources":["/Applications/XAMPP/voxel-interface/src/components/Pagination/usePagination.ts"],"sourcesContent":["import { useMemo } from 'react'\n\nexport const DOTS = '...'\n\nconst range = (start: number, end: number) => {\n  const length = end - start + 1\n  /*\n  \tCreate an array of certain length and set the elements within it from\n    start value to end value.\n  */\n  return Array.from({ length }, (_, idx) => idx + start)\n}\n\nexport const usePagination = ({\n  totalCount,\n  pageSize,\n  siblingCount = 1,\n  currentPage,\n}: {\n  totalCount: number\n  pageSize: number\n  siblingCount?: number\n  currentPage: number\n}) => {\n  const paginationRange = useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize)\n\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\n    const totalPageNumbers = siblingCount + 5\n\n    /*\n      Case 1:\n      If the number of pages is less than the page numbers we want to show in our\n      paginationComponent, we return the range [1..totalPageCount]\n    */\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount)\n    }\n\n    /*\n    \tCalculate left and right sibling index and make sure they are within range 1 and totalPageCount\n    */\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1)\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount)\n\n    /*\n      We do not show dots just when there is just one page number to be inserted between the extremes of sibling and the page limits i.e 1 and totalPageCount. Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\n    */\n    const shouldShowLeftDots = leftSiblingIndex > 2\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2\n\n    const firstPageIndex = 1\n    const lastPageIndex = totalPageCount\n\n    /*\n    \tCase 2: No left dots to show, but rights dots to be shown\n    */\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = 3 + 2 * siblingCount\n      const leftRange = range(1, leftItemCount)\n\n      return [...leftRange, DOTS, totalPageCount]\n    }\n\n    /*\n    \tCase 3: No right dots to show, but left dots to be shown\n    */\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = 3 + 2 * siblingCount\n      const rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount)\n      return [firstPageIndex, DOTS, ...rightRange]\n    }\n\n    /*\n    \tCase 4: Both left and right dots to be shown\n    */\n    const middleRange = range(leftSiblingIndex, rightSiblingIndex)\n    return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex]\n  }, [totalCount, pageSize, siblingCount, currentPage])\n\n  return paginationRange\n}\n"],"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,OAAO,IAAMC,IAAI,GAAG,KAAb;;AAEP,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAgBC,GAAhB,EAAgC;EAC5C,IAAMC,MAAM,GAAGD,GAAG,GAAGD,KAAN,GAAc,CAA7B;EACA;AACF;AACA;AACA;;EACE,OAAOG,KAAK,CAACC,IAAN,CAAW;IAAEF,MAAM,EAANA;EAAF,CAAX,EAAuB,UAACG,CAAD,EAAIC,GAAJ;IAAA,OAAYA,GAAG,GAAGN,KAAlB;EAAA,CAAvB,CAAP;AACD,CAPD;;AASA,OAAO,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,OAUvB;EAAA;;EAAA,IATJC,UASI,QATJA,UASI;EAAA,IARJC,QAQI,QARJA,QAQI;EAAA,6BAPJC,YAOI;EAAA,IAPJA,YAOI,kCAPW,CAOX;EAAA,IANJC,WAMI,QANJA,WAMI;EACJ,IAAMC,eAAe,GAAGf,OAAO,CAAC,YAAM;IACpC,IAAMgB,cAAc,GAAGC,IAAI,CAACC,IAAL,CAAUP,UAAU,GAAGC,QAAvB,CAAvB,CADoC,CAGpC;;IACA,IAAMO,gBAAgB,GAAGN,YAAY,GAAG,CAAxC;IAEA;AACJ;AACA;AACA;AACA;;IACI,IAAIM,gBAAgB,IAAIH,cAAxB,EAAwC;MACtC,OAAOd,KAAK,CAAC,CAAD,EAAIc,cAAJ,CAAZ;IACD;IAED;AACJ;AACA;;;IACI,IAAMI,gBAAgB,GAAGH,IAAI,CAACI,GAAL,CAASP,WAAW,GAAGD,YAAvB,EAAqC,CAArC,CAAzB;IACA,IAAMS,iBAAiB,GAAGL,IAAI,CAACM,GAAL,CAAST,WAAW,GAAGD,YAAvB,EAAqCG,cAArC,CAA1B;IAEA;AACJ;AACA;;IACI,IAAMQ,kBAAkB,GAAGJ,gBAAgB,GAAG,CAA9C;IACA,IAAMK,mBAAmB,GAAGH,iBAAiB,GAAGN,cAAc,GAAG,CAAjE;IAEA,IAAMU,cAAc,GAAG,CAAvB;IACA,IAAMC,aAAa,GAAGX,cAAtB;IAEA;AACJ;AACA;;IACI,IAAI,CAACQ,kBAAD,IAAuBC,mBAA3B,EAAgD;MAC9C,IAAMG,aAAa,GAAG,IAAI,IAAIf,YAA9B;MACA,IAAMgB,SAAS,GAAG3B,KAAK,CAAC,CAAD,EAAI0B,aAAJ,CAAvB;MAEA,oCAAWC,SAAX,IAAsB5B,IAAtB,EAA4Be,cAA5B;IACD;IAED;AACJ;AACA;;;IACI,IAAIQ,kBAAkB,IAAI,CAACC,mBAA3B,EAAgD;MAC9C,IAAMK,cAAc,GAAG,IAAI,IAAIjB,YAA/B;MACA,IAAMkB,UAAU,GAAG7B,KAAK,CAACc,cAAc,GAAGc,cAAjB,GAAkC,CAAnC,EAAsCd,cAAtC,CAAxB;MACA,QAAQU,cAAR,EAAwBzB,IAAxB,4BAAiC8B,UAAjC;IACD;IAED;AACJ;AACA;;;IACI,IAAMC,WAAW,GAAG9B,KAAK,CAACkB,gBAAD,EAAmBE,iBAAnB,CAAzB;IACA,QAAQI,cAAR,EAAwBzB,IAAxB,4BAAiC+B,WAAjC,IAA8C/B,IAA9C,EAAoD0B,aAApD;EACD,CAtD8B,EAsD5B,CAAChB,UAAD,EAAaC,QAAb,EAAuBC,YAAvB,EAAqCC,WAArC,CAtD4B,CAA/B;EAwDA,OAAOC,eAAP;AACD,CApEM;;GAAML,a"},"metadata":{},"sourceType":"module"}