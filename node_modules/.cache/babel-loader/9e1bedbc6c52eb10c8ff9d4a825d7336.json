{"ast":null,"code":"import _defineProperty from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$();\n\nimport { useQuery } from '@apollo/client';\nimport { ChainId } from '@kyberswap/ks-sdk-core';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { POOLS_BULK_FROM_LIST, POOLS_BULK_WITH_PAGINATION, POOLS_HISTORICAL_BULK_FROM_LIST, POOLS_HISTORICAL_BULK_WITH_PAGINATION, POOL_COUNT, POOL_DATA, USER_POSITIONS } from 'apollo/queries';\nimport { NETWORKS_INFO } from 'constants/networks';\nimport { useActiveWeb3React } from 'hooks';\nimport { useETHPrice } from 'state/application/hooks';\nimport { get24hValue, getBlocksFromTimestamps, getPercentChange, getTimestampsForChanges } from 'utils';\nimport { ONLY_DYNAMIC_FEE_CHAINS } from './../../constants/index';\nimport { setError, setLoading, setSharedPoolId, setUrlOnEthPowAck, updatePools } from './actions';\n\n/**\n * Get my liquidity for all pools\n *\n * @param user string\n */\nexport function useUserLiquidityPositions(user) {\n  _s();\n\n  var _useQuery = useQuery(USER_POSITIONS, {\n    variables: {\n      user: user === null || user === void 0 ? void 0 : user.toLowerCase()\n    },\n    fetchPolicy: 'no-cache'\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  return useMemo(function () {\n    return {\n      loading: loading,\n      error: error,\n      data: data\n    };\n  }, [data, error, loading]);\n}\n\n_s(useUserLiquidityPositions, \"UHj/W8o2aBW15HP5WwwjbV96t2c=\", false, function () {\n  return [useQuery];\n});\n\nfunction parseData(data, oneDayData, ethPrice, oneDayBlock, chainId) {\n  // get volume changes\n  var oneDayVolumeUSD = get24hValue(data === null || data === void 0 ? void 0 : data.volumeUSD, oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData.volumeUSD);\n  var oneDayFeeUSD = get24hValue(data === null || data === void 0 ? void 0 : data.feeUSD, oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData.feeUSD);\n  var oneDayVolumeUntracked = get24hValue(data === null || data === void 0 ? void 0 : data.untrackedVolumeUSD, oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData.untrackedVolumeUSD);\n  var oneDayFeeUntracked = get24hValue(data === null || data === void 0 ? void 0 : data.untrackedFeeUSD, oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData.untrackedFeeUSD); // set volume properties\n\n  data.oneDayVolumeUSD = oneDayVolumeUSD;\n  data.oneDayFeeUSD = oneDayFeeUSD;\n  data.oneDayFeeUntracked = oneDayFeeUntracked;\n  data.oneDayVolumeUntracked = oneDayVolumeUntracked; // set liquiditry properties\n\n  data.trackedReserveUSD = data.trackedReserveETH * ethPrice;\n  data.liquidityChangeUSD = getPercentChange(data.reserveUSD, oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData.reserveUSD); // format if pool hasnt existed for a day or a week\n\n  if (!oneDayData && data) {\n    if (data.createdAtBlockNumber > oneDayBlock) data.oneDayVolumeUSD = parseFloat(data.volumeUSD);else data.oneDayVolumeUSD = 0;\n  }\n\n  if (chainId === ChainId.MAINNET) {\n    var _data$token, _data$token2;\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token = data.token0) === null || _data$token === void 0 ? void 0 : _data$token.id) === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') {\n      data.token0 = _objectSpread(_objectSpread({}, data.token0), {}, {\n        name: 'Ether (Wrapped)',\n        symbol: 'ETH'\n      });\n    }\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token2 = data.token1) === null || _data$token2 === void 0 ? void 0 : _data$token2.id) === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') {\n      data.token1 = _objectSpread(_objectSpread({}, data.token1), {}, {\n        name: 'Ether (Wrapped)',\n        symbol: 'ETH'\n      });\n    }\n  }\n\n  if (chainId === ChainId.MATIC) {\n    var _data$token3, _data$token4, _data$token5, _data$token6;\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token3 = data.token0) === null || _data$token3 === void 0 ? void 0 : _data$token3.id) === '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270') {\n      data.token0 = _objectSpread(_objectSpread({}, data.token0), {}, {\n        name: 'Matic (Wrapped)',\n        symbol: 'MATIC'\n      });\n    }\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token4 = data.token1) === null || _data$token4 === void 0 ? void 0 : _data$token4.id) === '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270') {\n      data.token1 = _objectSpread(_objectSpread({}, data.token1), {}, {\n        name: 'Matic (Wrapped)',\n        symbol: 'MATIC'\n      });\n    }\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token5 = data.token0) === null || _data$token5 === void 0 ? void 0 : _data$token5.id) === '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619') {\n      data.token0 = _objectSpread(_objectSpread({}, data.token0), {}, {\n        name: 'Ether (Wrapped)',\n        symbol: 'ETH'\n      });\n    }\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token6 = data.token1) === null || _data$token6 === void 0 ? void 0 : _data$token6.id) === '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619') {\n      data.token1 = _objectSpread(_objectSpread({}, data.token1), {}, {\n        name: 'Ether (Wrapped)',\n        symbol: 'ETH'\n      });\n    }\n  }\n\n  if (chainId === ChainId.BSCMAINNET) {\n    var _data$token7, _data$token8;\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token7 = data.token0) === null || _data$token7 === void 0 ? void 0 : _data$token7.id) === '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c') {\n      data.token0 = _objectSpread(_objectSpread({}, data.token0), {}, {\n        name: 'BNB (Wrapped)',\n        symbol: 'BNB'\n      });\n    }\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token8 = data.token1) === null || _data$token8 === void 0 ? void 0 : _data$token8.id) === '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c') {\n      data.token1 = _objectSpread(_objectSpread({}, data.token1), {}, {\n        name: 'BNB (Wrapped)',\n        symbol: 'BNB'\n      });\n    }\n  }\n\n  if (chainId === ChainId.AVAXMAINNET) {\n    var _data$token9, _data$token10;\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token9 = data.token0) === null || _data$token9 === void 0 ? void 0 : _data$token9.id) === '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7') {\n      data.token0 = _objectSpread(_objectSpread({}, data.token0), {}, {\n        name: 'AVAX (Wrapped)',\n        symbol: 'AVAX'\n      });\n    }\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token10 = data.token1) === null || _data$token10 === void 0 ? void 0 : _data$token10.id) === '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7') {\n      data.token1 = _objectSpread(_objectSpread({}, data.token1), {}, {\n        name: 'AVAX (Wrapped)',\n        symbol: 'AVAX'\n      });\n    }\n  }\n\n  if (chainId === ChainId.CRONOS) {\n    var _data$token11, _data$token12;\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token11 = data.token0) === null || _data$token11 === void 0 ? void 0 : _data$token11.id) === '0x5c7f8a570d578ed84e63fdfa7b1ee72deae1ae23') {\n      data.token0 = _objectSpread(_objectSpread({}, data.token0), {}, {\n        name: 'CRO (Wrapped)',\n        symbol: 'CRO'\n      });\n    }\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token12 = data.token1) === null || _data$token12 === void 0 ? void 0 : _data$token12.id) === '0x5c7f8a570d578ed84e63fdfa7b1ee72deae1ae23') {\n      data.token1 = _objectSpread(_objectSpread({}, data.token1), {}, {\n        name: 'CRO (Wrapped)',\n        symbol: 'CRO'\n      });\n    }\n  }\n\n  if (chainId === ChainId.AURORA) {\n    var _data$token13, _data$token14;\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token13 = data.token0) === null || _data$token13 === void 0 ? void 0 : _data$token13.id) === '0xc9bdeed33cd01541e1eed10f90519d2c06fe3feb') {\n      data.token0 = _objectSpread(_objectSpread({}, data.token0), {}, {\n        name: 'ETH (Wrapped)',\n        symbol: 'ETH'\n      });\n    }\n\n    if ((data === null || data === void 0 ? void 0 : (_data$token14 = data.token1) === null || _data$token14 === void 0 ? void 0 : _data$token14.id) === '0xc9bdeed33cd01541e1eed10f90519d2c06fe3feb') {\n      data.token1 = _objectSpread(_objectSpread({}, data.token1), {}, {\n        name: 'ETH (Wrapped)',\n        symbol: 'ETH'\n      });\n    }\n  }\n\n  return data;\n}\n\nexport function getBulkPoolDataFromPoolList(_x, _x2, _x3, _x4) {\n  return _getBulkPoolDataFromPoolList.apply(this, arguments);\n}\n\nfunction _getBulkPoolDataFromPoolList() {\n  _getBulkPoolDataFromPoolList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(poolList, apolloClient, ethPrice, chainId) {\n    var current, poolData, _getTimestampsForChan, _getTimestampsForChan2, t1, blocks, _oneDayResult$data, _blocks, b1, _yield$Promise$all, _yield$Promise$all2, oneDayResult, oneDayData;\n\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return apolloClient.query({\n              query: POOLS_BULK_FROM_LIST(poolList, chainId && !ONLY_DYNAMIC_FEE_CHAINS.includes(chainId)),\n              fetchPolicy: 'network-only'\n            });\n\n          case 3:\n            current = _context7.sent;\n            _getTimestampsForChan = getTimestampsForChanges(), _getTimestampsForChan2 = _slicedToArray(_getTimestampsForChan, 1), t1 = _getTimestampsForChan2[0];\n            _context7.next = 7;\n            return getBlocksFromTimestamps([t1], chainId);\n\n          case 7:\n            blocks = _context7.sent;\n\n            if (blocks.length) {\n              _context7.next = 12;\n              break;\n            }\n\n            return _context7.abrupt(\"return\", current.data.pools);\n\n          case 12:\n            _blocks = _slicedToArray(blocks, 1), b1 = _blocks[0].number;\n            _context7.next = 15;\n            return Promise.all([b1].map( /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(block) {\n                var result;\n                return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        result = apolloClient.query({\n                          query: POOLS_HISTORICAL_BULK_FROM_LIST(block, poolList, chainId && !ONLY_DYNAMIC_FEE_CHAINS.includes(chainId)),\n                          fetchPolicy: 'network-only'\n                        });\n                        return _context5.abrupt(\"return\", result);\n\n                      case 2:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee5);\n              }));\n\n              return function (_x11) {\n                return _ref3.apply(this, arguments);\n              };\n            }()));\n\n          case 15:\n            _yield$Promise$all = _context7.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 1);\n            oneDayResult = _yield$Promise$all2[0];\n            oneDayData = oneDayResult === null || oneDayResult === void 0 ? void 0 : (_oneDayResult$data = oneDayResult.data) === null || _oneDayResult$data === void 0 ? void 0 : _oneDayResult$data.pools.reduce(function (obj, cur) {\n              return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, cur.id, cur));\n            }, {});\n            _context7.next = 21;\n            return Promise.all(current && current.data.pools.map( /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(pool) {\n                var data, oneDayHistory, newData;\n                return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        data = _objectSpread({}, pool);\n                        oneDayHistory = oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData[pool.id];\n\n                        if (oneDayHistory) {\n                          _context6.next = 7;\n                          break;\n                        }\n\n                        _context6.next = 5;\n                        return apolloClient.query({\n                          query: POOL_DATA(pool.id, b1, chainId && !ONLY_DYNAMIC_FEE_CHAINS.includes(chainId)),\n                          fetchPolicy: 'network-only'\n                        });\n\n                      case 5:\n                        newData = _context6.sent;\n                        oneDayHistory = newData.data.pools[0];\n\n                      case 7:\n                        data = parseData(data, oneDayHistory, ethPrice, b1, chainId);\n                        return _context6.abrupt(\"return\", data);\n\n                      case 9:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, _callee6);\n              }));\n\n              return function (_x12) {\n                return _ref4.apply(this, arguments);\n              };\n            }()));\n\n          case 21:\n            poolData = _context7.sent;\n\n          case 22:\n            return _context7.abrupt(\"return\", poolData);\n\n          case 25:\n            _context7.prev = 25;\n            _context7.t0 = _context7[\"catch\"](0);\n            console.error(_context7.t0);\n            throw _context7.t0;\n\n          case 29:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[0, 25]]);\n  }));\n  return _getBulkPoolDataFromPoolList.apply(this, arguments);\n}\n\nexport function getBulkPoolDataWithPagination(_x5, _x6, _x7, _x8, _x9) {\n  return _getBulkPoolDataWithPagination.apply(this, arguments);\n}\n\nfunction _getBulkPoolDataWithPagination() {\n  _getBulkPoolDataWithPagination = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(first, skip, apolloClient, ethPrice, chainId) {\n    var _oneDayResult$data2, _getTimestampsForChan3, _getTimestampsForChan4, t1, blocks, _ref5, _ref6, b1, _yield$Promise$all3, _yield$Promise$all4, oneDayResult, current, oneDayData, poolData;\n\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            _getTimestampsForChan3 = getTimestampsForChanges(), _getTimestampsForChan4 = _slicedToArray(_getTimestampsForChan3, 1), t1 = _getTimestampsForChan4[0];\n            _context10.next = 4;\n            return getBlocksFromTimestamps([t1], chainId);\n\n          case 4:\n            blocks = _context10.sent;\n            // In case we can't get the block one day ago then we set it to 0 which is fine\n            // because our subgraph never syncs from block 0 => response is empty\n            _ref5 = blocks.length ? blocks : [{\n              number: 0\n            }], _ref6 = _slicedToArray(_ref5, 1), b1 = _ref6[0].number;\n            _context10.next = 8;\n            return Promise.all([b1].map( /*#__PURE__*/function () {\n              var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(block) {\n                var result;\n                return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                  while (1) {\n                    switch (_context8.prev = _context8.next) {\n                      case 0:\n                        result = apolloClient.query({\n                          query: POOLS_HISTORICAL_BULK_WITH_PAGINATION(first, skip, block, chainId && !ONLY_DYNAMIC_FEE_CHAINS.includes(chainId)),\n                          fetchPolicy: 'network-only'\n                        }).catch(function (err) {\n                          return err;\n                        });\n                        return _context8.abrupt(\"return\", result);\n\n                      case 2:\n                      case \"end\":\n                        return _context8.stop();\n                    }\n                  }\n                }, _callee8);\n              }));\n\n              return function (_x13) {\n                return _ref7.apply(this, arguments);\n              };\n            }()).concat(apolloClient.query({\n              query: POOLS_BULK_WITH_PAGINATION(first, skip, chainId && !ONLY_DYNAMIC_FEE_CHAINS.includes(chainId)),\n              fetchPolicy: 'network-only'\n            })));\n\n          case 8:\n            _yield$Promise$all3 = _context10.sent;\n            _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2);\n            oneDayResult = _yield$Promise$all4[0];\n            current = _yield$Promise$all4[1];\n            oneDayData = oneDayResult === null || oneDayResult === void 0 ? void 0 : (_oneDayResult$data2 = oneDayResult.data) === null || _oneDayResult$data2 === void 0 ? void 0 : _oneDayResult$data2.pools.reduce(function (obj, cur) {\n              return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, cur.id, cur));\n            }, {});\n            _context10.next = 15;\n            return Promise.all(current && current.data.pools.map( /*#__PURE__*/function () {\n              var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(pool) {\n                var data, oneDayHistory;\n                return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n                  while (1) {\n                    switch (_context9.prev = _context9.next) {\n                      case 0:\n                        data = _objectSpread({}, pool);\n                        oneDayHistory = oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData[pool.id]; // TODO nguyenhuudungz: If number of pools > 1000 then uncomment this.\n                        // if (!oneDayHistory) {\n                        //   const newData = await apolloClient.query({\n                        //     query: POOL_DATA(pool.id, b1),\n                        //     fetchPolicy: 'network-only'\n                        //   })\n                        //   oneDayHistory = newData.data.pools[0]\n                        // }\n\n                        data = parseData(data, oneDayHistory, ethPrice, b1, chainId);\n                        return _context9.abrupt(\"return\", data);\n\n                      case 4:\n                      case \"end\":\n                        return _context9.stop();\n                    }\n                  }\n                }, _callee9);\n              }));\n\n              return function (_x14) {\n                return _ref8.apply(this, arguments);\n              };\n            }()));\n\n          case 15:\n            poolData = _context10.sent;\n            return _context10.abrupt(\"return\", poolData);\n\n          case 19:\n            _context10.prev = 19;\n            _context10.t0 = _context10[\"catch\"](0);\n            console.error(_context10.t0);\n            throw _context10.t0;\n\n          case 23:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[0, 19]]);\n  }));\n  return _getBulkPoolDataWithPagination.apply(this, arguments);\n}\n\nexport function useResetPools(chainId) {\n  _s2();\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    dispatch(updatePools({\n      pools: []\n    }));\n    dispatch(setError(undefined));\n  }, [chainId, dispatch]);\n}\n\n_s2(useResetPools, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n\nexport function usePoolCountInSubgraph() {\n  _s3();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      poolCount = _useState2[0],\n      setPoolCount = _useState2[1];\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      chainId = _useActiveWeb3React.chainId;\n\n  var apolloClient = NETWORKS_INFO[chainId || ChainId.MAINNET].classicClient;\n  useEffect(function () {\n    var getPoolCount = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return apolloClient.query({\n                  query: POOL_COUNT,\n                  fetchPolicy: 'network-only'\n                });\n\n              case 2:\n                result = _context.sent;\n                setPoolCount((result === null || result === void 0 ? void 0 : result.data.dmmFactories.reduce(function (count, factory) {\n                  return count + factory.poolCount;\n                }, 0)) || 0);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getPoolCount() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    getPoolCount();\n  }, [apolloClient]);\n  return poolCount;\n}\n\n_s3(usePoolCountInSubgraph, \"oYyAdXDCJmzM8RCyl+mseQbDA7k=\", false, function () {\n  return [useActiveWeb3React];\n});\n\nexport function useAllPoolsData() {\n  _s4();\n\n  var dispatch = useDispatch();\n\n  var _useActiveWeb3React2 = useActiveWeb3React(),\n      chainId = _useActiveWeb3React2.chainId;\n\n  var apolloClient = NETWORKS_INFO[chainId || ChainId.MAINNET].classicClient;\n  var poolsData = useSelector(function (state) {\n    return state.pools.pools;\n  });\n  var loading = useSelector(function (state) {\n    return state.pools.loading;\n  });\n  var error = useSelector(function (state) {\n    return state.pools.error;\n  });\n\n  var _useETHPrice = useETHPrice(),\n      ethPrice = _useETHPrice.currentPrice;\n\n  var poolCountSubgraph = usePoolCountInSubgraph();\n  useEffect(function () {\n    var cancelled = false;\n\n    var getPoolsData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n\n                if (!(poolCountSubgraph > 0 && poolsData.length === 0 && !error && ethPrice)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.delegateYield( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                  var ITEM_PER_CHUNK, promises, _loop, i, j, pools;\n\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          dispatch(setLoading(true));\n                          ITEM_PER_CHUNK = Math.min(1000, poolCountSubgraph); // GraphNode can handle max 1000 records per query.\n\n                          promises = [];\n\n                          _loop = function _loop(i, j) {\n                            promises.push(function () {\n                              return getBulkPoolDataWithPagination(ITEM_PER_CHUNK, i, apolloClient, ethPrice, chainId);\n                            });\n                          };\n\n                          for (i = 0, j = poolCountSubgraph; i < j; i += ITEM_PER_CHUNK) {\n                            _loop(i, j);\n                          }\n\n                          _context2.next = 7;\n                          return Promise.all(promises.map(function (callback) {\n                            return callback();\n                          }));\n\n                        case 7:\n                          pools = _context2.sent.flat();\n                          !cancelled && dispatch(updatePools({\n                            pools: pools\n                          }));\n                          !cancelled && dispatch(setLoading(false));\n\n                        case 10:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                })(), \"t0\", 3);\n\n              case 3:\n                _context3.next = 9;\n                break;\n\n              case 5:\n                _context3.prev = 5;\n                _context3.t1 = _context3[\"catch\"](0);\n                !cancelled && dispatch(setError(_context3.t1));\n                !cancelled && dispatch(setLoading(false));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 5]]);\n      }));\n\n      return function getPoolsData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    getPoolsData();\n    return function () {\n      cancelled = true;\n    };\n  }, [apolloClient, chainId, dispatch, error, ethPrice, poolCountSubgraph, poolsData.length]);\n  return useMemo(function () {\n    return {\n      loading: loading,\n      error: error,\n      data: poolsData\n    };\n  }, [error, loading, poolsData]);\n}\n\n_s4(useAllPoolsData, \"hJgzX3pPDvAlDeaLxYT63WxMMTs=\", false, function () {\n  return [useDispatch, useActiveWeb3React, useSelector, useSelector, useSelector, useETHPrice, usePoolCountInSubgraph];\n});\n\nexport function useSelectedPool() {\n  _s5();\n\n  return useSelector(function (state) {\n    return state.pools.selectedPool;\n  });\n}\n\n_s5(useSelectedPool, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useSinglePoolData(poolAddress, ethPrice) {\n  _s6();\n\n  var _useActiveWeb3React3 = useActiveWeb3React(),\n      chainId = _useActiveWeb3React3.chainId;\n\n  var apolloClient = NETWORKS_INFO[chainId || ChainId.MAINNET].classicClient;\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      poolData = _useState8[0],\n      setPoolData = _useState8[1];\n\n  var latestRenderTime = useRef(0);\n  useEffect(function () {\n    function checkForPools(_x10) {\n      return _checkForPools.apply(this, arguments);\n    }\n\n    function _checkForPools() {\n      _checkForPools = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(currentRenderTime) {\n        var pools;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                setLoading(true);\n                _context4.prev = 1;\n\n                if (!(poolAddress && !error)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 5;\n                return getBulkPoolDataFromPoolList([poolAddress], apolloClient, ethPrice, chainId);\n\n              case 5:\n                pools = _context4.sent;\n\n                if (pools.length > 0) {\n                  currentRenderTime === latestRenderTime.current && setPoolData(pools[0]);\n                }\n\n              case 7:\n                _context4.next = 12;\n                break;\n\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](1);\n                currentRenderTime === latestRenderTime.current && setError(_context4.t0);\n\n              case 12:\n                setLoading(false);\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[1, 9]]);\n      }));\n      return _checkForPools.apply(this, arguments);\n    }\n\n    checkForPools(latestRenderTime.current);\n    return function () {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      latestRenderTime.current++;\n    };\n  }, [ethPrice, error, poolAddress, apolloClient, chainId]);\n  return {\n    loading: loading,\n    error: error,\n    data: poolData\n  };\n}\n\n_s6(useSinglePoolData, \"Y+Tq1YZWCX1UCAVxzD4bqm59Nuo=\", false, function () {\n  return [useActiveWeb3React];\n});\n\nexport function useSharedPoolIdManager() {\n  _s7();\n\n  var dispatch = useDispatch();\n  var sharedPoolId = useSelector(function (state) {\n    return state.pools.sharedPoolId;\n  });\n  var onSetSharedPoolId = useCallback(function (newSharedPoolId) {\n    dispatch(setSharedPoolId({\n      poolId: newSharedPoolId\n    }));\n  }, [dispatch]);\n  return useMemo(function () {\n    return [sharedPoolId, onSetSharedPoolId];\n  }, [onSetSharedPoolId, sharedPoolId]);\n}\n\n_s7(useSharedPoolIdManager, \"3JOJrZyWwJyWqrcPiCVLeKSjeUI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport var useUrlOnEthPowAck = function useUrlOnEthPowAck() {\n  _s8();\n\n  var dispatch = useDispatch();\n  var url = useSelector(function (state) {\n    return state.pools.urlOnEthPoWAckModal;\n  });\n  var setUrl = useCallback(function (url) {\n    dispatch(setUrlOnEthPowAck(url));\n  }, [dispatch]);\n  return [url, setUrl];\n};\n\n_s8(useUrlOnEthPowAck, \"x2YWNSMJu0p3CY0nDWDgLUNCiPU=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"names":["useQuery","ChainId","useCallback","useEffect","useMemo","useRef","useState","useDispatch","useSelector","POOLS_BULK_FROM_LIST","POOLS_BULK_WITH_PAGINATION","POOLS_HISTORICAL_BULK_FROM_LIST","POOLS_HISTORICAL_BULK_WITH_PAGINATION","POOL_COUNT","POOL_DATA","USER_POSITIONS","NETWORKS_INFO","useActiveWeb3React","useETHPrice","get24hValue","getBlocksFromTimestamps","getPercentChange","getTimestampsForChanges","ONLY_DYNAMIC_FEE_CHAINS","setError","setLoading","setSharedPoolId","setUrlOnEthPowAck","updatePools","useUserLiquidityPositions","user","variables","toLowerCase","fetchPolicy","loading","error","data","parseData","oneDayData","ethPrice","oneDayBlock","chainId","oneDayVolumeUSD","volumeUSD","oneDayFeeUSD","feeUSD","oneDayVolumeUntracked","untrackedVolumeUSD","oneDayFeeUntracked","untrackedFeeUSD","trackedReserveUSD","trackedReserveETH","liquidityChangeUSD","reserveUSD","createdAtBlockNumber","parseFloat","MAINNET","token0","id","name","symbol","token1","MATIC","BSCMAINNET","AVAXMAINNET","CRONOS","AURORA","getBulkPoolDataFromPoolList","poolList","apolloClient","query","includes","current","t1","blocks","length","pools","b1","number","Promise","all","map","block","result","oneDayResult","reduce","obj","cur","pool","oneDayHistory","newData","poolData","console","getBulkPoolDataWithPagination","first","skip","catch","err","concat","useResetPools","dispatch","undefined","usePoolCountInSubgraph","poolCount","setPoolCount","classicClient","getPoolCount","dmmFactories","count","factory","useAllPoolsData","poolsData","state","currentPrice","poolCountSubgraph","cancelled","getPoolsData","ITEM_PER_CHUNK","Math","min","promises","i","j","push","callback","flat","useSelectedPool","selectedPool","useSinglePoolData","poolAddress","setPoolData","latestRenderTime","checkForPools","currentRenderTime","useSharedPoolIdManager","sharedPoolId","onSetSharedPoolId","newSharedPoolId","poolId","useUrlOnEthPowAck","url","urlOnEthPoWAckModal","setUrl"],"sources":["/Applications/XAMPP/voxel-interface/src/state/pools/hooks.ts"],"sourcesContent":["import { ApolloClient, NormalizedCacheObject, useQuery } from '@apollo/client'\nimport { ChainId } from '@kyberswap/ks-sdk-core'\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n  POOLS_BULK_FROM_LIST,\n  POOLS_BULK_WITH_PAGINATION,\n  POOLS_HISTORICAL_BULK_FROM_LIST,\n  POOLS_HISTORICAL_BULK_WITH_PAGINATION,\n  POOL_COUNT,\n  POOL_DATA,\n  USER_POSITIONS,\n} from 'apollo/queries'\nimport { NETWORKS_INFO } from 'constants/networks'\nimport { useActiveWeb3React } from 'hooks'\nimport { useETHPrice } from 'state/application/hooks'\nimport { get24hValue, getBlocksFromTimestamps, getPercentChange, getTimestampsForChanges } from 'utils'\n\nimport { AppState } from '../index'\nimport { ONLY_DYNAMIC_FEE_CHAINS } from './../../constants/index'\nimport { setError, setLoading, setSharedPoolId, setUrlOnEthPowAck, updatePools } from './actions'\n\nexport interface SubgraphPoolData {\n  id: string\n  amp: string\n  fee: number\n  reserve0: string\n  reserve1: string\n  vReserve0: string\n  vReserve1: string\n  totalSupply: string\n  reserveUSD: string\n  volumeUSD: string\n  feeUSD: string\n  oneDayVolumeUSD: string\n  oneDayVolumeUntracked: string\n  oneDayFeeUSD: string\n  oneDayFeeUntracked: string\n  token0: {\n    id: string\n    symbol: string\n    name: string\n    decimals: string\n    totalLiquidity: string\n    derivedETH: string\n  }\n  token1: {\n    id: string\n    symbol: string\n    name: string\n    decimals: string\n    totalLiquidity: string\n    derivedETH: string\n  }\n}\n\nexport interface UserLiquidityPosition {\n  id: string\n  liquidityTokenBalance: string\n  pool: {\n    id: string\n    token0: {\n      id: string\n    }\n    token1: {\n      id: string\n    }\n    reserveUSD: string\n    totalSupply: string\n  }\n}\n\nexport interface UserLiquidityPositionResult {\n  loading: boolean\n  error: any\n  data: {\n    liquidityPositions: UserLiquidityPosition[]\n  }\n}\n\n/**\n * Get my liquidity for all pools\n *\n * @param user string\n */\nexport function useUserLiquidityPositions(user: string | null | undefined): UserLiquidityPositionResult {\n  const { loading, error, data } = useQuery(USER_POSITIONS, {\n    variables: {\n      user: user?.toLowerCase(),\n    },\n    fetchPolicy: 'no-cache',\n  })\n\n  return useMemo(() => ({ loading, error, data }), [data, error, loading])\n}\n\nfunction parseData(data: any, oneDayData: any, ethPrice: any, oneDayBlock: any, chainId?: ChainId): SubgraphPoolData {\n  // get volume changes\n  const oneDayVolumeUSD = get24hValue(data?.volumeUSD, oneDayData?.volumeUSD)\n  const oneDayFeeUSD = get24hValue(data?.feeUSD, oneDayData?.feeUSD)\n  const oneDayVolumeUntracked = get24hValue(data?.untrackedVolumeUSD, oneDayData?.untrackedVolumeUSD)\n  const oneDayFeeUntracked = get24hValue(data?.untrackedFeeUSD, oneDayData?.untrackedFeeUSD)\n\n  // set volume properties\n  data.oneDayVolumeUSD = oneDayVolumeUSD\n  data.oneDayFeeUSD = oneDayFeeUSD\n  data.oneDayFeeUntracked = oneDayFeeUntracked\n  data.oneDayVolumeUntracked = oneDayVolumeUntracked\n\n  // set liquiditry properties\n  data.trackedReserveUSD = data.trackedReserveETH * ethPrice\n  data.liquidityChangeUSD = getPercentChange(data.reserveUSD, oneDayData?.reserveUSD)\n\n  // format if pool hasnt existed for a day or a week\n  if (!oneDayData && data) {\n    if (data.createdAtBlockNumber > oneDayBlock) data.oneDayVolumeUSD = parseFloat(data.volumeUSD)\n    else data.oneDayVolumeUSD = 0\n  }\n\n  if (chainId === ChainId.MAINNET) {\n    if (data?.token0?.id === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') {\n      data.token0 = { ...data.token0, name: 'Ether (Wrapped)', symbol: 'ETH' }\n    }\n\n    if (data?.token1?.id === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') {\n      data.token1 = { ...data.token1, name: 'Ether (Wrapped)', symbol: 'ETH' }\n    }\n  }\n\n  if (chainId === ChainId.MATIC) {\n    if (data?.token0?.id === '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270') {\n      data.token0 = { ...data.token0, name: 'Matic (Wrapped)', symbol: 'MATIC' }\n    }\n\n    if (data?.token1?.id === '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270') {\n      data.token1 = { ...data.token1, name: 'Matic (Wrapped)', symbol: 'MATIC' }\n    }\n\n    if (data?.token0?.id === '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619') {\n      data.token0 = { ...data.token0, name: 'Ether (Wrapped)', symbol: 'ETH' }\n    }\n\n    if (data?.token1?.id === '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619') {\n      data.token1 = { ...data.token1, name: 'Ether (Wrapped)', symbol: 'ETH' }\n    }\n  }\n\n  if (chainId === ChainId.BSCMAINNET) {\n    if (data?.token0?.id === '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c') {\n      data.token0 = { ...data.token0, name: 'BNB (Wrapped)', symbol: 'BNB' }\n    }\n\n    if (data?.token1?.id === '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c') {\n      data.token1 = { ...data.token1, name: 'BNB (Wrapped)', symbol: 'BNB' }\n    }\n  }\n\n  if (chainId === ChainId.AVAXMAINNET) {\n    if (data?.token0?.id === '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7') {\n      data.token0 = { ...data.token0, name: 'AVAX (Wrapped)', symbol: 'AVAX' }\n    }\n\n    if (data?.token1?.id === '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7') {\n      data.token1 = { ...data.token1, name: 'AVAX (Wrapped)', symbol: 'AVAX' }\n    }\n  }\n\n  if (chainId === ChainId.CRONOS) {\n    if (data?.token0?.id === '0x5c7f8a570d578ed84e63fdfa7b1ee72deae1ae23') {\n      data.token0 = { ...data.token0, name: 'CRO (Wrapped)', symbol: 'CRO' }\n    }\n\n    if (data?.token1?.id === '0x5c7f8a570d578ed84e63fdfa7b1ee72deae1ae23') {\n      data.token1 = { ...data.token1, name: 'CRO (Wrapped)', symbol: 'CRO' }\n    }\n  }\n\n  if (chainId === ChainId.AURORA) {\n    if (data?.token0?.id === '0xc9bdeed33cd01541e1eed10f90519d2c06fe3feb') {\n      data.token0 = { ...data.token0, name: 'ETH (Wrapped)', symbol: 'ETH' }\n    }\n\n    if (data?.token1?.id === '0xc9bdeed33cd01541e1eed10f90519d2c06fe3feb') {\n      data.token1 = { ...data.token1, name: 'ETH (Wrapped)', symbol: 'ETH' }\n    }\n  }\n\n  return data\n}\n\nexport async function getBulkPoolDataFromPoolList(\n  poolList: string[],\n  apolloClient: ApolloClient<NormalizedCacheObject>,\n  ethPrice?: string,\n  chainId?: ChainId,\n): Promise<any> {\n  try {\n    const current = await apolloClient.query({\n      query: POOLS_BULK_FROM_LIST(poolList, chainId && !ONLY_DYNAMIC_FEE_CHAINS.includes(chainId)),\n      fetchPolicy: 'network-only',\n    })\n    let poolData\n    const [t1] = getTimestampsForChanges()\n    const blocks = await getBlocksFromTimestamps([t1], chainId)\n    if (!blocks.length) {\n      return current.data.pools\n    } else {\n      const [{ number: b1 }] = blocks\n\n      const [oneDayResult] = await Promise.all(\n        [b1].map(async block => {\n          const result = apolloClient.query({\n            query: POOLS_HISTORICAL_BULK_FROM_LIST(\n              block,\n              poolList,\n              chainId && !ONLY_DYNAMIC_FEE_CHAINS.includes(chainId),\n            ),\n            fetchPolicy: 'network-only',\n          })\n          return result\n        }),\n      )\n\n      const oneDayData = oneDayResult?.data?.pools.reduce((obj: any, cur: any) => {\n        return { ...obj, [cur.id]: cur }\n      }, {})\n\n      poolData = await Promise.all(\n        current &&\n          current.data.pools.map(async (pool: any) => {\n            let data = { ...pool }\n            let oneDayHistory = oneDayData?.[pool.id]\n            if (!oneDayHistory) {\n              const newData = await apolloClient.query({\n                query: POOL_DATA(pool.id, b1, chainId && !ONLY_DYNAMIC_FEE_CHAINS.includes(chainId)),\n                fetchPolicy: 'network-only',\n              })\n              oneDayHistory = newData.data.pools[0]\n            }\n\n            data = parseData(data, oneDayHistory, ethPrice, b1, chainId)\n\n            return data\n          }),\n      )\n    }\n\n    return poolData\n  } catch (e) {\n    console.error(e)\n    throw e\n  }\n}\n\nexport async function getBulkPoolDataWithPagination(\n  first: number,\n  skip: number,\n  apolloClient: ApolloClient<NormalizedCacheObject>,\n  ethPrice?: string,\n  chainId?: ChainId,\n): Promise<any> {\n  try {\n    const [t1] = getTimestampsForChanges()\n    const blocks = await getBlocksFromTimestamps([t1], chainId)\n\n    // In case we can't get the block one day ago then we set it to 0 which is fine\n    // because our subgraph never syncs from block 0 => response is empty\n    const [{ number: b1 }] = blocks.length ? blocks : [{ number: 0 }]\n    const [oneDayResult, current] = await Promise.all(\n      [b1]\n        .map(async block => {\n          const result = apolloClient\n            .query({\n              query: POOLS_HISTORICAL_BULK_WITH_PAGINATION(\n                first,\n                skip,\n                block,\n                chainId && !ONLY_DYNAMIC_FEE_CHAINS.includes(chainId),\n              ),\n              fetchPolicy: 'network-only',\n            })\n            .catch(err => {\n              return err\n            })\n          return result\n        })\n        .concat(\n          apolloClient.query({\n            query: POOLS_BULK_WITH_PAGINATION(first, skip, chainId && !ONLY_DYNAMIC_FEE_CHAINS.includes(chainId)),\n            fetchPolicy: 'network-only',\n          }),\n        ),\n    )\n\n    const oneDayData = oneDayResult?.data?.pools.reduce((obj: any, cur: any) => {\n      return { ...obj, [cur.id]: cur }\n    }, {})\n\n    const poolData = await Promise.all(\n      current &&\n        current.data.pools.map(async (pool: any) => {\n          let data = { ...pool }\n          const oneDayHistory = oneDayData?.[pool.id]\n          // TODO nguyenhuudungz: If number of pools > 1000 then uncomment this.\n          // if (!oneDayHistory) {\n          //   const newData = await apolloClient.query({\n          //     query: POOL_DATA(pool.id, b1),\n          //     fetchPolicy: 'network-only'\n          //   })\n          //   oneDayHistory = newData.data.pools[0]\n          // }\n\n          data = parseData(data, oneDayHistory, ethPrice, b1, chainId)\n\n          return data\n        }),\n    )\n\n    return poolData\n  } catch (e) {\n    console.error(e)\n    throw e\n  }\n}\n\nexport function useResetPools(chainId: ChainId | undefined) {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(updatePools({ pools: [] }))\n    dispatch(setError(undefined))\n  }, [chainId, dispatch])\n}\n\nexport function usePoolCountInSubgraph(): number {\n  const [poolCount, setPoolCount] = useState(0)\n  const { chainId } = useActiveWeb3React()\n  const apolloClient = NETWORKS_INFO[chainId || ChainId.MAINNET].classicClient\n\n  useEffect(() => {\n    const getPoolCount = async () => {\n      const result = await apolloClient.query({\n        query: POOL_COUNT,\n        fetchPolicy: 'network-only',\n      })\n      setPoolCount(\n        result?.data.dmmFactories.reduce((count: number, factory: { poolCount: number }) => {\n          return count + factory.poolCount\n        }, 0) || 0,\n      )\n    }\n\n    getPoolCount()\n  }, [apolloClient])\n\n  return poolCount\n}\n\nexport function useAllPoolsData(): {\n  loading: AppState['pools']['loading']\n  error: AppState['pools']['error']\n  data: AppState['pools']['pools']\n} {\n  const dispatch = useDispatch()\n  const { chainId } = useActiveWeb3React()\n  const apolloClient = NETWORKS_INFO[chainId || ChainId.MAINNET].classicClient\n\n  const poolsData = useSelector((state: AppState) => state.pools.pools)\n  const loading = useSelector((state: AppState) => state.pools.loading)\n  const error = useSelector((state: AppState) => state.pools.error)\n\n  const { currentPrice: ethPrice } = useETHPrice()\n\n  const poolCountSubgraph = usePoolCountInSubgraph()\n  useEffect(() => {\n    let cancelled = false\n\n    const getPoolsData = async () => {\n      try {\n        if (poolCountSubgraph > 0 && poolsData.length === 0 && !error && ethPrice) {\n          dispatch(setLoading(true))\n          const ITEM_PER_CHUNK = Math.min(1000, poolCountSubgraph) // GraphNode can handle max 1000 records per query.\n          const promises = []\n          for (let i = 0, j = poolCountSubgraph; i < j; i += ITEM_PER_CHUNK) {\n            promises.push(() => getBulkPoolDataWithPagination(ITEM_PER_CHUNK, i, apolloClient, ethPrice, chainId))\n          }\n          const pools = (await Promise.all(promises.map(callback => callback()))).flat()\n          !cancelled && dispatch(updatePools({ pools }))\n          !cancelled && dispatch(setLoading(false))\n        }\n      } catch (error) {\n        !cancelled && dispatch(setError(error as Error))\n        !cancelled && dispatch(setLoading(false))\n      }\n    }\n\n    getPoolsData()\n\n    return () => {\n      cancelled = true\n    }\n  }, [apolloClient, chainId, dispatch, error, ethPrice, poolCountSubgraph, poolsData.length])\n\n  return useMemo(() => ({ loading, error, data: poolsData }), [error, loading, poolsData])\n}\n\nexport function useSelectedPool() {\n  return useSelector((state: AppState) => state.pools.selectedPool)\n}\n\nexport function useSinglePoolData(\n  poolAddress: string | undefined,\n  ethPrice?: string,\n): {\n  loading: boolean\n  error?: Error\n  data?: SubgraphPoolData\n} {\n  const { chainId } = useActiveWeb3React()\n  const apolloClient = NETWORKS_INFO[chainId || ChainId.MAINNET].classicClient\n\n  const [loading, setLoading] = useState<boolean>(false)\n  const [error, setError] = useState<Error | undefined>(undefined)\n  const [poolData, setPoolData] = useState<SubgraphPoolData>()\n\n  const latestRenderTime = useRef(0)\n  useEffect(() => {\n    async function checkForPools(currentRenderTime: number) {\n      setLoading(true)\n\n      try {\n        if (poolAddress && !error) {\n          const pools = await getBulkPoolDataFromPoolList([poolAddress], apolloClient, ethPrice, chainId)\n\n          if (pools.length > 0) {\n            currentRenderTime === latestRenderTime.current && setPoolData(pools[0])\n          }\n        }\n      } catch (error) {\n        currentRenderTime === latestRenderTime.current && setError(error as Error)\n      }\n\n      setLoading(false)\n    }\n\n    checkForPools(latestRenderTime.current)\n\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      latestRenderTime.current++\n    }\n  }, [ethPrice, error, poolAddress, apolloClient, chainId])\n\n  return { loading, error, data: poolData }\n}\n\nexport function useSharedPoolIdManager(): [string | undefined, (newSharedPoolId: string | undefined) => void] {\n  const dispatch = useDispatch()\n  const sharedPoolId = useSelector((state: AppState) => state.pools.sharedPoolId)\n\n  const onSetSharedPoolId = useCallback(\n    (newSharedPoolId: string | undefined) => {\n      dispatch(setSharedPoolId({ poolId: newSharedPoolId }))\n    },\n    [dispatch],\n  )\n\n  return useMemo(() => [sharedPoolId, onSetSharedPoolId], [onSetSharedPoolId, sharedPoolId])\n}\n\nexport const useUrlOnEthPowAck = (): [string, (url: string) => void] => {\n  const dispatch = useDispatch()\n  const url = useSelector((state: AppState) => state.pools.urlOnEthPoWAckModal)\n\n  const setUrl = useCallback(\n    (url: string) => {\n      dispatch(setUrlOnEthPowAck(url))\n    },\n    [dispatch],\n  )\n\n  return [url, setUrl]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}