{"ast":null,"code":"import _classCallCheck from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { logger } from '@sentry/utils';\n/** Deduplication filter */\n\nvar Dedupe = /*#__PURE__*/function () {\n  function Dedupe() {\n    _classCallCheck(this, Dedupe);\n\n    Dedupe.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(Dedupe, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Dedupe.id;\n    }\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {\n      var eventProcessor = function eventProcessor(currentEvent) {\n        var self = getCurrentHub().getIntegration(Dedupe);\n\n        if (self) {\n          // Juuust in case something goes wrong\n          try {\n            if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n              (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n              return null;\n            }\n          } catch (_oO) {\n            return self._previousEvent = currentEvent;\n          }\n\n          return self._previousEvent = currentEvent;\n        }\n\n        return currentEvent;\n      };\n\n      eventProcessor.id = this.name;\n      addGlobalEventProcessor(eventProcessor);\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'Dedupe';\n    }\n  }]);\n\n  return Dedupe;\n}();\n\nDedupe.__initStatic();\n/** JSDoc */\n\n\nfunction _shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n/** JSDoc */\n\n\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  var currentMessage = currentEvent.message;\n  var previousMessage = previousEvent.message; // If neither event has a message property, they were both exceptions, so bail out\n\n  if (!currentMessage && !previousMessage) {\n    return false;\n  } // If only one event has a stacktrace, but not the other one, they are not the same\n\n\n  if (currentMessage && !previousMessage || !currentMessage && previousMessage) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n/** JSDoc */\n\n\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  var previousException = _getExceptionFromEvent(previousEvent);\n\n  var currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n/** JSDoc */\n\n\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  var currentFrames = _getFramesFromEvent(currentEvent);\n\n  var previousFrames = _getFramesFromEvent(previousEvent); // If neither event has a stacktrace, they are assumed to be the same\n\n\n  if (!currentFrames && !previousFrames) {\n    return true;\n  } // If only one event has a stacktrace, but not the other one, they are not the same\n\n\n  if (currentFrames && !previousFrames || !currentFrames && previousFrames) {\n    return false;\n  }\n\n  currentFrames = currentFrames;\n  previousFrames = previousFrames; // If number of frames differ, they are not the same\n\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  } // Otherwise, compare the two\n\n\n  for (var i = 0; i < previousFrames.length; i++) {\n    var frameA = previousFrames[i];\n    var frameB = currentFrames[i];\n\n    if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/** JSDoc */\n\n\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  var currentFingerprint = currentEvent.fingerprint;\n  var previousFingerprint = previousEvent.fingerprint; // If neither event has a fingerprint, they are assumed to be the same\n\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  } // If only one event has a fingerprint, but not the other one, they are not the same\n\n\n  if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint;\n  previousFingerprint = previousFingerprint; // Otherwise, compare the two\n\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n/** JSDoc */\n\n\nfunction _getExceptionFromEvent(event) {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n/** JSDoc */\n\n\nfunction _getFramesFromEvent(event) {\n  var exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n\n  return undefined;\n}\n\nexport { Dedupe };","map":null,"metadata":{},"sourceType":"module"}