{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nexport var CampaignStatus;\n\n(function (CampaignStatus) {\n  CampaignStatus[\"ONGOING\"] = \"Ongoing\";\n  CampaignStatus[\"UPCOMING\"] = \"Upcoming\";\n  CampaignStatus[\"ENDED\"] = \"Ended\";\n})(CampaignStatus || (CampaignStatus = {}));\n\nexport var CampaignState;\n\n(function (CampaignState) {\n  CampaignState[CampaignState[\"CampaignStateReady\"] = 0] = \"CampaignStateReady\";\n  CampaignState[CampaignState[\"CampaignStateFinalizedLeaderboard\"] = 1] = \"CampaignStateFinalizedLeaderboard\";\n  CampaignState[CampaignState[\"CampaignStateDistributedRewards\"] = 2] = \"CampaignStateDistributedRewards\";\n})(CampaignState || (CampaignState = {}));\n\nexport var CampaignUserInfoStatus;\n\n(function (CampaignUserInfoStatus) {\n  CampaignUserInfoStatus[\"Eligible\"] = \"ELIGIBLE\";\n  CampaignUserInfoStatus[\"Ineligible\"] = \"INELIGIBLE\";\n  CampaignUserInfoStatus[\"Banned\"] = \"BANNED\";\n})(CampaignUserInfoStatus || (CampaignUserInfoStatus = {}));\n\nexport var setCampaignData = createAction('campaigns/setCampaignData');\nexport var setLoadingCampaignData = createAction('campaigns/setLoadingCampaignData');\nexport var setLoadingCampaignDataError = createAction('campaigns/setLoadingCampaignDataError');\nexport var setSelectedCampaign = createAction('campaigns/setSelectedCampaign');\nexport var setSelectedCampaignLeaderboard = createAction('campaigns/setSelectedCampaignLeaderboard');\nexport var setLoadingSelectedCampaignLeaderboard = createAction('campaigns/setLoadingSelectedCampaignLeaderboard');\nexport var setSelectedCampaignLeaderboardPageNumber = createAction('campaigns/setSelectedCampaignLeaderboardPageNumber');\nexport var setSelectedCampaignLeaderboardLookupAddress = createAction('campaigns/setSelectedCampaignLeaderboardLookupAddress');\nexport var setClaimingCampaignRewardId = createAction('campaigns/setClaimingCampaignRewardId');\nexport var setSelectedCampaignLuckyWinners = createAction('campaigns/setSelectedCampaignLuckyWinners');\nexport var setLoadingSelectedCampaignLuckyWinners = createAction('campaigns/setLoadingSelectedCampaignLuckyWinners');\nexport var setSelectedCampaignLuckyWinnersPageNumber = createAction('campaigns/setSelectedCampaignLuckyWinnersPageNumber');\nexport var setSelectedCampaignLuckyWinnersLookupAddress = createAction('campaigns/setSelectedCampaignLuckyWinnersLookupAddress');\nexport var setRecaptchaCampaignId = createAction('campaigns/setRecaptchaCampaignId');\nexport var setRecaptchaCampaignLoading = createAction('campaigns/setRecaptchaCampaignLoading');","map":{"version":3,"names":["createAction","CampaignStatus","CampaignState","CampaignUserInfoStatus","setCampaignData","setLoadingCampaignData","setLoadingCampaignDataError","setSelectedCampaign","setSelectedCampaignLeaderboard","setLoadingSelectedCampaignLeaderboard","setSelectedCampaignLeaderboardPageNumber","setSelectedCampaignLeaderboardLookupAddress","setClaimingCampaignRewardId","setSelectedCampaignLuckyWinners","setLoadingSelectedCampaignLuckyWinners","setSelectedCampaignLuckyWinnersPageNumber","setSelectedCampaignLuckyWinnersLookupAddress","setRecaptchaCampaignId","setRecaptchaCampaignLoading"],"sources":["/Applications/XAMPP/voxel-interface/src/state/campaigns/actions.ts"],"sourcesContent":["import { ChainId, Fraction } from '@kyberswap/ks-sdk-core'\nimport { createAction } from '@reduxjs/toolkit'\n\nimport { SerializedToken } from 'state/user/actions'\n\nexport enum CampaignStatus {\n  ONGOING = 'Ongoing',\n  UPCOMING = 'Upcoming',\n  ENDED = 'Ended',\n}\n\nexport enum CampaignState {\n  CampaignStateReady,\n  CampaignStateFinalizedLeaderboard,\n  CampaignStateDistributedRewards,\n}\n\nexport enum CampaignUserInfoStatus {\n  Eligible = 'ELIGIBLE',\n  Ineligible = 'INELIGIBLE',\n  Banned = 'BANNED',\n}\n\nexport type CampaignUserInfo = {\n  address: string\n  tradingVolume: number\n  tradingNumber: number\n  rankNo: number\n  status: CampaignUserInfoStatus\n}\n\nexport type RewardSingle = {\n  type: 'Single'\n  amount: string\n  token: SerializedToken\n  rewardInUSD: boolean\n  rank: number\n}\n\nexport type RewardRange = {\n  type: 'Range'\n  amount: string\n  token: SerializedToken\n  rewardInUSD: boolean\n  from: number\n  to: number\n}\n\nexport type RewardRandom = {\n  type: 'Random'\n  amount: string\n  token: SerializedToken\n  rewardInUSD: boolean\n  from?: number\n  to?: number\n  nWinners?: number\n}\n\nexport type RewardDistribution = RewardSingle | RewardRange | RewardRandom\n\nexport interface CampaignLeaderboardRanking {\n  userAddress: string\n  totalPoint: number\n  rankNo: number\n  rewardAmount: Fraction\n  rewardAmountUsd: Fraction\n  rewardInUSD: boolean\n  token: SerializedToken\n}\n\nexport interface CampaignLeaderboardReward {\n  rewardAmount: Fraction\n  ref: string\n  claimed: boolean\n  token: SerializedToken\n}\n\nexport interface CampaignLeaderboard {\n  numberOfEligibleParticipants: number\n  userRank: number\n  finalizedAt: number\n  distributedRewardsAt: number\n  rankings: CampaignLeaderboardRanking[]\n  rewards: CampaignLeaderboardReward[]\n}\n\nexport interface CampaignLuckyWinner {\n  userAddress: string\n  rewardAmount: Fraction\n  token: SerializedToken\n}\n\nexport interface CampaignData {\n  id: number\n  name: string\n  startTime: number\n  endTime: number\n  desktopBanner: string\n  mobileBanner: string\n  status: CampaignStatus\n  rules: string\n  termsAndConditions: string\n  otherDetails: string\n  rewardDetails: string\n  isRewardShown: boolean\n  enterNowUrl: string\n  rewardDistribution: RewardDistribution[]\n  campaignState: CampaignState\n  eligibleTokens: SerializedToken[]\n  chainIds: string\n  rewardChainIds: string\n  tradingVolumeRequired: number\n  userInfo?: CampaignUserInfo\n  tradingNumberRequired: number\n  leaderboard: CampaignLeaderboard | undefined\n}\n\nexport interface CampaignProofData {\n  id: number\n  chainId: ChainId\n  txPoint: string\n  utcTimestamp: number\n  txHash: string\n}\n\nexport const setCampaignData = createAction<{ campaigns: CampaignData[] }>('campaigns/setCampaignData')\nexport const setLoadingCampaignData = createAction<boolean>('campaigns/setLoadingCampaignData')\nexport const setLoadingCampaignDataError = createAction<Error | undefined>('campaigns/setLoadingCampaignDataError')\n\nexport const setSelectedCampaign = createAction<{ campaign: CampaignData }>('campaigns/setSelectedCampaign')\n\nexport const setSelectedCampaignLeaderboard = createAction<{ leaderboard: CampaignLeaderboard }>(\n  'campaigns/setSelectedCampaignLeaderboard',\n)\nexport const setLoadingSelectedCampaignLeaderboard = createAction<boolean>(\n  'campaigns/setLoadingSelectedCampaignLeaderboard',\n)\nexport const setSelectedCampaignLeaderboardPageNumber = createAction<number>(\n  'campaigns/setSelectedCampaignLeaderboardPageNumber',\n)\nexport const setSelectedCampaignLeaderboardLookupAddress = createAction<string>(\n  'campaigns/setSelectedCampaignLeaderboardLookupAddress',\n)\n\nexport const setClaimingCampaignRewardId = createAction<number | null>('campaigns/setClaimingCampaignRewardId')\n\nexport const setSelectedCampaignLuckyWinners = createAction<{ luckyWinners: CampaignLuckyWinner[] }>(\n  'campaigns/setSelectedCampaignLuckyWinners',\n)\nexport const setLoadingSelectedCampaignLuckyWinners = createAction<boolean>(\n  'campaigns/setLoadingSelectedCampaignLuckyWinners',\n)\nexport const setSelectedCampaignLuckyWinnersPageNumber = createAction<number>(\n  'campaigns/setSelectedCampaignLuckyWinnersPageNumber',\n)\nexport const setSelectedCampaignLuckyWinnersLookupAddress = createAction<string>(\n  'campaigns/setSelectedCampaignLuckyWinnersLookupAddress',\n)\n\nexport const setRecaptchaCampaignId = createAction<number | undefined>('campaigns/setRecaptchaCampaignId')\nexport const setRecaptchaCampaignLoading = createAction<boolean>('campaigns/setRecaptchaCampaignLoading')\n"],"mappings":"AACA,SAASA,YAAT,QAA6B,kBAA7B;AAIA,WAAYC,cAAZ;;WAAYA,c;EAAAA,c;EAAAA,c;EAAAA,c;GAAAA,c,KAAAA,c;;AAMZ,WAAYC,aAAZ;;WAAYA,a;EAAAA,a,CAAAA,a;EAAAA,a,CAAAA,a;EAAAA,a,CAAAA,a;GAAAA,a,KAAAA,a;;AAMZ,WAAYC,sBAAZ;;WAAYA,sB;EAAAA,sB;EAAAA,sB;EAAAA,sB;GAAAA,sB,KAAAA,sB;;AA4GZ,OAAO,IAAMC,eAAe,GAAGJ,YAAY,CAAgC,2BAAhC,CAApC;AACP,OAAO,IAAMK,sBAAsB,GAAGL,YAAY,CAAU,kCAAV,CAA3C;AACP,OAAO,IAAMM,2BAA2B,GAAGN,YAAY,CAAoB,uCAApB,CAAhD;AAEP,OAAO,IAAMO,mBAAmB,GAAGP,YAAY,CAA6B,+BAA7B,CAAxC;AAEP,OAAO,IAAMQ,8BAA8B,GAAGR,YAAY,CACxD,0CADwD,CAAnD;AAGP,OAAO,IAAMS,qCAAqC,GAAGT,YAAY,CAC/D,iDAD+D,CAA1D;AAGP,OAAO,IAAMU,wCAAwC,GAAGV,YAAY,CAClE,oDADkE,CAA7D;AAGP,OAAO,IAAMW,2CAA2C,GAAGX,YAAY,CACrE,uDADqE,CAAhE;AAIP,OAAO,IAAMY,2BAA2B,GAAGZ,YAAY,CAAgB,uCAAhB,CAAhD;AAEP,OAAO,IAAMa,+BAA+B,GAAGb,YAAY,CACzD,2CADyD,CAApD;AAGP,OAAO,IAAMc,sCAAsC,GAAGd,YAAY,CAChE,kDADgE,CAA3D;AAGP,OAAO,IAAMe,yCAAyC,GAAGf,YAAY,CACnE,qDADmE,CAA9D;AAGP,OAAO,IAAMgB,4CAA4C,GAAGhB,YAAY,CACtE,wDADsE,CAAjE;AAIP,OAAO,IAAMiB,sBAAsB,GAAGjB,YAAY,CAAqB,kCAArB,CAA3C;AACP,OAAO,IAAMkB,2BAA2B,GAAGlB,YAAY,CAAU,uCAAV,CAAhD"},"metadata":{},"sourceType":"module"}