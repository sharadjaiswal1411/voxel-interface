{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar _defineProperty = require(\"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\n\nvar _classCallCheck = require(\"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletSDKConnection = void 0;\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar Session_1 = require(\"../relay/Session\");\n\nvar types_1 = require(\"../types\");\n\nvar ClientMessage_1 = require(\"./ClientMessage\");\n\nvar DiagnosticLogger_1 = require(\"./DiagnosticLogger\");\n\nvar RxWebSocket_1 = require(\"./RxWebSocket\");\n\nvar ServerMessage_1 = require(\"./ServerMessage\");\n\nvar HEARTBEAT_INTERVAL = 10000;\nvar REQUEST_TIMEOUT = 60000;\n/**\n * Coinbase Wallet Connection\n */\n\nvar WalletSDKConnection = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param sessionId Session ID\n   * @param sessionKey Session Key\n   * @param linkAPIUrl Coinbase Wallet link server URL\n   * @param [WebSocketClass] Custom WebSocket implementation\n   */\n  function WalletSDKConnection(sessionId, sessionKey, linkAPIUrl, diagnostic) {\n    var _this = this;\n\n    var WebSocketClass = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : WebSocket;\n\n    _classCallCheck(this, WalletSDKConnection);\n\n    this.sessionId = sessionId;\n    this.sessionKey = sessionKey;\n    this.diagnostic = diagnostic;\n    this.subscriptions = new rxjs_1.Subscription();\n    this.destroyed = false;\n    this.lastHeartbeatResponse = 0;\n    this.nextReqId = (0, types_1.IntNumber)(1);\n    this.connectedSubject = new rxjs_1.BehaviorSubject(false);\n    this.linkedSubject = new rxjs_1.BehaviorSubject(false);\n    this.sessionConfigSubject = new rxjs_1.ReplaySubject(1);\n    var ws = new RxWebSocket_1.RxWebSocket(linkAPIUrl + \"/rpc\", WebSocketClass);\n    this.ws = ws; // attempt to reconnect every 5 seconds when disconnected\n\n    this.subscriptions.add(ws.connectionState$.pipe((0, operators_1.tap)(function (state) {\n      var _a;\n\n      return (_a = _this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.CONNECTED_STATE_CHANGE, {\n        state: state,\n        sessionIdHash: Session_1.Session.hash(sessionId)\n      });\n    }), // ignore initial DISCONNECTED state\n    (0, operators_1.skip)(1), // if DISCONNECTED and not destroyed\n    (0, operators_1.filter)(function (cs) {\n      return cs === RxWebSocket_1.ConnectionState.DISCONNECTED && !_this.destroyed;\n    }), // wait 5 seconds\n    (0, operators_1.delay)(5000), // check whether it's destroyed again\n    (0, operators_1.filter)(function (_) {\n      return !_this.destroyed;\n    }), // reconnect\n    (0, operators_1.flatMap)(function (_) {\n      return ws.connect();\n    }), (0, operators_1.retry)()).subscribe()); // perform authentication upon connection\n\n    this.subscriptions.add(ws.connectionState$.pipe( // ignore initial DISCONNECTED and CONNECTING states\n    (0, operators_1.skip)(2), (0, operators_1.switchMap)(function (cs) {\n      return (0, rxjs_1.iif)(function () {\n        return cs === RxWebSocket_1.ConnectionState.CONNECTED;\n      }, // if CONNECTED, authenticate, and then check link status\n      _this.authenticate().pipe((0, operators_1.tap)(function (_) {\n        return _this.sendIsLinked();\n      }), (0, operators_1.tap)(function (_) {\n        return _this.sendGetSessionConfig();\n      }), (0, operators_1.map)(function (_) {\n        return true;\n      })), // if not CONNECTED, emit false immediately\n      (0, rxjs_1.of)(false));\n    }), (0, operators_1.distinctUntilChanged)(), (0, operators_1.catchError)(function (_) {\n      return (0, rxjs_1.of)(false);\n    })).subscribe(function (connected) {\n      return _this.connectedSubject.next(connected);\n    })); // send heartbeat every n seconds while connected\n\n    this.subscriptions.add(ws.connectionState$.pipe( // ignore initial DISCONNECTED state\n    (0, operators_1.skip)(1), (0, operators_1.switchMap)(function (cs) {\n      return (0, rxjs_1.iif)(function () {\n        return cs === RxWebSocket_1.ConnectionState.CONNECTED;\n      }, // if CONNECTED, start the heartbeat timer\n      (0, rxjs_1.timer)(0, HEARTBEAT_INTERVAL));\n    })).subscribe(function (i) {\n      return (// first timer event updates lastHeartbeat timestamp\n        // subsequent calls send heartbeat message\n        i === 0 ? _this.updateLastHeartbeat() : _this.heartbeat()\n      );\n    })); // handle server's heartbeat responses\n\n    this.subscriptions.add(ws.incomingData$.pipe((0, operators_1.filter)(function (m) {\n      return m === \"h\";\n    })).subscribe(function (_) {\n      return _this.updateLastHeartbeat();\n    })); // handle link status updates\n\n    this.subscriptions.add(ws.incomingJSONData$.pipe((0, operators_1.filter)(function (m) {\n      return [\"IsLinkedOK\", \"Linked\"].includes(m.type);\n    })).subscribe(function (m) {\n      var _a;\n\n      var msg = m;\n      (_a = _this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.LINKED, {\n        sessionIdHash: Session_1.Session.hash(sessionId),\n        linked: msg.linked,\n        type: m.type,\n        onlineGuests: msg.onlineGuests\n      });\n\n      _this.linkedSubject.next(msg.linked || msg.onlineGuests > 0);\n    })); // handle session config updates\n\n    this.subscriptions.add(ws.incomingJSONData$.pipe((0, operators_1.filter)(function (m) {\n      return [\"GetSessionConfigOK\", \"SessionConfigUpdated\"].includes(m.type);\n    })).subscribe(function (m) {\n      var _a;\n\n      var msg = m;\n      (_a = _this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.SESSION_CONFIG_RECEIVED, {\n        sessionIdHash: Session_1.Session.hash(sessionId),\n        metadata_keys: msg && msg.metadata ? Object.keys(msg.metadata) : undefined\n      });\n\n      _this.sessionConfigSubject.next({\n        webhookId: msg.webhookId,\n        webhookUrl: msg.webhookUrl,\n        metadata: msg.metadata\n      });\n    }));\n  }\n  /**\n   * Make a connection to the server\n   */\n\n\n  _createClass(WalletSDKConnection, [{\n    key: \"connect\",\n    value: function connect() {\n      var _a;\n\n      if (this.destroyed) {\n        throw new Error(\"instance is destroyed\");\n      }\n\n      (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.STARTED_CONNECTING, {\n        sessionIdHash: Session_1.Session.hash(this.sessionId)\n      });\n      this.ws.connect().subscribe();\n    }\n    /**\n     * Terminate connection, and mark as destroyed. To reconnect, create a new\n     * instance of WalletSDKConnection\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _a;\n\n      this.subscriptions.unsubscribe();\n      this.ws.disconnect();\n      (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.DISCONNECTED, {\n        sessionIdHash: Session_1.Session.hash(this.sessionId)\n      });\n      this.destroyed = true;\n    }\n  }, {\n    key: \"isDestroyed\",\n    get: function get() {\n      return this.destroyed;\n    }\n    /**\n     * Emit true if connected and authenticated, else false\n     * @returns an Observable\n     */\n\n  }, {\n    key: \"connected$\",\n    get: function get() {\n      return this.connectedSubject.asObservable();\n    }\n    /**\n     * Emit once connected\n     * @returns an Observable\n     */\n\n  }, {\n    key: \"onceConnected$\",\n    get: function get() {\n      return this.connected$.pipe((0, operators_1.filter)(function (v) {\n        return v;\n      }), (0, operators_1.take)(1), (0, operators_1.map)(function () {\n        return void 0;\n      }));\n    }\n    /**\n     * Emit true if linked (a guest has joined before)\n     * @returns an Observable\n     */\n\n  }, {\n    key: \"linked$\",\n    get: function get() {\n      return this.linkedSubject.asObservable();\n    }\n    /**\n     * Emit once when linked\n     * @returns an Observable\n     */\n\n  }, {\n    key: \"onceLinked$\",\n    get: function get() {\n      return this.linked$.pipe((0, operators_1.filter)(function (v) {\n        return v;\n      }), (0, operators_1.take)(1), (0, operators_1.map)(function () {\n        return void 0;\n      }));\n    }\n    /**\n     * Emit current session config if available, and subsequent updates\n     * @returns an Observable for the session config\n     */\n\n  }, {\n    key: \"sessionConfig$\",\n    get: function get() {\n      return this.sessionConfigSubject.asObservable();\n    }\n    /**\n     * Emit incoming Event messages\n     * @returns an Observable for the messages\n     */\n\n  }, {\n    key: \"incomingEvent$\",\n    get: function get() {\n      return this.ws.incomingJSONData$.pipe((0, operators_1.filter)(function (m) {\n        if (m.type !== \"Event\") {\n          return false;\n        }\n\n        var sme = m;\n        return typeof sme.sessionId === \"string\" && typeof sme.eventId === \"string\" && typeof sme.event === \"string\" && typeof sme.data === \"string\";\n      }), (0, operators_1.map)(function (m) {\n        return m;\n      }));\n    }\n    /**\n     * Set session metadata in SessionConfig object\n     * @param key\n     * @param value\n     * @returns an Observable that completes when successful\n     */\n\n  }, {\n    key: \"setSessionMetadata\",\n    value: function setSessionMetadata(key, value) {\n      var _this2 = this;\n\n      var message = (0, ClientMessage_1.ClientMessageSetSessionConfig)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId,\n        metadata: _defineProperty({}, key, value)\n      });\n      return this.onceConnected$.pipe((0, operators_1.flatMap)(function (_) {\n        return _this2.makeRequest(message);\n      }), (0, operators_1.map)(function (res) {\n        if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n          throw new Error(res.error || \"failed to set session metadata\");\n        }\n      }));\n    }\n    /**\n     * Publish an event and emit event ID when successful\n     * @param event event name\n     * @param data event data\n     * @param callWebhook whether the webhook should be invoked\n     * @returns an Observable that emits event ID when successful\n     */\n\n  }, {\n    key: \"publishEvent\",\n    value: function publishEvent(event, data) {\n      var _this3 = this;\n\n      var callWebhook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var message = (0, ClientMessage_1.ClientMessagePublishEvent)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId,\n        event: event,\n        data: data,\n        callWebhook: callWebhook\n      });\n      return this.onceLinked$.pipe((0, operators_1.flatMap)(function (_) {\n        return _this3.makeRequest(message);\n      }), (0, operators_1.map)(function (res) {\n        if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n          throw new Error(res.error || \"failed to publish event\");\n        }\n\n        return res.eventId;\n      }));\n    }\n  }, {\n    key: \"sendData\",\n    value: function sendData(message) {\n      this.ws.sendData(JSON.stringify(message));\n    }\n  }, {\n    key: \"updateLastHeartbeat\",\n    value: function updateLastHeartbeat() {\n      this.lastHeartbeatResponse = Date.now();\n    }\n  }, {\n    key: \"heartbeat\",\n    value: function heartbeat() {\n      if (Date.now() - this.lastHeartbeatResponse > HEARTBEAT_INTERVAL * 2) {\n        this.ws.disconnect();\n        return;\n      }\n\n      try {\n        this.ws.sendData(\"h\");\n      } catch (_a) {}\n    }\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(message) {\n      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : REQUEST_TIMEOUT;\n      var reqId = message.id;\n\n      try {\n        this.sendData(message);\n      } catch (err) {\n        return (0, rxjs_1.throwError)(err);\n      } // await server message with corresponding id\n\n\n      return this.ws.incomingJSONData$.pipe((0, operators_1.timeoutWith)(timeout, (0, rxjs_1.throwError)(new Error(\"request \".concat(reqId, \" timed out\")))), (0, operators_1.filter)(function (m) {\n        return m.id === reqId;\n      }), (0, operators_1.take)(1));\n    }\n  }, {\n    key: \"authenticate\",\n    value: function authenticate() {\n      var msg = (0, ClientMessage_1.ClientMessageHostSession)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId,\n        sessionKey: this.sessionKey\n      });\n      return this.makeRequest(msg).pipe((0, operators_1.map)(function (res) {\n        if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n          throw new Error(res.error || \"failed to authentcate\");\n        }\n      }));\n    }\n  }, {\n    key: \"sendIsLinked\",\n    value: function sendIsLinked() {\n      var msg = (0, ClientMessage_1.ClientMessageIsLinked)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId\n      });\n      this.sendData(msg);\n    }\n  }, {\n    key: \"sendGetSessionConfig\",\n    value: function sendGetSessionConfig() {\n      var msg = (0, ClientMessage_1.ClientMessageGetSessionConfig)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId\n      });\n      this.sendData(msg);\n    }\n  }]);\n\n  return WalletSDKConnection;\n}();\n\nexports.WalletSDKConnection = WalletSDKConnection;","map":null,"metadata":{},"sourceType":"script"}