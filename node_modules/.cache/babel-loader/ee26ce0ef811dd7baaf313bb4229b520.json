{"ast":null,"code":"import _createForOfIteratorHelper from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _assertThisInitialized from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _classCallCheck from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { timestampWithMs, logger } from '@sentry/utils';\nimport { SpanRecorder } from './span.js';\nimport { Transaction } from './transaction.js';\nvar DEFAULT_IDLE_TIMEOUT = 1000;\nvar DEFAULT_FINAL_TIMEOUT = 30000;\nvar HEARTBEAT_INTERVAL = 5000;\n/**\n * @inheritDoc\n */\n\nvar IdleTransactionSpanRecorder = /*#__PURE__*/function (_SpanRecorder) {\n  _inherits(IdleTransactionSpanRecorder, _SpanRecorder);\n\n  var _super = _createSuper(IdleTransactionSpanRecorder);\n\n  function IdleTransactionSpanRecorder(_pushActivity, _popActivity, transactionSpanId, maxlen) {\n    var _this;\n\n    _classCallCheck(this, IdleTransactionSpanRecorder);\n\n    _this = _super.call(this, maxlen);\n    _this._pushActivity = _pushActivity;\n    _this._popActivity = _popActivity;\n    _this.transactionSpanId = transactionSpanId;\n    ;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(IdleTransactionSpanRecorder, [{\n    key: \"add\",\n    value: function add(span) {\n      var _this2 = this;\n\n      // We should make sure we do not push and pop activities for\n      // the transaction that this span recorder belongs to.\n      if (span.spanId !== this.transactionSpanId) {\n        // We patch span.finish() to pop an activity after setting an endTimestamp.\n        span.finish = function (endTimestamp) {\n          span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n\n          _this2._popActivity(span.spanId);\n        }; // We should only push new activities if the span does not have an end timestamp.\n\n\n        if (span.endTimestamp === undefined) {\n          this._pushActivity(span.spanId);\n        }\n      }\n\n      _get(_getPrototypeOf(IdleTransactionSpanRecorder.prototype), \"add\", this).call(this, span);\n    }\n  }]);\n\n  return IdleTransactionSpanRecorder;\n}(SpanRecorder);\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\n\n\nvar IdleTransaction = /*#__PURE__*/function (_Transaction) {\n  _inherits(IdleTransaction, _Transaction);\n\n  var _super2 = _createSuper(IdleTransaction);\n\n  /**\n   * Timer that tracks Transaction idleTimeout\n   */\n  function IdleTransaction(transactionContext, _idleHub) {\n    var _this3;\n\n    var _idleTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_IDLE_TIMEOUT;\n\n    var _finalTimeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_FINAL_TIMEOUT;\n\n    var _onScope = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, IdleTransaction);\n\n    _this3 = _super2.call(this, transactionContext, _idleHub);\n    _this3._idleHub = _idleHub;\n    _this3._idleTimeout = _idleTimeout;\n    _this3._finalTimeout = _finalTimeout;\n    _this3._onScope = _onScope;\n\n    IdleTransaction.prototype.__init.call(_assertThisInitialized(_this3));\n\n    IdleTransaction.prototype.__init2.call(_assertThisInitialized(_this3));\n\n    IdleTransaction.prototype.__init3.call(_assertThisInitialized(_this3));\n\n    IdleTransaction.prototype.__init4.call(_assertThisInitialized(_this3));\n\n    ;\n\n    if (_onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub); // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(\"Setting idle transaction on scope. Span ID: \".concat(_this3.spanId));\n\n      _idleHub.configureScope(function (scope) {\n        return scope.setSpan(_assertThisInitialized(_this3));\n      });\n    }\n\n    _this3._startIdleTimeout();\n\n    setTimeout(function () {\n      if (!_this3._finished) {\n        _this3.setStatus('deadline_exceeded');\n\n        _this3.finish();\n      }\n    }, _this3._finalTimeout);\n    return _this3;\n  }\n  /** {@inheritDoc} */\n\n\n  _createClass(IdleTransaction, [{\n    key: \"__init\",\n    value: // Activities store a list of active spans\n    function __init() {\n      this.activities = {};\n    } // Track state of activities in previous heartbeat\n    // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._heartbeatCounter = 0;\n    } // We should not use heartbeat if we finished a transaction\n\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this._finished = false;\n    }\n  }, {\n    key: \"__init4\",\n    value: function __init4() {\n      this._beforeFinishCallbacks = [];\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      var _this4 = this;\n\n      var endTimestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : timestampWithMs();\n      this._finished = true;\n      this.activities = {};\n\n      if (this.spanRecorder) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n        var _iterator = _createForOfIteratorHelper(this._beforeFinishCallbacks),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var callback = _step.value;\n            callback(this, endTimestamp);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this.spanRecorder.spans = this.spanRecorder.spans.filter(function (span) {\n          // If we are dealing with the transaction itself, we just return it\n          if (span.spanId === _this4.spanId) {\n            return true;\n          } // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n\n\n          if (!span.endTimestamp) {\n            span.endTimestamp = endTimestamp;\n            span.setStatus('cancelled');\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n          }\n\n          var keepSpan = span.startTimestamp < endTimestamp;\n\n          if (!keepSpan) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] discarding Span since it happened after Transaction was finished', JSON.stringify(span, undefined, 2));\n          }\n\n          return keepSpan;\n        });\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] flushing IdleTransaction');\n      } else {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] No active IdleTransaction');\n      } // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n\n\n      if (this._onScope) {\n        clearActiveTransaction(this._idleHub);\n      }\n\n      return _get(_getPrototypeOf(IdleTransaction.prototype), \"finish\", this).call(this, endTimestamp);\n    }\n    /**\n     * Register a callback function that gets excecuted before the transaction finishes.\n     * Useful for cleanup or if you want to add any additional spans based on current context.\n     *\n     * This is exposed because users have no other way of running something before an idle transaction\n     * finishes.\n     */\n\n  }, {\n    key: \"registerBeforeFinishCallback\",\n    value: function registerBeforeFinishCallback(callback) {\n      this._beforeFinishCallbacks.push(callback);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"initSpanRecorder\",\n    value: function initSpanRecorder(maxlen) {\n      var _this5 = this;\n\n      if (!this.spanRecorder) {\n        var pushActivity = function pushActivity(id) {\n          if (_this5._finished) {\n            return;\n          }\n\n          _this5._pushActivity(id);\n        };\n\n        var popActivity = function popActivity(id) {\n          if (_this5._finished) {\n            return;\n          }\n\n          _this5._popActivity(id);\n        };\n\n        this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen); // Start heartbeat so that transactions do not run forever.\n\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Starting heartbeat');\n\n        this._pingHeartbeat();\n      }\n\n      this.spanRecorder.add(this);\n    }\n    /**\n     * Cancels the existing idletimeout, if there is one\n     */\n\n  }, {\n    key: \"_cancelIdleTimeout\",\n    value: function _cancelIdleTimeout() {\n      if (this._idleTimeoutID) {\n        clearTimeout(this._idleTimeoutID);\n        this._idleTimeoutID = undefined;\n      }\n    }\n    /**\n     * Creates an idletimeout\n     */\n\n  }, {\n    key: \"_startIdleTimeout\",\n    value: function _startIdleTimeout(endTimestamp) {\n      var _this6 = this;\n\n      this._cancelIdleTimeout();\n\n      this._idleTimeoutID = setTimeout(function () {\n        if (!_this6._finished && Object.keys(_this6.activities).length === 0) {\n          _this6.finish(endTimestamp);\n        }\n      }, this._idleTimeout);\n    }\n    /**\n     * Start tracking a specific activity.\n     * @param spanId The span id that represents the activity\n     */\n\n  }, {\n    key: \"_pushActivity\",\n    value: function _pushActivity(spanId) {\n      this._cancelIdleTimeout();\n\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(\"[Tracing] pushActivity: \".concat(spanId));\n      this.activities[spanId] = true;\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n    /**\n     * Remove an activity from usage\n     * @param spanId The span id that represents the activity\n     */\n\n  }, {\n    key: \"_popActivity\",\n    value: function _popActivity(spanId) {\n      if (this.activities[spanId]) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(\"[Tracing] popActivity \".concat(spanId));\n        delete this.activities[spanId];\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n      }\n\n      if (Object.keys(this.activities).length === 0) {\n        // We need to add the timeout here to have the real endtimestamp of the transaction\n        // Remember timestampWithMs is in seconds, timeout is in ms\n        var endTimestamp = timestampWithMs() + this._idleTimeout / 1000;\n\n        this._startIdleTimeout(endTimestamp);\n      }\n    }\n    /**\n     * Checks when entries of this.activities are not changing for 3 beats.\n     * If this occurs we finish the transaction.\n     */\n\n  }, {\n    key: \"_beat\",\n    value: function _beat() {\n      // We should not be running heartbeat if the idle transaction is finished.\n      if (this._finished) {\n        return;\n      }\n\n      var heartbeatString = Object.keys(this.activities).join('');\n\n      if (heartbeatString === this._prevHeartbeatString) {\n        this._heartbeatCounter += 1;\n      } else {\n        this._heartbeatCounter = 1;\n      }\n\n      this._prevHeartbeatString = heartbeatString;\n\n      if (this._heartbeatCounter >= 3) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] Transaction finished because of no change for 3 heart beats');\n        this.setStatus('deadline_exceeded');\n        this.finish();\n      } else {\n        this._pingHeartbeat();\n      }\n    }\n    /**\n     * Pings the heartbeat\n     */\n\n  }, {\n    key: \"_pingHeartbeat\",\n    value: function _pingHeartbeat() {\n      var _this7 = this;\n\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(\"pinging Heartbeat -> current counter: \".concat(this._heartbeatCounter));\n      setTimeout(function () {\n        _this7._beat();\n      }, HEARTBEAT_INTERVAL);\n    }\n  }]);\n\n  return IdleTransaction;\n}(Transaction);\n/**\n * Reset transaction on scope to `undefined`\n */\n\n\nfunction clearActiveTransaction(hub) {\n  var scope = hub.getScope();\n\n  if (scope) {\n    var transaction = scope.getTransaction();\n\n    if (transaction) {\n      scope.setSpan(undefined);\n    }\n  }\n}\n\nexport { DEFAULT_FINAL_TIMEOUT, DEFAULT_IDLE_TIMEOUT, HEARTBEAT_INTERVAL, IdleTransaction, IdleTransactionSpanRecorder };","map":null,"metadata":{},"sourceType":"module"}