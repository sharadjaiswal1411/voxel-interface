{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereum_types_1 = require(\"ethereum-types\");\n\nvar configured_bignumber_1 = require(\"../../configured_bignumber\");\n\nvar blob_1 = require(\"../abstract_data_types/types/blob\");\n\nvar constants_1 = require(\"../utils/constants\");\n\nvar EncoderMath = require(\"../utils/math\");\n\nvar IntDataType =\n/** @class */\nfunction (_super) {\n  __extends(IntDataType, _super);\n\n  function IntDataType(dataItem, dataTypeFactory) {\n    var _this = _super.call(this, dataItem, dataTypeFactory, IntDataType._SIZE_KNOWN_AT_COMPILE_TIME) || this;\n\n    if (!IntDataType.matchType(dataItem.type)) {\n      throw new Error(\"Tried to instantiate Int with bad input: \" + dataItem);\n    }\n\n    _this._width = IntDataType._decodeWidthFromType(dataItem.type);\n    _this._minValue = new configured_bignumber_1.BigNumber(2).exponentiatedBy(_this._width - 1).times(-1);\n    _this._maxValue = new configured_bignumber_1.BigNumber(2).exponentiatedBy(_this._width - 1).minus(1);\n    return _this;\n  }\n\n  IntDataType.matchType = function (type) {\n    return IntDataType._MATCHER.test(type);\n  };\n\n  IntDataType._decodeWidthFromType = function (type) {\n    var matches = IntDataType._MATCHER.exec(type);\n\n    var width = matches !== null && matches.length === 2 && matches[1] !== undefined ? parseInt(matches[1], constants_1.constants.DEC_BASE) : IntDataType._DEFAULT_WIDTH;\n    return width;\n  };\n\n  IntDataType.prototype.encodeValue = function (value) {\n    var encodedValue = EncoderMath.safeEncodeNumericValue(value, this._minValue, this._maxValue);\n    return encodedValue;\n  };\n\n  IntDataType.prototype.decodeValue = function (calldata) {\n    var valueBuf = calldata.popWord();\n    var value = EncoderMath.safeDecodeNumericValue(valueBuf, this._minValue, this._maxValue);\n\n    if (this._width === constants_1.constants.NUMBER_OF_BYTES_IN_INT8) {\n      return value.toNumber();\n    }\n\n    return value;\n  };\n\n  IntDataType.prototype.getDefaultValue = function () {\n    var defaultValue = IntDataType._DEFAULT_VALUE;\n\n    if (this._width === constants_1.constants.NUMBER_OF_BYTES_IN_INT8) {\n      return defaultValue.toNumber();\n    }\n\n    return defaultValue;\n  };\n\n  IntDataType.prototype.getSignatureType = function () {\n    return \"\" + ethereum_types_1.SolidityTypes.Int + this._width;\n  };\n\n  IntDataType._MATCHER = RegExp('^int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256){0,1}$');\n  IntDataType._SIZE_KNOWN_AT_COMPILE_TIME = true;\n  IntDataType._MAX_WIDTH = 256;\n  IntDataType._DEFAULT_WIDTH = IntDataType._MAX_WIDTH;\n  IntDataType._DEFAULT_VALUE = new configured_bignumber_1.BigNumber(0);\n  return IntDataType;\n}(blob_1.AbstractBlobDataType);\n\nexports.IntDataType = IntDataType;","map":null,"metadata":{},"sourceType":"script"}