{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"className\", \"tag\", \"wrapperTag\", \"children\", \"onSwiper\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useRef, useState, useEffect, forwardRef } from 'react';\nimport SwiperCore from 'swiper';\nimport { getParams } from './get-params.js';\nimport { mountSwiper } from './mount-swiper.js';\nimport { needsScrollbar, needsNavigation, needsPagination, uniqueClasses, extend } from './utils.js';\nimport { renderLoop, calcLoopedSlides } from './loop.js';\nimport { getChangedParams } from './get-changed-params.js';\nimport { getChildren } from './get-children.js';\nimport { updateSwiper } from './update-swiper.js';\nimport { renderVirtual, updateOnVirtualData } from './virtual.js';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-layout-effect.js';\nimport { SwiperContext } from './context.js';\nvar Swiper = /*#__PURE__*/forwardRef(function (_temp, externalElRef) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      className = _ref.className,\n      _ref$tag = _ref.tag,\n      Tag = _ref$tag === void 0 ? 'div' : _ref$tag,\n      _ref$wrapperTag = _ref.wrapperTag,\n      WrapperTag = _ref$wrapperTag === void 0 ? 'div' : _ref$wrapperTag,\n      children = _ref.children,\n      onSwiper = _ref.onSwiper,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var eventsAssigned = false;\n\n  var _useState = useState('swiper'),\n      _useState2 = _slicedToArray(_useState, 2),\n      containerClasses = _useState2[0],\n      setContainerClasses = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      virtualData = _useState4[0],\n      setVirtualData = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      breakpointChanged = _useState6[0],\n      setBreakpointChanged = _useState6[1];\n\n  var initializedRef = useRef(false);\n  var swiperElRef = useRef(null);\n  var swiperRef = useRef(null);\n  var oldPassedParamsRef = useRef(null);\n  var oldSlides = useRef(null);\n  var nextElRef = useRef(null);\n  var prevElRef = useRef(null);\n  var paginationElRef = useRef(null);\n  var scrollbarElRef = useRef(null);\n\n  var _getParams = getParams(rest),\n      swiperParams = _getParams.params,\n      passedParams = _getParams.passedParams,\n      restProps = _getParams.rest,\n      events = _getParams.events;\n\n  var _getChildren = getChildren(children),\n      slides = _getChildren.slides,\n      slots = _getChildren.slots;\n\n  var onBeforeBreakpoint = function onBeforeBreakpoint() {\n    setBreakpointChanged(!breakpointChanged);\n  };\n\n  Object.assign(swiperParams.on, {\n    _containerClasses: function _containerClasses(swiper, classes) {\n      setContainerClasses(classes);\n    }\n  });\n\n  var initSwiper = function initSwiper() {\n    // init swiper\n    Object.assign(swiperParams.on, events);\n    eventsAssigned = true;\n    swiperRef.current = new SwiperCore(swiperParams);\n\n    swiperRef.current.loopCreate = function () {};\n\n    swiperRef.current.loopDestroy = function () {};\n\n    if (swiperParams.loop) {\n      swiperRef.current.loopedSlides = calcLoopedSlides(slides, swiperParams);\n    }\n\n    if (swiperRef.current.virtual && swiperRef.current.params.virtual.enabled) {\n      swiperRef.current.virtual.slides = slides;\n      var extendWith = {\n        cache: false,\n        slides: slides,\n        renderExternal: setVirtualData,\n        renderExternalUpdate: false\n      };\n      extend(swiperRef.current.params.virtual, extendWith);\n      extend(swiperRef.current.originalParams.virtual, extendWith);\n    }\n  };\n\n  if (!swiperElRef.current) {\n    initSwiper();\n  } // Listen for breakpoints change\n\n\n  if (swiperRef.current) {\n    swiperRef.current.on('_beforeBreakpoint', onBeforeBreakpoint);\n  }\n\n  var attachEvents = function attachEvents() {\n    if (eventsAssigned || !events || !swiperRef.current) return;\n    Object.keys(events).forEach(function (eventName) {\n      swiperRef.current.on(eventName, events[eventName]);\n    });\n  };\n\n  var detachEvents = function detachEvents() {\n    if (!events || !swiperRef.current) return;\n    Object.keys(events).forEach(function (eventName) {\n      swiperRef.current.off(eventName, events[eventName]);\n    });\n  };\n\n  useEffect(function () {\n    return function () {\n      if (swiperRef.current) swiperRef.current.off('_beforeBreakpoint', onBeforeBreakpoint);\n    };\n  }); // set initialized flag\n\n  useEffect(function () {\n    if (!initializedRef.current && swiperRef.current) {\n      swiperRef.current.emitSlidesClasses();\n      initializedRef.current = true;\n    }\n  }); // mount swiper\n\n  useIsomorphicLayoutEffect(function () {\n    if (externalElRef) {\n      externalElRef.current = swiperElRef.current;\n    }\n\n    if (!swiperElRef.current) return;\n\n    if (swiperRef.current.destroyed) {\n      initSwiper();\n    }\n\n    mountSwiper({\n      el: swiperElRef.current,\n      nextEl: nextElRef.current,\n      prevEl: prevElRef.current,\n      paginationEl: paginationElRef.current,\n      scrollbarEl: scrollbarElRef.current,\n      swiper: swiperRef.current\n    }, swiperParams);\n    if (onSwiper) onSwiper(swiperRef.current); // eslint-disable-next-line\n\n    return function () {\n      if (swiperRef.current && !swiperRef.current.destroyed) {\n        swiperRef.current.destroy(true, false);\n      }\n    };\n  }, []); // watch for params change\n\n  useIsomorphicLayoutEffect(function () {\n    attachEvents();\n    var changedParams = getChangedParams(passedParams, oldPassedParamsRef.current, slides, oldSlides.current);\n    oldPassedParamsRef.current = passedParams;\n    oldSlides.current = slides;\n\n    if (changedParams.length && swiperRef.current && !swiperRef.current.destroyed) {\n      updateSwiper({\n        swiper: swiperRef.current,\n        slides: slides,\n        passedParams: passedParams,\n        changedParams: changedParams,\n        nextEl: nextElRef.current,\n        prevEl: prevElRef.current,\n        scrollbarEl: scrollbarElRef.current,\n        paginationEl: paginationElRef.current\n      });\n    }\n\n    return function () {\n      detachEvents();\n    };\n  }); // update on virtual update\n\n  useIsomorphicLayoutEffect(function () {\n    updateOnVirtualData(swiperRef.current);\n  }, [virtualData]); // bypass swiper instance to slides\n\n  function renderSlides() {\n    if (swiperParams.virtual) {\n      return renderVirtual(swiperRef.current, slides, virtualData);\n    }\n\n    if (!swiperParams.loop || swiperRef.current && swiperRef.current.destroyed) {\n      return slides.map(function (child) {\n        return /*#__PURE__*/React.cloneElement(child, {\n          swiper: swiperRef.current\n        });\n      });\n    }\n\n    return renderLoop(swiperRef.current, slides, swiperParams);\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    ref: swiperElRef,\n    className: uniqueClasses(\"\".concat(containerClasses).concat(className ? \" \".concat(className) : ''))\n  }, restProps), /*#__PURE__*/React.createElement(SwiperContext.Provider, {\n    value: swiperRef.current\n  }, slots['container-start'], needsNavigation(swiperParams) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    ref: prevElRef,\n    className: \"swiper-button-prev\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: nextElRef,\n    className: \"swiper-button-next\"\n  })), needsScrollbar(swiperParams) && /*#__PURE__*/React.createElement(\"div\", {\n    ref: scrollbarElRef,\n    className: \"swiper-scrollbar\"\n  }), needsPagination(swiperParams) && /*#__PURE__*/React.createElement(\"div\", {\n    ref: paginationElRef,\n    className: \"swiper-pagination\"\n  }), /*#__PURE__*/React.createElement(WrapperTag, {\n    className: \"swiper-wrapper\"\n  }, slots['wrapper-start'], renderSlides(), slots['wrapper-end']), slots['container-end']));\n});\nSwiper.displayName = 'Swiper';\nexport { Swiper };","map":null,"metadata":{},"sourceType":"module"}