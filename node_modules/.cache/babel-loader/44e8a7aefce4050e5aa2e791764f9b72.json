{"ast":null,"code":"/**\n * gets the amoutn difference plus the % change in change itself (second order change)\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n * @param {*} value48HoursAgo\n */\nexport var get2DayChange = function get2DayChange(valueNow, value24HoursAgo, value48HoursAgo) {\n  // get volume info for both 24 hour periods\n  var currentChange = parseFloat(valueNow) - parseFloat(value24HoursAgo);\n  var previousChange = parseFloat(value24HoursAgo) - parseFloat(value48HoursAgo);\n  var adjustedPercentChange = (currentChange - previousChange) / previousChange * 100;\n\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n    return [currentChange, 0];\n  }\n\n  return [currentChange, adjustedPercentChange];\n};\n/**\n * get standard percent change between two values\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n */\n\nexport var getPercentChange = function getPercentChange(valueNow, value24HoursAgo) {\n  if (valueNow && value24HoursAgo) {\n    var change = (parseFloat(valueNow) - parseFloat(value24HoursAgo)) / parseFloat(value24HoursAgo) * 100;\n    if (isFinite(change)) return change;\n  }\n\n  return 0;\n};","map":{"version":3,"names":["get2DayChange","valueNow","value24HoursAgo","value48HoursAgo","currentChange","parseFloat","previousChange","adjustedPercentChange","isNaN","isFinite","getPercentChange","change"],"sources":["/Applications/XAMPP/voxel-interface/src/utils/data.ts"],"sourcesContent":["/**\n * gets the amoutn difference plus the % change in change itself (second order change)\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n * @param {*} value48HoursAgo\n */\nexport const get2DayChange = (valueNow: string, value24HoursAgo: string, value48HoursAgo: string): [number, number] => {\n  // get volume info for both 24 hour periods\n  const currentChange = parseFloat(valueNow) - parseFloat(value24HoursAgo)\n  const previousChange = parseFloat(value24HoursAgo) - parseFloat(value48HoursAgo)\n  const adjustedPercentChange = ((currentChange - previousChange) / previousChange) * 100\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n    return [currentChange, 0]\n  }\n  return [currentChange, adjustedPercentChange]\n}\n\n/**\n * get standard percent change between two values\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n */\nexport const getPercentChange = (valueNow: string | undefined, value24HoursAgo: string | undefined): number => {\n  if (valueNow && value24HoursAgo) {\n    const change = ((parseFloat(valueNow) - parseFloat(value24HoursAgo)) / parseFloat(value24HoursAgo)) * 100\n    if (isFinite(change)) return change\n  }\n  return 0\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAmBC,eAAnB,EAA4CC,eAA5C,EAA0F;EACrH;EACA,IAAMC,aAAa,GAAGC,UAAU,CAACJ,QAAD,CAAV,GAAuBI,UAAU,CAACH,eAAD,CAAvD;EACA,IAAMI,cAAc,GAAGD,UAAU,CAACH,eAAD,CAAV,GAA8BG,UAAU,CAACF,eAAD,CAA/D;EACA,IAAMI,qBAAqB,GAAI,CAACH,aAAa,GAAGE,cAAjB,IAAmCA,cAApC,GAAsD,GAApF;;EACA,IAAIE,KAAK,CAACD,qBAAD,CAAL,IAAgC,CAACE,QAAQ,CAACF,qBAAD,CAA7C,EAAsE;IACpE,OAAO,CAACH,aAAD,EAAgB,CAAhB,CAAP;EACD;;EACD,OAAO,CAACA,aAAD,EAAgBG,qBAAhB,CAAP;AACD,CATM;AAWP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACT,QAAD,EAA+BC,eAA/B,EAA+E;EAC7G,IAAID,QAAQ,IAAIC,eAAhB,EAAiC;IAC/B,IAAMS,MAAM,GAAI,CAACN,UAAU,CAACJ,QAAD,CAAV,GAAuBI,UAAU,CAACH,eAAD,CAAlC,IAAuDG,UAAU,CAACH,eAAD,CAAlE,GAAuF,GAAtG;IACA,IAAIO,QAAQ,CAACE,MAAD,CAAZ,EAAsB,OAAOA,MAAP;EACvB;;EACD,OAAO,CAAP;AACD,CANM"},"metadata":{},"sourceType":"module"}