{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar chalk_1 = require(\"chalk\");\n\nvar _ = require(\"lodash\");\n\nvar DEFAULT_TERMINAL_WIDTH = 80;\nvar TERMINAL_WIDTH = _.get(process, 'stdout.columns') || DEFAULT_TERMINAL_WIDTH;\nexports.logUtils = {\n  log: function log() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.log.apply(console, __spread(args)); // tslint:disable-line:no-console\n  },\n  header: function header(text, padStr) {\n    if (padStr === void 0) {\n      padStr = '=';\n    }\n\n    var padLength = TERMINAL_WIDTH - text.length;\n    var padLengthEnd = (padLength + 1) / 2;\n    var leftPadded = text.padStart(TERMINAL_WIDTH - padLengthEnd, padStr);\n    var padded = leftPadded.padEnd(TERMINAL_WIDTH, padStr);\n    console.log(padded); // tslint:disable-line:no-console\n  },\n  warn: function warn() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.warn.apply(console, __spread(args)); // tslint:disable-line:no-console\n  },\n  table: function table(columnarData) {\n    var formattedColumnarData = _.mapValues(columnarData, function (columnOrColumns, _rowName) {\n      return _.isNumber(columnOrColumns) ? columnOrColumns.toLocaleString() : columnOrColumns;\n    });\n\n    console.table(formattedColumnarData); // tslint:disable-line:no-console\n  },\n  logWithTime: function logWithTime(arg) {\n    exports.logUtils.log(\"[\" + chalk_1.default.gray(new Date().toLocaleTimeString()) + \"] \" + arg);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}