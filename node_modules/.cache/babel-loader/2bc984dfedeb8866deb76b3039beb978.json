{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\nvar _jsxFileName = \"/Applications/XAMPP/voxel-interface/src/components/swapv2/TokenInfoV2/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { TOKEN_INFO_DESCRIPTION } from 'constants/tokenLists/token-info';\nimport { useActiveWeb3React } from 'hooks';\nimport useTokenInfo from 'hooks/useTokenInfo';\nimport { useCurrencyConvertedToNative } from 'utils/dmm';\nimport { getSymbolSlug } from 'utils/string';\nimport { checkPairInWhiteList } from 'utils/tokenInfo';\nimport { TokenInfoWrapper } from '../styleds';\nimport SingleTokenInfo, { HowToSwap } from './SingleTokenInfo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar isEmptyData = function isEmptyData(tokenInfo) {\n  var _tokenInfo$descriptio;\n\n  return !tokenInfo.price && !(tokenInfo !== null && tokenInfo !== void 0 && (_tokenInfo$descriptio = tokenInfo.description) !== null && _tokenInfo$descriptio !== void 0 && _tokenInfo$descriptio.en) && !tokenInfo.tradingVolume && !tokenInfo.marketCapRank;\n};\n\nvar copyToken = function copyToken(tokenInfo) {\n  var result = _objectSpread(_objectSpread({}, tokenInfo), {}, {\n    description: _objectSpread({}, tokenInfo.description)\n  });\n\n  return result;\n};\n\nvar checkTokenDescription = function checkTokenDescription(_ref) {\n  var tokenInfo1 = _ref.tokenInfo1,\n      tokenInfo2 = _ref.tokenInfo2,\n      tokenWrapped1 = _ref.tokenWrapped1,\n      tokenWrapped2 = _ref.tokenWrapped2,\n      chainId = _ref.chainId;\n  // hard code pair description for SEO\n  var rs1 = copyToken(tokenInfo1);\n  var rs2 = copyToken(tokenInfo2);\n  var inWhiteList = false;\n\n  if (tokenWrapped1 && tokenWrapped2 && chainId) {\n    var symbol1 = getSymbolSlug(tokenWrapped1);\n    var symbol2 = getSymbolSlug(tokenWrapped2);\n\n    var _checkPairInWhiteList = checkPairInWhiteList(chainId, symbol1, symbol2),\n        isInWhiteList = _checkPairInWhiteList.isInWhiteList,\n        data = _checkPairInWhiteList.data;\n\n    if (isInWhiteList) {\n      var _data$symbol, _data$symbol2;\n\n      inWhiteList = isInWhiteList;\n      var descHardCode1 = TOKEN_INFO_DESCRIPTION[symbol1];\n      var descHardCode2 = TOKEN_INFO_DESCRIPTION[symbol2];\n      var nameHardCode1 = (_data$symbol = data[symbol1]) === null || _data$symbol === void 0 ? void 0 : _data$symbol.name;\n      var nameHardCode2 = (_data$symbol2 = data[symbol2]) === null || _data$symbol2 === void 0 ? void 0 : _data$symbol2.name;\n      if (nameHardCode1) rs1.name = nameHardCode1;\n      if (nameHardCode2) rs2.name = nameHardCode2;\n      if (descHardCode1) rs1.description.en = descHardCode1;\n      if (descHardCode2) rs2.description.en = descHardCode2;\n    }\n  }\n\n  return {\n    tokenInfo1: rs1,\n    tokenInfo2: rs2,\n    isInWhiteList: inWhiteList\n  };\n};\n\nvar TokenInfoV2 = function TokenInfoV2(_ref2) {\n  _s();\n\n  var currencyIn = _ref2.currencyIn,\n      currencyOut = _ref2.currencyOut;\n  var inputNativeCurrency = useCurrencyConvertedToNative(currencyIn);\n  var outputNativeCurrency = useCurrencyConvertedToNative(currencyOut);\n  var inputToken = inputNativeCurrency === null || inputNativeCurrency === void 0 ? void 0 : inputNativeCurrency.wrapped;\n  var outputToken = outputNativeCurrency === null || outputNativeCurrency === void 0 ? void 0 : outputNativeCurrency.wrapped;\n\n  var _useTokenInfo = useTokenInfo(inputToken),\n      data1 = _useTokenInfo.data,\n      loading1 = _useTokenInfo.loading;\n\n  var _useTokenInfo2 = useTokenInfo(outputToken),\n      data2 = _useTokenInfo2.data,\n      loading2 = _useTokenInfo2.loading;\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      chainId = _useActiveWeb3React.chainId;\n\n  var _checkTokenDescriptio = checkTokenDescription({\n    tokenInfo1: data1,\n    tokenInfo2: data2,\n    tokenWrapped1: currencyIn,\n    tokenWrapped2: currencyOut,\n    chainId: chainId\n  }),\n      tokenInfo1 = _checkTokenDescriptio.tokenInfo1,\n      tokenInfo2 = _checkTokenDescriptio.tokenInfo2,\n      isInWhiteList = _checkTokenDescriptio.isInWhiteList;\n\n  var showToken1 = !isEmptyData(tokenInfo1) && isInWhiteList;\n  var showToken2 = !isEmptyData(tokenInfo2) && isInWhiteList;\n  if (!showToken2 && !showToken1) return null;\n  var showHow2Swap = Boolean(showToken1 && showToken2 && currencyIn && currencyOut && isInWhiteList);\n  return /*#__PURE__*/_jsxDEV(TokenInfoWrapper, {\n    children: [showToken1 && /*#__PURE__*/_jsxDEV(SingleTokenInfo, {\n      expandedOnMount: true,\n      data: tokenInfo1,\n      loading: loading1,\n      currency: inputNativeCurrency\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, _this), showToken2 && /*#__PURE__*/_jsxDEV(SingleTokenInfo, {\n      data: tokenInfo2,\n      loading: loading2,\n      currency: outputNativeCurrency\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 22\n    }, _this), showHow2Swap && /*#__PURE__*/_jsxDEV(HowToSwap, {\n      fromCurrency: currencyIn,\n      toCurrency: currencyOut,\n      fromCurrencyInfo: tokenInfo1,\n      toCurrencyInfo: tokenInfo2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(TokenInfoV2, \"OMyZmGRee5T1f0UhLAtb6e3wWrI=\", false, function () {\n  return [useCurrencyConvertedToNative, useCurrencyConvertedToNative, useTokenInfo, useTokenInfo, useActiveWeb3React];\n});\n\n_c = TokenInfoV2;\nexport default TokenInfoV2;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenInfoV2\");","map":{"version":3,"names":["React","TOKEN_INFO_DESCRIPTION","useActiveWeb3React","useTokenInfo","useCurrencyConvertedToNative","getSymbolSlug","checkPairInWhiteList","TokenInfoWrapper","SingleTokenInfo","HowToSwap","isEmptyData","tokenInfo","price","description","en","tradingVolume","marketCapRank","copyToken","result","checkTokenDescription","tokenInfo1","tokenInfo2","tokenWrapped1","tokenWrapped2","chainId","rs1","rs2","inWhiteList","symbol1","symbol2","isInWhiteList","data","descHardCode1","descHardCode2","nameHardCode1","name","nameHardCode2","TokenInfoV2","currencyIn","currencyOut","inputNativeCurrency","outputNativeCurrency","inputToken","wrapped","outputToken","data1","loading1","loading","data2","loading2","showToken1","showToken2","showHow2Swap","Boolean"],"sources":["/Applications/XAMPP/voxel-interface/src/components/swapv2/TokenInfoV2/index.tsx"],"sourcesContent":["import { ChainId, Currency } from '@kyberswap/ks-sdk-core'\nimport React from 'react'\n\nimport { TOKEN_INFO_DESCRIPTION } from 'constants/tokenLists/token-info'\nimport { useActiveWeb3React } from 'hooks'\nimport useTokenInfo, { TokenInfo } from 'hooks/useTokenInfo'\nimport { useCurrencyConvertedToNative } from 'utils/dmm'\nimport { getSymbolSlug } from 'utils/string'\nimport { checkPairInWhiteList } from 'utils/tokenInfo'\n\nimport { TokenInfoWrapper } from '../styleds'\nimport SingleTokenInfo, { HowToSwap } from './SingleTokenInfo'\n\nconst isEmptyData = (tokenInfo: TokenInfo) => {\n  return !tokenInfo.price && !tokenInfo?.description?.en && !tokenInfo.tradingVolume && !tokenInfo.marketCapRank\n}\n\nconst copyToken = (tokenInfo: TokenInfo) => {\n  const result: TokenInfo = { ...tokenInfo, description: { ...tokenInfo.description } }\n  return result\n}\n\nconst checkTokenDescription = ({\n  tokenInfo1,\n  tokenInfo2,\n  tokenWrapped1,\n  tokenWrapped2,\n  chainId,\n}: {\n  tokenInfo1: TokenInfo\n  tokenInfo2: TokenInfo\n  tokenWrapped1: Currency | undefined\n  tokenWrapped2: Currency | undefined\n  chainId: ChainId | undefined\n}) => {\n  // hard code pair description for SEO\n  const rs1: TokenInfo = copyToken(tokenInfo1)\n  const rs2: TokenInfo = copyToken(tokenInfo2)\n  let inWhiteList = false\n  if (tokenWrapped1 && tokenWrapped2 && chainId) {\n    const symbol1 = getSymbolSlug(tokenWrapped1)\n    const symbol2 = getSymbolSlug(tokenWrapped2)\n    const { isInWhiteList, data } = checkPairInWhiteList(chainId, symbol1, symbol2)\n    if (isInWhiteList) {\n      inWhiteList = isInWhiteList\n      const descHardCode1 = TOKEN_INFO_DESCRIPTION[symbol1]\n      const descHardCode2 = TOKEN_INFO_DESCRIPTION[symbol2]\n      const nameHardCode1 = data[symbol1]?.name\n      const nameHardCode2 = data[symbol2]?.name\n      if (nameHardCode1) rs1.name = nameHardCode1\n      if (nameHardCode2) rs2.name = nameHardCode2\n      if (descHardCode1) rs1.description.en = descHardCode1\n      if (descHardCode2) rs2.description.en = descHardCode2\n    }\n  }\n  return {\n    tokenInfo1: rs1,\n    tokenInfo2: rs2,\n    isInWhiteList: inWhiteList,\n  }\n}\n\nconst TokenInfoV2 = ({ currencyIn, currencyOut }: { currencyIn?: Currency; currencyOut?: Currency }) => {\n  const inputNativeCurrency = useCurrencyConvertedToNative(currencyIn)\n  const outputNativeCurrency = useCurrencyConvertedToNative(currencyOut)\n\n  const inputToken = inputNativeCurrency?.wrapped\n  const outputToken = outputNativeCurrency?.wrapped\n\n  const { data: data1, loading: loading1 } = useTokenInfo(inputToken)\n  const { data: data2, loading: loading2 } = useTokenInfo(outputToken)\n\n  const { chainId } = useActiveWeb3React()\n\n  const { tokenInfo1, tokenInfo2, isInWhiteList } = checkTokenDescription({\n    tokenInfo1: data1,\n    tokenInfo2: data2,\n    tokenWrapped1: currencyIn,\n    tokenWrapped2: currencyOut,\n    chainId,\n  })\n\n  const showToken1 = !isEmptyData(tokenInfo1) && isInWhiteList\n  const showToken2 = !isEmptyData(tokenInfo2) && isInWhiteList\n\n  if (!showToken2 && !showToken1) return null\n  const showHow2Swap = Boolean(showToken1 && showToken2 && currencyIn && currencyOut && isInWhiteList)\n  return (\n    <TokenInfoWrapper>\n      {showToken1 && (\n        <SingleTokenInfo expandedOnMount data={tokenInfo1} loading={loading1} currency={inputNativeCurrency} />\n      )}\n      {showToken2 && <SingleTokenInfo data={tokenInfo2} loading={loading2} currency={outputNativeCurrency} />}\n      {showHow2Swap && (\n        <HowToSwap\n          fromCurrency={currencyIn}\n          toCurrency={currencyOut}\n          fromCurrencyInfo={tokenInfo1}\n          toCurrencyInfo={tokenInfo2}\n        />\n      )}\n    </TokenInfoWrapper>\n  )\n}\n\nexport default TokenInfoV2\n"],"mappings":";;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,sBAAT,QAAuC,iCAAvC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAOC,YAAP,MAAwC,oBAAxC;AACA,SAASC,4BAAT,QAA6C,WAA7C;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,oBAAT,QAAqC,iBAArC;AAEA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,eAAP,IAA0BC,SAA1B,QAA2C,mBAA3C;;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD,EAA0B;EAAA;;EAC5C,OAAO,CAACA,SAAS,CAACC,KAAX,IAAoB,EAACD,SAAD,aAACA,SAAD,wCAACA,SAAS,CAAEE,WAAZ,kDAAC,sBAAwBC,EAAzB,CAApB,IAAmD,CAACH,SAAS,CAACI,aAA9D,IAA+E,CAACJ,SAAS,CAACK,aAAjG;AACD,CAFD;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACN,SAAD,EAA0B;EAC1C,IAAMO,MAAiB,mCAAQP,SAAR;IAAmBE,WAAW,oBAAOF,SAAS,CAACE,WAAjB;EAA9B,EAAvB;;EACA,OAAOK,MAAP;AACD,CAHD;;AAKA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,OAYxB;EAAA,IAXJC,UAWI,QAXJA,UAWI;EAAA,IAVJC,UAUI,QAVJA,UAUI;EAAA,IATJC,aASI,QATJA,aASI;EAAA,IARJC,aAQI,QARJA,aAQI;EAAA,IAPJC,OAOI,QAPJA,OAOI;EACJ;EACA,IAAMC,GAAc,GAAGR,SAAS,CAACG,UAAD,CAAhC;EACA,IAAMM,GAAc,GAAGT,SAAS,CAACI,UAAD,CAAhC;EACA,IAAIM,WAAW,GAAG,KAAlB;;EACA,IAAIL,aAAa,IAAIC,aAAjB,IAAkCC,OAAtC,EAA+C;IAC7C,IAAMI,OAAO,GAAGvB,aAAa,CAACiB,aAAD,CAA7B;IACA,IAAMO,OAAO,GAAGxB,aAAa,CAACkB,aAAD,CAA7B;;IACA,4BAAgCjB,oBAAoB,CAACkB,OAAD,EAAUI,OAAV,EAAmBC,OAAnB,CAApD;IAAA,IAAQC,aAAR,yBAAQA,aAAR;IAAA,IAAuBC,IAAvB,yBAAuBA,IAAvB;;IACA,IAAID,aAAJ,EAAmB;MAAA;;MACjBH,WAAW,GAAGG,aAAd;MACA,IAAME,aAAa,GAAG/B,sBAAsB,CAAC2B,OAAD,CAA5C;MACA,IAAMK,aAAa,GAAGhC,sBAAsB,CAAC4B,OAAD,CAA5C;MACA,IAAMK,aAAa,mBAAGH,IAAI,CAACH,OAAD,CAAP,iDAAG,aAAeO,IAArC;MACA,IAAMC,aAAa,oBAAGL,IAAI,CAACF,OAAD,CAAP,kDAAG,cAAeM,IAArC;MACA,IAAID,aAAJ,EAAmBT,GAAG,CAACU,IAAJ,GAAWD,aAAX;MACnB,IAAIE,aAAJ,EAAmBV,GAAG,CAACS,IAAJ,GAAWC,aAAX;MACnB,IAAIJ,aAAJ,EAAmBP,GAAG,CAACZ,WAAJ,CAAgBC,EAAhB,GAAqBkB,aAArB;MACnB,IAAIC,aAAJ,EAAmBP,GAAG,CAACb,WAAJ,CAAgBC,EAAhB,GAAqBmB,aAArB;IACpB;EACF;;EACD,OAAO;IACLb,UAAU,EAAEK,GADP;IAELJ,UAAU,EAAEK,GAFP;IAGLI,aAAa,EAAEH;EAHV,CAAP;AAKD,CAtCD;;AAwCA,IAAMU,WAAW,GAAG,SAAdA,WAAc,QAAoF;EAAA;;EAAA,IAAjFC,UAAiF,SAAjFA,UAAiF;EAAA,IAArEC,WAAqE,SAArEA,WAAqE;EACtG,IAAMC,mBAAmB,GAAGpC,4BAA4B,CAACkC,UAAD,CAAxD;EACA,IAAMG,oBAAoB,GAAGrC,4BAA4B,CAACmC,WAAD,CAAzD;EAEA,IAAMG,UAAU,GAAGF,mBAAH,aAAGA,mBAAH,uBAAGA,mBAAmB,CAAEG,OAAxC;EACA,IAAMC,WAAW,GAAGH,oBAAH,aAAGA,oBAAH,uBAAGA,oBAAoB,CAAEE,OAA1C;;EAEA,oBAA2CxC,YAAY,CAACuC,UAAD,CAAvD;EAAA,IAAcG,KAAd,iBAAQd,IAAR;EAAA,IAA8Be,QAA9B,iBAAqBC,OAArB;;EACA,qBAA2C5C,YAAY,CAACyC,WAAD,CAAvD;EAAA,IAAcI,KAAd,kBAAQjB,IAAR;EAAA,IAA8BkB,QAA9B,kBAAqBF,OAArB;;EAEA,0BAAoB7C,kBAAkB,EAAtC;EAAA,IAAQsB,OAAR,uBAAQA,OAAR;;EAEA,4BAAkDL,qBAAqB,CAAC;IACtEC,UAAU,EAAEyB,KAD0D;IAEtExB,UAAU,EAAE2B,KAF0D;IAGtE1B,aAAa,EAAEgB,UAHuD;IAItEf,aAAa,EAAEgB,WAJuD;IAKtEf,OAAO,EAAPA;EALsE,CAAD,CAAvE;EAAA,IAAQJ,UAAR,yBAAQA,UAAR;EAAA,IAAoBC,UAApB,yBAAoBA,UAApB;EAAA,IAAgCS,aAAhC,yBAAgCA,aAAhC;;EAQA,IAAMoB,UAAU,GAAG,CAACxC,WAAW,CAACU,UAAD,CAAZ,IAA4BU,aAA/C;EACA,IAAMqB,UAAU,GAAG,CAACzC,WAAW,CAACW,UAAD,CAAZ,IAA4BS,aAA/C;EAEA,IAAI,CAACqB,UAAD,IAAe,CAACD,UAApB,EAAgC,OAAO,IAAP;EAChC,IAAME,YAAY,GAAGC,OAAO,CAACH,UAAU,IAAIC,UAAd,IAA4Bb,UAA5B,IAA0CC,WAA1C,IAAyDT,aAA1D,CAA5B;EACA,oBACE,QAAC,gBAAD;IAAA,WACGoB,UAAU,iBACT,QAAC,eAAD;MAAiB,eAAe,MAAhC;MAAiC,IAAI,EAAE9B,UAAvC;MAAmD,OAAO,EAAE0B,QAA5D;MAAsE,QAAQ,EAAEN;IAAhF;MAAA;MAAA;MAAA;IAAA,SAFJ,EAIGW,UAAU,iBAAI,QAAC,eAAD;MAAiB,IAAI,EAAE9B,UAAvB;MAAmC,OAAO,EAAE4B,QAA5C;MAAsD,QAAQ,EAAER;IAAhE;MAAA;MAAA;MAAA;IAAA,SAJjB,EAKGW,YAAY,iBACX,QAAC,SAAD;MACE,YAAY,EAAEd,UADhB;MAEE,UAAU,EAAEC,WAFd;MAGE,gBAAgB,EAAEnB,UAHpB;MAIE,cAAc,EAAEC;IAJlB;MAAA;MAAA;MAAA;IAAA,SANJ;EAAA;IAAA;IAAA;IAAA;EAAA,SADF;AAgBD,CAzCD;;GAAMgB,W;UACwBjC,4B,EACCA,4B,EAKcD,Y,EACAA,Y,EAEvBD,kB;;;KAVhBmC,W;AA2CN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}