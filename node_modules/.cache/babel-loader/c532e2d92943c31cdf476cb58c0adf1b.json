{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t;\n  return {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  };\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [0, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nexports.__esModule = true;\n/** Class representing a semaphore\n * Semaphores are initialized with a number of permits that get aquired and released\n * over the lifecycle of the Semaphore. These permits limit the number of simultaneous\n * executions of the code that the Semaphore synchronizes. Functions can wait and stop\n * executing until a permit becomes available.\n *\n * Locks that only allow one execution of a critical section are a special case of\n * Semaphores. To construct a lock, initialize a Semaphore with a permit count of 1.\n *\n * This Semaphore class is implemented with the help of promises that get returned\n * by functions that wait for permits to become available. This makes it possible\n * to use async/await to synchronize your code.\n */\n\nvar Semaphore = function () {\n  /**\n   * Creates a semaphore.\n   * @param permits  The number of permits, i.e. things being allowed to run in parallel.\n   * To create a lock that only lets one thing run at a time, set this to 1.\n   * This number can also be negative.\n   */\n  function Semaphore(permits) {\n    this.promiseResolverQueue = [];\n    this.permits = permits;\n  }\n  /**\n   * Returns the number of available permits.\n   * @returns  The number of available permits.\n   */\n\n\n  Semaphore.prototype.getPermits = function () {\n    return this.permits;\n  };\n  /**\n   * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n   * @returns  A promise that gets resolved when execution is allowed to proceed.\n   */\n\n\n  Semaphore.prototype.wait = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (this.permits > 0) {\n          this.permits -= 1;\n          return [2\n          /*return*/\n          , Promise.resolve(true)];\n        } // If there is no permit available, we return a promise that resolves once the semaphore gets\n        // signaled enough times that permits is equal to one.\n\n\n        return [2\n        /*return*/\n        , new Promise(function (resolver) {\n          return _this.promiseResolverQueue.push(resolver);\n        })];\n      });\n    });\n  };\n  /**\n   * Alias for {@linkcode Semaphore.wait}.\n   * @returns  A promise that gets resolved when execution is allowed to proceed.\n   */\n\n\n  Semaphore.prototype.acquire = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.wait()];\n      });\n    });\n  };\n  /**\n   * Same as {@linkcode Semaphore.wait} except the promise returned gets resolved with false if no\n   * permit becomes available in time.\n   * @param milliseconds  The time spent waiting before the wait is aborted. This is a lower bound,\n   * don't rely on it being precise.\n   * @returns  A promise that gets resolved with true when execution is allowed to proceed or\n   * false if the time given elapses before a permit becomes available.\n   */\n\n\n  Semaphore.prototype.waitFor = function (milliseconds) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      var resolver, promise;\n      return __generator(this, function (_a) {\n        if (this.permits > 0) {\n          this.permits -= 1;\n          return [2\n          /*return*/\n          , Promise.resolve(true)];\n        }\n\n        resolver = function resolver(b) {\n          return void 0;\n        };\n\n        promise = new Promise(function (r) {\n          resolver = r;\n        }); // The saved resolver gets added to our list of promise resolvers so that it gets a chance\n        // to be resolved as a result of a call to signal().\n\n        this.promiseResolverQueue.push(resolver);\n        setTimeout(function () {\n          // We have to remove the promise resolver from our list. Resolving it twice would not be\n          // an issue but signal() always takes the next resolver from the queue and resolves it which\n          // would swallow a permit if we didn't remove it.\n          var index = _this.promiseResolverQueue.indexOf(resolver);\n\n          if (index !== -1) {\n            _this.promiseResolverQueue.splice(index, 1);\n          } else {// This is weird... TODO Think about what the best course of action would be at this point.\n            // Probably do nothing.\n          } // false because the wait was unsuccessful.\n\n\n          resolver(false);\n        }, milliseconds);\n        return [2\n        /*return*/\n        , promise];\n      });\n    });\n  };\n  /**\n   * Synchronous function that tries to acquire a permit and returns true if successful, false otherwise.\n   * @returns  Whether a permit could be acquired.\n   */\n\n\n  Semaphore.prototype.tryAcquire = function () {\n    if (this.permits > 0) {\n      this.permits -= 1;\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Acquires all permits that are currently available and returns the number of acquired permits.\n   * @returns  Number of acquired permits.\n   */\n\n\n  Semaphore.prototype.drainPermits = function () {\n    if (this.permits > 0) {\n      var permitCount = this.permits;\n      this.permits = 0;\n      return permitCount;\n    }\n\n    return 0;\n  };\n  /**\n   * Increases the number of permits by one. If there are other functions waiting, one of them will\n   * continue to execute in a future iteration of the event loop.\n   */\n\n\n  Semaphore.prototype.signal = function () {\n    this.permits += 1;\n\n    if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n      throw new Error('this.permits should never be > 0 when there is someone waiting.');\n    } else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n      // If there is someone else waiting, immediately consume the permit that was released\n      // at the beginning of this function and let the waiting function resume.\n      this.permits -= 1;\n      var nextResolver = this.promiseResolverQueue.shift();\n\n      if (nextResolver) {\n        nextResolver(true);\n      }\n    }\n  };\n  /**\n   * Alias for {@linkcode Semaphore.signal}.\n   */\n\n\n  Semaphore.prototype.release = function () {\n    this.signal();\n  };\n  /**\n   * Schedules func to be called once a permit becomes available.\n   * Returns a promise that resolves to the return value of func.\n   * @typeparam T  The return type of func.\n   * @param func  The function to be executed.\n   * @return  A promise that gets resolved with the return value of the function.\n   */\n\n\n  Semaphore.prototype.execute = function (func) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.wait()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2,, 4, 5]);\n\n            return [4\n            /*yield*/\n            , func()];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 4:\n            this.signal();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return Semaphore;\n}();\n\nexports[\"default\"] = Semaphore;","map":null,"metadata":{},"sourceType":"script"}