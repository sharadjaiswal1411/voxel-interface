{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\nvar _s = $RefreshSig$();\n\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { ethers } from 'ethers';\nimport { useCallback, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AGGREGATOR_ROUTER_SWAPPED_EVENT_TOPIC } from 'constants/index';\nimport useMixpanel, { MIXPANEL_TYPE, NEED_CHECK_SUBGRAPH_TRANSACTION_TYPES } from 'hooks/useMixpanel';\nimport { AppPaths } from 'pages/App';\nimport { useSetClaimingCampaignRewardId } from 'state/campaigns/hooks';\nimport { getFullDisplayBalance } from 'utils/formatBalance';\nimport { useActiveWeb3React } from '../../hooks';\nimport { NotificationType, useBlockNumber, useTransactionNotify } from '../application/hooks';\nimport { checkedTransaction, finalizeTransaction } from './actions';\nexport function shouldCheck(lastBlockNumber, tx) {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  var blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  var minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\nexport default function Updater() {\n  _s();\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      chainId = _useActiveWeb3React.chainId,\n      library = _useActiveWeb3React.library;\n\n  var lastBlockNumber = useBlockNumber();\n  var dispatch = useDispatch();\n  var state = useSelector(function (state) {\n    return state.transactions;\n  });\n  var transactions = useMemo(function () {\n    var _state$chainId;\n\n    return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n  }, [chainId, state]); // show popup on confirm\n\n  var parseTransactionType = useCallback(function (receipt) {\n    var _transactions$receipt;\n\n    return (_transactions$receipt = transactions[receipt.transactionHash]) === null || _transactions$receipt === void 0 ? void 0 : _transactions$receipt.type;\n  }, [transactions]);\n  var parseTransactionSummary = useCallback(function (receipt) {\n    var _transactions$receipt3, _transactions$receipt5, _transactions$receipt6, _transactions$receipt7, _transactions$receipt8, _transactions$receipt9, _transactions$receipt10, _transactions$receipt11, _transactions$receipt12, _transactions$receipt13, _transactions$receipt14;\n\n    var log = undefined;\n\n    for (var i = 0; i < receipt.logs.length; i++) {\n      if (receipt.logs[i].topics.includes(AGGREGATOR_ROUTER_SWAPPED_EVENT_TOPIC)) {\n        log = receipt.logs[i];\n        break;\n      }\n    } // No event log includes Swapped event topic\n\n\n    if (!log) {\n      var _transactions$receipt2;\n\n      return (_transactions$receipt2 = transactions[receipt.transactionHash]) === null || _transactions$receipt2 === void 0 ? void 0 : _transactions$receipt2.summary;\n    } // Parse summary message for Swapped event\n\n\n    if (!transactions[receipt.transactionHash] || !((_transactions$receipt3 = transactions[receipt.transactionHash]) !== null && _transactions$receipt3 !== void 0 && _transactions$receipt3.arbitrary)) {\n      var _transactions$receipt4;\n\n      return (_transactions$receipt4 = transactions[receipt.transactionHash]) === null || _transactions$receipt4 === void 0 ? void 0 : _transactions$receipt4.summary;\n    }\n\n    var inputSymbol = (_transactions$receipt5 = transactions[receipt.transactionHash]) === null || _transactions$receipt5 === void 0 ? void 0 : (_transactions$receipt6 = _transactions$receipt5.arbitrary) === null || _transactions$receipt6 === void 0 ? void 0 : _transactions$receipt6.inputSymbol;\n    var outputSymbol = (_transactions$receipt7 = transactions[receipt.transactionHash]) === null || _transactions$receipt7 === void 0 ? void 0 : (_transactions$receipt8 = _transactions$receipt7.arbitrary) === null || _transactions$receipt8 === void 0 ? void 0 : _transactions$receipt8.outputSymbol;\n    var inputDecimals = (_transactions$receipt9 = transactions[receipt.transactionHash]) === null || _transactions$receipt9 === void 0 ? void 0 : (_transactions$receipt10 = _transactions$receipt9.arbitrary) === null || _transactions$receipt10 === void 0 ? void 0 : _transactions$receipt10.inputDecimals;\n    var outputDecimals = (_transactions$receipt11 = transactions[receipt.transactionHash]) === null || _transactions$receipt11 === void 0 ? void 0 : (_transactions$receipt12 = _transactions$receipt11.arbitrary) === null || _transactions$receipt12 === void 0 ? void 0 : _transactions$receipt12.outputDecimals;\n    var withRecipient = (_transactions$receipt13 = transactions[receipt.transactionHash]) === null || _transactions$receipt13 === void 0 ? void 0 : (_transactions$receipt14 = _transactions$receipt13.arbitrary) === null || _transactions$receipt14 === void 0 ? void 0 : _transactions$receipt14.withRecipient;\n\n    if (!inputSymbol || !outputSymbol || !inputDecimals || !outputDecimals) {\n      var _transactions$receipt15;\n\n      return (_transactions$receipt15 = transactions[receipt.transactionHash]) === null || _transactions$receipt15 === void 0 ? void 0 : _transactions$receipt15.summary;\n    }\n\n    var decodedValues = ethers.utils.defaultAbiCoder.decode(['address', 'address', 'address', 'address', 'uint256', 'uint256'], log.data);\n    var inputAmount = getFullDisplayBalance(BigNumber.from(decodedValues[4].toString()), inputDecimals, 3);\n    var outputAmount = getFullDisplayBalance(BigNumber.from(decodedValues[5].toString()), outputDecimals, 3);\n    var base = \"\".concat(inputAmount, \" \").concat(inputSymbol, \" for \").concat(outputAmount, \" \").concat(outputSymbol);\n    return \"\".concat(base, \" \").concat(withRecipient !== null && withRecipient !== void 0 ? withRecipient : '');\n  }, [transactions]);\n\n  var _useMixpanel = useMixpanel(),\n      mixpanelHandler = _useMixpanel.mixpanelHandler,\n      subgraphMixpanelHandler = _useMixpanel.subgraphMixpanelHandler;\n\n  var transactionNotify = useTransactionNotify();\n  var setClaimingCampaignRewardId = useSetClaimingCampaignRewardId()[1];\n  useEffect(function () {\n    if (!chainId || !library || !lastBlockNumber) return;\n\n    var uniqueTransactions = _toConsumableArray(new Set(Object.keys(transactions)));\n\n    uniqueTransactions.filter(function (hash) {\n      return shouldCheck(lastBlockNumber, transactions[hash]);\n    }).forEach(function (hash) {\n      library.getTransactionReceipt(hash).then(function (receipt) {\n        if (receipt) {\n          var transaction = transactions[receipt.transactionHash];\n          dispatch(finalizeTransaction({\n            chainId: chainId,\n            hash: hash,\n            receipt: {\n              blockHash: receipt.blockHash,\n              blockNumber: receipt.blockNumber,\n              contractAddress: receipt.contractAddress,\n              from: receipt.from,\n              status: receipt.status,\n              to: receipt.to,\n              transactionHash: receipt.transactionHash,\n              transactionIndex: receipt.transactionIndex,\n              gasUsed: receipt.gasUsed,\n              effectiveGasPrice: receipt.effectiveGasPrice\n            },\n            needCheckSubgraph: NEED_CHECK_SUBGRAPH_TRANSACTION_TYPES.includes(transaction.type || '')\n          }));\n          transactionNotify({\n            hash: hash,\n            notiType: receipt.status === 1 ? NotificationType.SUCCESS : NotificationType.ERROR,\n            type: parseTransactionType(receipt),\n            summary: parseTransactionSummary(receipt)\n          });\n\n          if (receipt.status === 1 && transaction) {\n            switch (transaction.type) {\n              case 'Swap':\n                {\n                  if (transaction.arbitrary) {\n                    mixpanelHandler(MIXPANEL_TYPE.SWAP_COMPLETED, {\n                      arbitrary: transaction.arbitrary,\n                      actual_gas: receipt.gasUsed || BigNumber.from(0),\n                      gas_price: receipt.effectiveGasPrice || BigNumber.from(0),\n                      tx_hash: hash\n                    });\n                  }\n\n                  break;\n                }\n\n              case 'Collect fee':\n                {\n                  if (transaction.arbitrary) {\n                    mixpanelHandler(MIXPANEL_TYPE.ELASTIC_COLLECT_FEES_COMPLETED, transaction.arbitrary);\n                  }\n\n                  break;\n                }\n\n              case 'Increase liquidity':\n                {\n                  if (transaction.arbitrary) {\n                    mixpanelHandler(MIXPANEL_TYPE.ELASTIC_INCREASE_LIQUIDITY_COMPLETED, _objectSpread(_objectSpread({}, transaction.arbitrary), {}, {\n                      tx_hash: hash\n                    }));\n                  }\n\n                  break;\n                }\n\n              case 'Claim':\n                {\n                  // claim campaign reward successfully\n                  // reset id claiming when finished\n                  if (window.location.pathname.startsWith(AppPaths.CAMPAIGN)) setClaimingCampaignRewardId(null);\n                  break;\n                }\n\n              default:\n                break;\n            }\n          }\n        } else {\n          dispatch(checkedTransaction({\n            chainId: chainId,\n            hash: hash,\n            blockNumber: lastBlockNumber\n          }));\n        }\n      }).catch(function (error) {\n        console.error(\"failed to check transaction hash: \".concat(hash), error);\n      });\n    });\n    uniqueTransactions.filter(function (hash) {\n      var _transactions$hash;\n\n      return (_transactions$hash = transactions[hash]) === null || _transactions$hash === void 0 ? void 0 : _transactions$hash.needCheckSubgraph;\n    }).forEach( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(hash) {\n        var transaction;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                transaction = transactions[hash];\n\n                try {\n                  subgraphMixpanelHandler(transaction);\n                } catch (error) {\n                  console.log(error);\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()); // eslint-disable-next-line\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, parseTransactionSummary, parseTransactionType]);\n  return null;\n}\n\n_s(Updater, \"RHpcmaiABFAYOoKSRm2sQkxgtsM=\", false, function () {\n  return [useActiveWeb3React, useBlockNumber, useDispatch, useSelector, useMixpanel, useTransactionNotify, useSetClaimingCampaignRewardId];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"names":["BigNumber","ethers","useCallback","useEffect","useMemo","useDispatch","useSelector","AGGREGATOR_ROUTER_SWAPPED_EVENT_TOPIC","useMixpanel","MIXPANEL_TYPE","NEED_CHECK_SUBGRAPH_TRANSACTION_TYPES","AppPaths","useSetClaimingCampaignRewardId","getFullDisplayBalance","useActiveWeb3React","NotificationType","useBlockNumber","useTransactionNotify","checkedTransaction","finalizeTransaction","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","chainId","library","dispatch","state","transactions","parseTransactionType","transactionHash","type","parseTransactionSummary","log","undefined","i","logs","length","topics","includes","summary","arbitrary","inputSymbol","outputSymbol","inputDecimals","outputDecimals","withRecipient","decodedValues","utils","defaultAbiCoder","decode","data","inputAmount","from","toString","outputAmount","base","mixpanelHandler","subgraphMixpanelHandler","transactionNotify","setClaimingCampaignRewardId","uniqueTransactions","Set","Object","keys","filter","hash","forEach","getTransactionReceipt","then","transaction","blockHash","blockNumber","contractAddress","status","to","transactionIndex","gasUsed","effectiveGasPrice","needCheckSubgraph","notiType","SUCCESS","ERROR","SWAP_COMPLETED","actual_gas","gas_price","tx_hash","ELASTIC_COLLECT_FEES_COMPLETED","ELASTIC_INCREASE_LIQUIDITY_COMPLETED","window","location","pathname","startsWith","CAMPAIGN","catch","error","console"],"sources":["/Applications/XAMPP/voxel-interface/src/state/transactions/updater.tsx"],"sourcesContent":["import { TransactionReceipt } from '@ethersproject/abstract-provider'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ethers } from 'ethers'\nimport { useCallback, useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { AGGREGATOR_ROUTER_SWAPPED_EVENT_TOPIC } from 'constants/index'\nimport useMixpanel, { MIXPANEL_TYPE, NEED_CHECK_SUBGRAPH_TRANSACTION_TYPES } from 'hooks/useMixpanel'\nimport { AppPaths } from 'pages/App'\nimport { useSetClaimingCampaignRewardId } from 'state/campaigns/hooks'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { NotificationType, useBlockNumber, useTransactionNotify } from '../application/hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { SerializableTransactionReceipt, checkedTransaction, finalizeTransaction } from './actions'\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: { addedTime: number; receipt?: SerializableTransactionReceipt; lastCheckedBlockNumber?: number },\n): boolean {\n  if (tx.receipt) return false\n  if (!tx.lastCheckedBlockNumber) return true\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber\n  if (blocksSinceCheck < 1) return false\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2\n  } else {\n    // otherwise every block\n    return true\n  }\n}\n\nexport default function Updater(): null {\n  const { chainId, library } = useActiveWeb3React()\n\n  const lastBlockNumber = useBlockNumber()\n  const dispatch = useDispatch<AppDispatch>()\n  const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  const transactions = useMemo(() => (chainId ? state[chainId] ?? {} : {}), [chainId, state])\n\n  // show popup on confirm\n\n  const parseTransactionType = useCallback(\n    (receipt: TransactionReceipt): string | undefined => {\n      return transactions[receipt.transactionHash]?.type\n    },\n    [transactions],\n  )\n\n  const parseTransactionSummary = useCallback(\n    (receipt: TransactionReceipt): string | undefined => {\n      let log = undefined\n\n      for (let i = 0; i < receipt.logs.length; i++) {\n        if (receipt.logs[i].topics.includes(AGGREGATOR_ROUTER_SWAPPED_EVENT_TOPIC)) {\n          log = receipt.logs[i]\n          break\n        }\n      }\n\n      // No event log includes Swapped event topic\n      if (!log) {\n        return transactions[receipt.transactionHash]?.summary\n      }\n\n      // Parse summary message for Swapped event\n      if (!transactions[receipt.transactionHash] || !transactions[receipt.transactionHash]?.arbitrary) {\n        return transactions[receipt.transactionHash]?.summary\n      }\n\n      const inputSymbol = transactions[receipt.transactionHash]?.arbitrary?.inputSymbol\n      const outputSymbol = transactions[receipt.transactionHash]?.arbitrary?.outputSymbol\n      const inputDecimals = transactions[receipt.transactionHash]?.arbitrary?.inputDecimals\n      const outputDecimals = transactions[receipt.transactionHash]?.arbitrary?.outputDecimals\n      const withRecipient = transactions[receipt.transactionHash]?.arbitrary?.withRecipient\n\n      if (!inputSymbol || !outputSymbol || !inputDecimals || !outputDecimals) {\n        return transactions[receipt.transactionHash]?.summary\n      }\n\n      const decodedValues = ethers.utils.defaultAbiCoder.decode(\n        ['address', 'address', 'address', 'address', 'uint256', 'uint256'],\n        log.data,\n      )\n\n      const inputAmount = getFullDisplayBalance(BigNumber.from(decodedValues[4].toString()), inputDecimals, 3)\n      const outputAmount = getFullDisplayBalance(BigNumber.from(decodedValues[5].toString()), outputDecimals, 3)\n\n      const base = `${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\n\n      return `${base} ${withRecipient ?? ''}`\n    },\n    [transactions],\n  )\n  const { mixpanelHandler, subgraphMixpanelHandler } = useMixpanel()\n  const transactionNotify = useTransactionNotify()\n  const setClaimingCampaignRewardId = useSetClaimingCampaignRewardId()[1]\n\n  useEffect(() => {\n    if (!chainId || !library || !lastBlockNumber) return\n    const uniqueTransactions = [...new Set(Object.keys(transactions))]\n\n    uniqueTransactions\n      .filter(hash => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach(hash => {\n        library\n          .getTransactionReceipt(hash)\n          .then(receipt => {\n            if (receipt) {\n              const transaction = transactions[receipt.transactionHash]\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                    gasUsed: receipt.gasUsed,\n                    effectiveGasPrice: receipt.effectiveGasPrice,\n                  },\n                  needCheckSubgraph: NEED_CHECK_SUBGRAPH_TRANSACTION_TYPES.includes(transaction.type || ''),\n                }),\n              )\n\n              transactionNotify({\n                hash,\n                notiType: receipt.status === 1 ? NotificationType.SUCCESS : NotificationType.ERROR,\n                type: parseTransactionType(receipt),\n                summary: parseTransactionSummary(receipt),\n              })\n              if (receipt.status === 1 && transaction) {\n                switch (transaction.type) {\n                  case 'Swap': {\n                    if (transaction.arbitrary) {\n                      mixpanelHandler(MIXPANEL_TYPE.SWAP_COMPLETED, {\n                        arbitrary: transaction.arbitrary,\n                        actual_gas: receipt.gasUsed || BigNumber.from(0),\n                        gas_price: receipt.effectiveGasPrice || BigNumber.from(0),\n                        tx_hash: hash,\n                      })\n                    }\n                    break\n                  }\n                  case 'Collect fee': {\n                    if (transaction.arbitrary) {\n                      mixpanelHandler(MIXPANEL_TYPE.ELASTIC_COLLECT_FEES_COMPLETED, transaction.arbitrary)\n                    }\n                    break\n                  }\n                  case 'Increase liquidity': {\n                    if (transaction.arbitrary) {\n                      mixpanelHandler(MIXPANEL_TYPE.ELASTIC_INCREASE_LIQUIDITY_COMPLETED, {\n                        ...transaction.arbitrary,\n                        tx_hash: hash,\n                      })\n                    }\n                    break\n                  }\n                  case 'Claim': {\n                    // claim campaign reward successfully\n                    // reset id claiming when finished\n                    if (window.location.pathname.startsWith(AppPaths.CAMPAIGN)) setClaimingCampaignRewardId(null)\n                    break\n                  }\n                  default:\n                    break\n                }\n              }\n            } else {\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }))\n            }\n          })\n          .catch(error => {\n            console.error(`failed to check transaction hash: ${hash}`, error)\n          })\n      })\n    uniqueTransactions\n      .filter(hash => transactions[hash]?.needCheckSubgraph)\n      .forEach(async (hash: string) => {\n        const transaction = transactions[hash]\n        try {\n          subgraphMixpanelHandler(transaction)\n        } catch (error) {\n          console.log(error)\n        }\n      })\n\n    // eslint-disable-next-line\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, parseTransactionSummary, parseTransactionType])\n\n  return null\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}