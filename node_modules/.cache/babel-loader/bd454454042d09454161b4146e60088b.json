{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { addTransaction } from './actions';\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder() {\n  _s();\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      chainId = _useActiveWeb3React.chainId,\n      account = _useActiveWeb3React.account;\n\n  var dispatch = useDispatch();\n  return useCallback(function (response) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        desiredChainId = _ref.desiredChainId,\n        type = _ref.type,\n        summary = _ref.summary,\n        approval = _ref.approval,\n        claim = _ref.claim,\n        arbitrary = _ref.arbitrary;\n\n    if (!account) return;\n    if (!chainId) return;\n    var hash = response.hash;\n\n    if (!hash) {\n      throw Error('No transaction hash found.');\n    }\n\n    dispatch(addTransaction({\n      hash: hash,\n      from: account,\n      chainId: desiredChainId !== null && desiredChainId !== void 0 ? desiredChainId : chainId,\n      approval: approval,\n      type: type,\n      summary: summary,\n      claim: claim,\n      arbitrary: arbitrary\n    }));\n  }, [account, chainId, dispatch]);\n} // returns all the transactions for the current chain\n\n_s(useTransactionAdder, \"MEh+TAztv1BWq5c2lTL2SEy/Uq8=\", false, function () {\n  return [useActiveWeb3React, useDispatch];\n});\n\nexport function useAllTransactions() {\n  _s2();\n\n  var _state$chainId;\n\n  var _useActiveWeb3React2 = useActiveWeb3React(),\n      chainId = _useActiveWeb3React2.chainId;\n\n  var state = useSelector(function (state) {\n    return state.transactions;\n  });\n  return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n}\n\n_s2(useAllTransactions, \"3FhVoM2yUUuTIyL07ycVqdy9Zqs=\", false, function () {\n  return [useActiveWeb3React, useSelector];\n});\n\nexport function useIsTransactionPending(transactionHash) {\n  _s3();\n\n  var transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) return false;\n  return !transactions[transactionHash].receipt;\n}\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\n\n_s3(useIsTransactionPending, \"hqz1TRfIl9I1+vK9TqtScGR9Kdg=\", false, function () {\n  return [useAllTransactions];\n});\n\nexport function isTransactionRecent(tx) {\n  return new Date().getTime() - tx.addedTime < 86400000;\n} // returns whether a token has a pending approval transaction\n\nexport function useHasPendingApproval(tokenAddress, spender) {\n  _s4();\n\n  var allTransactions = useAllTransactions();\n  return useMemo(function () {\n    return typeof tokenAddress === 'string' && typeof spender === 'string' && Object.keys(allTransactions).some(function (hash) {\n      var tx = allTransactions[hash];\n      if (!tx) return false;\n\n      if (tx.receipt) {\n        return false;\n      } else {\n        var approval = tx.approval;\n        if (!approval) return false;\n        return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\n      }\n    });\n  }, [allTransactions, spender, tokenAddress]);\n} // watch for submissions to claim\n// return null if not done loading, return undefined if not found\n\n_s4(useHasPendingApproval, \"VezVe/KwFqNDaRAkqywKb3KU5lg=\", false, function () {\n  return [useAllTransactions];\n});\n\nexport function useUserHasSubmittedClaim(account) {\n  _s5();\n\n  var allTransactions = useAllTransactions(); // get the txn if it has been submitted\n\n  var claimTxn = useMemo(function () {\n    var txnIndex = Object.keys(allTransactions).find(function (hash) {\n      var tx = allTransactions[hash];\n      return tx.claim && tx.claim.recipient === account;\n    });\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined;\n  }, [account, allTransactions]);\n  return {\n    claimSubmitted: Boolean(claimTxn),\n    claimTxn: claimTxn\n  };\n}\n\n_s5(useUserHasSubmittedClaim, \"VV0KKHrbuq348q6dk6Qn9MylTW8=\", false, function () {\n  return [useAllTransactions];\n});","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","useActiveWeb3React","addTransaction","useTransactionAdder","chainId","account","dispatch","response","desiredChainId","type","summary","approval","claim","arbitrary","hash","Error","from","useAllTransactions","state","transactions","useIsTransactionPending","transactionHash","receipt","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some","useUserHasSubmittedClaim","claimTxn","txnIndex","find","recipient","undefined","claimSubmitted","Boolean"],"sources":["/Applications/XAMPP/voxel-interface/src/state/transactions/hooks.tsx"],"sourcesContent":["import { TransactionResponse } from '@ethersproject/providers'\nimport { ChainId } from '@kyberswap/ks-sdk-core'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { addTransaction } from './actions'\nimport { TransactionDetails } from './reducer'\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: {\n    desiredChainId?: ChainId // ChainID after switching.\n    type?: string\n    summary?: string\n    approval?: { tokenAddress: string; spender: string }\n    claim?: { recipient: string }\n    arbitrary?: any\n  },\n) => void {\n  const { chainId, account } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      {\n        desiredChainId,\n        type,\n        summary,\n        approval,\n        claim,\n        arbitrary,\n      }: {\n        desiredChainId?: ChainId\n        type?: string\n        summary?: string\n        claim?: { recipient: string }\n        approval?: { tokenAddress: string; spender: string }\n        arbitrary?: any\n      } = {},\n    ) => {\n      if (!account) return\n      if (!chainId) return\n\n      const { hash } = response\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(\n        addTransaction({\n          hash,\n          from: account,\n          chainId: desiredChainId ?? chainId,\n          approval,\n          type,\n          summary,\n          claim,\n          arbitrary,\n        }),\n      )\n    },\n    [account, chainId, dispatch],\n  )\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useActiveWeb3React()\n\n  const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return !transactions[transactionHash].receipt\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions()\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some(hash => {\n        const tx = allTransactions[hash]\n        if (!tx) return false\n        if (tx.receipt) {\n          return false\n        } else {\n          const approval = tx.approval\n          if (!approval) return false\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx)\n        }\n      }),\n    [allTransactions, spender, tokenAddress],\n  )\n}\n\n// watch for submissions to claim\n// return null if not done loading, return undefined if not found\nexport function useUserHasSubmittedClaim(account?: string): {\n  claimSubmitted: boolean\n  claimTxn: TransactionDetails | undefined\n} {\n  const allTransactions = useAllTransactions()\n\n  // get the txn if it has been submitted\n  const claimTxn = useMemo(() => {\n    const txnIndex = Object.keys(allTransactions).find(hash => {\n      const tx = allTransactions[hash]\n      return tx.claim && tx.claim.recipient === account\n    })\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined\n  }, [account, allTransactions])\n\n  return { claimSubmitted: Boolean(claimTxn), claimTxn }\n}\n"],"mappings":";;;;;;AAEA,SAASA,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,kBAAT,QAAmC,aAAnC;AAEA,SAASC,cAAT,QAA+B,WAA/B;AAGA;AACA,OAAO,SAASC,mBAAT,GAUG;EAAA;;EACR,0BAA6BF,kBAAkB,EAA/C;EAAA,IAAQG,OAAR,uBAAQA,OAAR;EAAA,IAAiBC,OAAjB,uBAAiBA,OAAjB;;EACA,IAAMC,QAAQ,GAAGP,WAAW,EAA5B;EAEA,OAAOF,WAAW,CAChB,UACEU,QADF,EAiBK;IAAA,+EADC,EACD;IAAA,IAdDC,cAcC,QAdDA,cAcC;IAAA,IAbDC,IAaC,QAbDA,IAaC;IAAA,IAZDC,OAYC,QAZDA,OAYC;IAAA,IAXDC,QAWC,QAXDA,QAWC;IAAA,IAVDC,KAUC,QAVDA,KAUC;IAAA,IATDC,SASC,QATDA,SASC;;IACH,IAAI,CAACR,OAAL,EAAc;IACd,IAAI,CAACD,OAAL,EAAc;IAEd,IAAQU,IAAR,GAAiBP,QAAjB,CAAQO,IAAR;;IACA,IAAI,CAACA,IAAL,EAAW;MACT,MAAMC,KAAK,CAAC,4BAAD,CAAX;IACD;;IACDT,QAAQ,CACNJ,cAAc,CAAC;MACbY,IAAI,EAAJA,IADa;MAEbE,IAAI,EAAEX,OAFO;MAGbD,OAAO,EAAEI,cAAF,aAAEA,cAAF,cAAEA,cAAF,GAAoBJ,OAHd;MAIbO,QAAQ,EAARA,QAJa;MAKbF,IAAI,EAAJA,IALa;MAMbC,OAAO,EAAPA,OANa;MAObE,KAAK,EAALA,KAPa;MAQbC,SAAS,EAATA;IARa,CAAD,CADR,CAAR;EAYD,CAtCe,EAuChB,CAACR,OAAD,EAAUD,OAAV,EAAmBE,QAAnB,CAvCgB,CAAlB;AAyCD,C,CAED;;GAzDgBH,mB;UAWeF,kB,EACZF,W;;;AA8CnB,OAAO,SAASkB,kBAAT,GAAwE;EAAA;;EAAA;;EAC7E,2BAAoBhB,kBAAkB,EAAtC;EAAA,IAAQG,OAAR,wBAAQA,OAAR;;EAEA,IAAMc,KAAK,GAAGlB,WAAW,CAAqC,UAAAkB,KAAK;IAAA,OAAIA,KAAK,CAACC,YAAV;EAAA,CAA1C,CAAzB;EAEA,OAAOf,OAAO,qBAAGc,KAAK,CAACd,OAAD,CAAR,2DAAqB,EAArB,GAA0B,EAAxC;AACD;;IANea,kB;UACMhB,kB,EAEND,W;;;AAKhB,OAAO,SAASoB,uBAAT,CAAiCC,eAAjC,EAAoE;EAAA;;EACzE,IAAMF,YAAY,GAAGF,kBAAkB,EAAvC;EAEA,IAAI,CAACI,eAAD,IAAoB,CAACF,YAAY,CAACE,eAAD,CAArC,EAAwD,OAAO,KAAP;EAExD,OAAO,CAACF,YAAY,CAACE,eAAD,CAAZ,CAA8BC,OAAtC;AACD;AAED;AACA;AACA;AACA;;IAXgBF,uB;UACOH,kB;;;AAWvB,OAAO,SAASM,mBAAT,CAA6BC,EAA7B,EAA8D;EACnE,OAAO,IAAIC,IAAJ,GAAWC,OAAX,KAAuBF,EAAE,CAACG,SAA1B,GAAsC,QAA7C;AACD,C,CAED;;AACA,OAAO,SAASC,qBAAT,CAA+BC,YAA/B,EAAiEC,OAAjE,EAAuG;EAAA;;EAC5G,IAAMC,eAAe,GAAGd,kBAAkB,EAA1C;EACA,OAAOnB,OAAO,CACZ;IAAA,OACE,OAAO+B,YAAP,KAAwB,QAAxB,IACA,OAAOC,OAAP,KAAmB,QADnB,IAEAE,MAAM,CAACC,IAAP,CAAYF,eAAZ,EAA6BG,IAA7B,CAAkC,UAAApB,IAAI,EAAI;MACxC,IAAMU,EAAE,GAAGO,eAAe,CAACjB,IAAD,CAA1B;MACA,IAAI,CAACU,EAAL,EAAS,OAAO,KAAP;;MACT,IAAIA,EAAE,CAACF,OAAP,EAAgB;QACd,OAAO,KAAP;MACD,CAFD,MAEO;QACL,IAAMX,QAAQ,GAAGa,EAAE,CAACb,QAApB;QACA,IAAI,CAACA,QAAL,EAAe,OAAO,KAAP;QACf,OAAOA,QAAQ,CAACmB,OAAT,KAAqBA,OAArB,IAAgCnB,QAAQ,CAACkB,YAAT,KAA0BA,YAA1D,IAA0EN,mBAAmB,CAACC,EAAD,CAApG;MACD;IACF,CAVD,CAHF;EAAA,CADY,EAeZ,CAACO,eAAD,EAAkBD,OAAlB,EAA2BD,YAA3B,CAfY,CAAd;AAiBD,C,CAED;AACA;;IAtBgBD,qB;UACUX,kB;;;AAsB1B,OAAO,SAASkB,wBAAT,CAAkC9B,OAAlC,EAGL;EAAA;;EACA,IAAM0B,eAAe,GAAGd,kBAAkB,EAA1C,CADA,CAGA;;EACA,IAAMmB,QAAQ,GAAGtC,OAAO,CAAC,YAAM;IAC7B,IAAMuC,QAAQ,GAAGL,MAAM,CAACC,IAAP,CAAYF,eAAZ,EAA6BO,IAA7B,CAAkC,UAAAxB,IAAI,EAAI;MACzD,IAAMU,EAAE,GAAGO,eAAe,CAACjB,IAAD,CAA1B;MACA,OAAOU,EAAE,CAACZ,KAAH,IAAYY,EAAE,CAACZ,KAAH,CAAS2B,SAAT,KAAuBlC,OAA1C;IACD,CAHgB,CAAjB;IAIA,OAAOgC,QAAQ,IAAIN,eAAe,CAACM,QAAD,CAA3B,GAAwCN,eAAe,CAACM,QAAD,CAAvD,GAAoEG,SAA3E;EACD,CANuB,EAMrB,CAACnC,OAAD,EAAU0B,eAAV,CANqB,CAAxB;EAQA,OAAO;IAAEU,cAAc,EAAEC,OAAO,CAACN,QAAD,CAAzB;IAAqCA,QAAQ,EAARA;EAArC,CAAP;AACD;;IAhBeD,wB;UAIUlB,kB"},"metadata":{},"sourceType":"module"}