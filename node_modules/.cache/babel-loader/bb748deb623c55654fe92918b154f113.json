{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport useSWR from 'swr';\nexport default function useAggregatorAPR() {\n  _s();\n\n  var fetcher = function fetcher(url) {\n    return fetch(url).then(function (r) {\n      return r.json();\n    });\n  };\n\n  var url = \"\".concat(process.env.REACT_APP_AGGREGATOR_STATS_API, \"/api/max-apr-and-total-earning\");\n\n  var _useSWR = useSWR(url, fetcher, {\n    refreshInterval: 10000,\n    onErrorRetry: function onErrorRetry(error, _key, _config, revalidate, _ref) {\n      var retryCount = _ref.retryCount;\n      // Never retry on 404.\n      if (error.status === 404) return; // Only retry up to 10 times.\n\n      if (retryCount >= 10) return;\n\n      if (error.status === 403) {\n        // If API return 403, retry after 30 seconds.\n        setTimeout(function () {\n          return revalidate({\n            retryCount: retryCount\n          });\n        }, 30000);\n        return;\n      } // Retry after 5 seconds.\n\n\n      setTimeout(function () {\n        return revalidate({\n          retryCount: retryCount\n        });\n      }, 5000);\n    }\n  }),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  if (error) {\n    console.error(error.message);\n  }\n\n  return data;\n}\n\n_s(useAggregatorAPR, \"r2QYs02BSrn+Eu/1uMGZi8N+HnQ=\", false, function () {\n  return [useSWR];\n});","map":{"version":3,"names":["useSWR","useAggregatorAPR","fetcher","url","fetch","then","r","json","process","env","REACT_APP_AGGREGATOR_STATS_API","refreshInterval","onErrorRetry","error","_key","_config","revalidate","retryCount","status","setTimeout","data","console","message"],"sources":["/Applications/XAMPP/voxel-interface/src/hooks/useAggregatorAPR.ts"],"sourcesContent":["import useSWR from 'swr'\n\ninterface APRResponse {\n  max_apr: {\n    value: number\n    id: string\n    chain_id: number\n    is_farm: boolean\n  }\n  total_earnings: number\n}\n\nexport default function useAggregatorAPR(): APRResponse {\n  const fetcher = (url: string) => fetch(url).then(r => r.json())\n\n  const url = `${process.env.REACT_APP_AGGREGATOR_STATS_API}/api/max-apr-and-total-earning`\n\n  const { data, error } = useSWR(url, fetcher, {\n    refreshInterval: 10000,\n    onErrorRetry: (error, _key, _config, revalidate, { retryCount }) => {\n      // Never retry on 404.\n      if (error.status === 404) return\n\n      // Only retry up to 10 times.\n      if (retryCount >= 10) return\n\n      if (error.status === 403) {\n        // If API return 403, retry after 30 seconds.\n        setTimeout(() => revalidate({ retryCount }), 30000)\n        return\n      }\n\n      // Retry after 5 seconds.\n      setTimeout(() => revalidate({ retryCount }), 5000)\n    },\n  })\n\n  if (error) {\n    console.error(error.message)\n  }\n\n  return data\n}\n"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,KAAnB;AAYA,eAAe,SAASC,gBAAT,GAAyC;EAAA;;EACtD,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD;IAAA,OAAiBC,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgB,UAAAC,CAAC;MAAA,OAAIA,CAAC,CAACC,IAAF,EAAJ;IAAA,CAAjB,CAAjB;EAAA,CAAhB;;EAEA,IAAMJ,GAAG,aAAMK,OAAO,CAACC,GAAR,CAAYC,8BAAlB,mCAAT;;EAEA,cAAwBV,MAAM,CAACG,GAAD,EAAMD,OAAN,EAAe;IAC3CS,eAAe,EAAE,KAD0B;IAE3CC,YAAY,EAAE,sBAACC,KAAD,EAAQC,IAAR,EAAcC,OAAd,EAAuBC,UAAvB,QAAsD;MAAA,IAAjBC,UAAiB,QAAjBA,UAAiB;MAClE;MACA,IAAIJ,KAAK,CAACK,MAAN,KAAiB,GAArB,EAA0B,OAFwC,CAIlE;;MACA,IAAID,UAAU,IAAI,EAAlB,EAAsB;;MAEtB,IAAIJ,KAAK,CAACK,MAAN,KAAiB,GAArB,EAA0B;QACxB;QACAC,UAAU,CAAC;UAAA,OAAMH,UAAU,CAAC;YAAEC,UAAU,EAAVA;UAAF,CAAD,CAAhB;QAAA,CAAD,EAAmC,KAAnC,CAAV;QACA;MACD,CAXiE,CAalE;;;MACAE,UAAU,CAAC;QAAA,OAAMH,UAAU,CAAC;UAAEC,UAAU,EAAVA;QAAF,CAAD,CAAhB;MAAA,CAAD,EAAmC,IAAnC,CAAV;IACD;EAjB0C,CAAf,CAA9B;EAAA,IAAQG,IAAR,WAAQA,IAAR;EAAA,IAAcP,KAAd,WAAcA,KAAd;;EAoBA,IAAIA,KAAJ,EAAW;IACTQ,OAAO,CAACR,KAAR,CAAcA,KAAK,CAACS,OAApB;EACD;;EAED,OAAOF,IAAP;AACD;;GA9BuBnB,gB;UAKED,M"},"metadata":{},"sourceType":"module"}