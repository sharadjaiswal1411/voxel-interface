{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport Web3ProviderEngine from 'web3-provider-engine';\nimport { TrezorSubprovider } from '@0x/subproviders/lib/src/subproviders/trezor';\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js';\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar TrezorConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(TrezorConnector, _AbstractConnector);\n\n  function TrezorConnector(_ref) {\n    var _this;\n\n    var chainId = _ref.chainId,\n        url = _ref.url,\n        pollingInterval = _ref.pollingInterval,\n        requestTimeoutMs = _ref.requestTimeoutMs,\n        _ref$config = _ref.config,\n        config = _ref$config === void 0 ? {} : _ref$config,\n        manifestEmail = _ref.manifestEmail,\n        manifestAppUrl = _ref.manifestAppUrl;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [chainId]\n    }) || this;\n    _this.chainId = chainId;\n    _this.url = url;\n    _this.pollingInterval = pollingInterval;\n    _this.requestTimeoutMs = requestTimeoutMs;\n    _this.config = config;\n    _this.manifestEmail = manifestEmail;\n    _this.manifestAppUrl = manifestAppUrl;\n    return _this;\n  }\n\n  var _proto = TrezorConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _this3 = this;\n\n      var _temp3 = function _temp3() {\n        _this3.provider.start();\n\n        return {\n          provider: _this3.provider,\n          chainId: _this3.chainId\n        };\n      };\n\n      var _temp4 = function () {\n        if (!_this3.provider) {\n          return Promise.resolve(import('trezor-connect').then(function (m) {\n            var _m$default;\n\n            return (_m$default = m == null ? void 0 : m[\"default\"]) != null ? _m$default : m;\n          })).then(function (TrezorConnect) {\n            TrezorConnect.manifest({\n              email: _this3.manifestEmail,\n              appUrl: _this3.manifestAppUrl\n            });\n            var engine = new Web3ProviderEngine({\n              pollingInterval: _this3.pollingInterval\n            });\n            engine.addProvider(new TrezorSubprovider(_extends({\n              trezorConnectClientApi: TrezorConnect\n            }, _this3.config)));\n            engine.addProvider(new CacheSubprovider());\n            engine.addProvider(new RPCSubprovider(_this3.url, _this3.requestTimeoutMs));\n            _this3.provider = engine;\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n\n      return Promise.resolve(_this9.provider._providers[0].getAccountsAsync(1).then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    this.provider.stop();\n  };\n\n  return TrezorConnector;\n}(AbstractConnector);\n\nexport { TrezorConnector };","map":null,"metadata":{},"sourceType":"module"}