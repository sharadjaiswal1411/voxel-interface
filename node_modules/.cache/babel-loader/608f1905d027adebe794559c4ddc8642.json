{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar _regeneratorRuntime = require(\"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _toConsumableArray = require(\"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _asyncToGenerator = require(\"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decrypt = exports.encrypt = void 0;\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar util_1 = require(\"../util\");\n/**\n *\n * @param plainText string to be encrypted\n * @param secret hex representation of 32-byte secret\n * returns hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n * encrypted plainText.\n */\n\n\nfunction encrypt(_x, _x2) {\n  return _encrypt.apply(this, arguments);\n}\n\nfunction _encrypt() {\n  _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(plainText, secret) {\n    var ivBytes, secretKey, enc, encryptedResult, tagLength, authTag, encryptedPlaintext, authTagBytes, encryptedPlaintextBytes, concatted;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(secret.length !== 64)) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw Error(\"secret must be 256 bits\");\n\n          case 2:\n            ivBytes = crypto.getRandomValues(new Uint8Array(12));\n            _context2.next = 5;\n            return crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), {\n              name: \"aes-gcm\"\n            }, false, [\"encrypt\", \"decrypt\"]);\n\n          case 5:\n            secretKey = _context2.sent;\n            enc = new TextEncoder(); // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n\n            _context2.next = 9;\n            return window.crypto.subtle.encrypt({\n              name: \"AES-GCM\",\n              iv: ivBytes\n            }, secretKey, enc.encode(plainText));\n\n          case 9:\n            encryptedResult = _context2.sent;\n            tagLength = 16;\n            authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n            encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n            authTagBytes = new Uint8Array(authTag);\n            encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n            concatted = new Uint8Array([].concat(_toConsumableArray(ivBytes), _toConsumableArray(authTagBytes), _toConsumableArray(encryptedPlaintextBytes)));\n            return _context2.abrupt(\"return\", (0, util_1.uint8ArrayToHex)(concatted));\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _encrypt.apply(this, arguments);\n}\n\nexports.encrypt = encrypt;\n/**\n *\n * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n * @param secret hex string representation of 32-byte secret\n *\n * TODO: Update rxjs for promises\n */\n\nfunction decrypt(cipherText, secret) {\n  if (secret.length !== 64) throw Error(\"secret must be 256 bits\");\n  return new rxjs_1.Observable(function (subscriber) {\n    void _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var secretKey, encrypted, ivBytes, authTagBytes, encryptedPlaintextBytes, concattedBytes, algo, decrypted, decoder;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), {\n                name: \"aes-gcm\"\n              }, false, [\"encrypt\", \"decrypt\"]);\n\n            case 2:\n              secretKey = _context.sent;\n              encrypted = (0, util_1.hexStringToUint8Array)(cipherText);\n              ivBytes = encrypted.slice(0, 12);\n              authTagBytes = encrypted.slice(12, 28);\n              encryptedPlaintextBytes = encrypted.slice(28);\n              concattedBytes = new Uint8Array([].concat(_toConsumableArray(encryptedPlaintextBytes), _toConsumableArray(authTagBytes)));\n              algo = {\n                name: \"AES-GCM\",\n                iv: new Uint8Array(ivBytes)\n              };\n              _context.prev = 9;\n              _context.next = 12;\n              return window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n\n            case 12:\n              decrypted = _context.sent;\n              decoder = new TextDecoder();\n              subscriber.next(decoder.decode(decrypted));\n              subscriber.complete();\n              _context.next = 21;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](9);\n              subscriber.error(_context.t0);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[9, 18]]);\n    }))();\n  });\n}\n\nexports.decrypt = decrypt;","map":null,"metadata":{},"sourceType":"script"}