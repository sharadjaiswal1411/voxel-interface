{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereum_types_1 = require(\"ethereum-types\");\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar blob_1 = require(\"../abstract_data_types/types/blob\");\n\nvar constants_1 = require(\"../utils/constants\");\n\nvar StringDataType =\n/** @class */\nfunction (_super) {\n  __extends(StringDataType, _super);\n\n  function StringDataType(dataItem, dataTypeFactory) {\n    var _this = _super.call(this, dataItem, dataTypeFactory, StringDataType._SIZE_KNOWN_AT_COMPILE_TIME) || this;\n\n    if (!StringDataType.matchType(dataItem.type)) {\n      throw new Error(\"Tried to instantiate String with bad input: \" + dataItem);\n    }\n\n    return _this;\n  }\n\n  StringDataType.matchType = function (type) {\n    return type === ethereum_types_1.SolidityTypes.String;\n  }; // Disable prefer-function-over-method for inherited abstract methods.\n\n  /* tslint:disable prefer-function-over-method */\n\n\n  StringDataType.prototype.encodeValue = function (value) {\n    // Encoded value is of the form: <length><value>, with each field padded to be word-aligned.\n    // 1/3 Construct the value\n    var valueBuf = new Buffer(value);\n    var valueLengthInBytes = valueBuf.byteLength;\n    var wordsToStoreValuePadded = Math.ceil(valueLengthInBytes / constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n    var bytesToStoreValuePadded = wordsToStoreValuePadded * constants_1.constants.EVM_WORD_WIDTH_IN_BYTES;\n    var valueBufPadded = ethUtil.setLengthRight(valueBuf, bytesToStoreValuePadded); // 2/3 Construct the length\n\n    var lengthBuf = ethUtil.toBuffer(valueLengthInBytes);\n    var lengthBufPadded = ethUtil.setLengthLeft(lengthBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES); // 3/3 Combine length and value\n\n    var encodedValue = Buffer.concat([lengthBufPadded, valueBufPadded]);\n    return encodedValue;\n  };\n\n  StringDataType.prototype.decodeValue = function (calldata) {\n    // Encoded value is of the form: <length><value>, with each field padded to be word-aligned.\n    // 1/2 Decode length\n    var lengthBufPadded = calldata.popWord();\n    var lengthHexPadded = ethUtil.bufferToHex(lengthBufPadded);\n    var length = parseInt(lengthHexPadded, constants_1.constants.HEX_BASE); // 2/2 Decode value\n\n    var wordsToStoreValuePadded = Math.ceil(length / constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n    var valueBufPadded = calldata.popWords(wordsToStoreValuePadded);\n    var valueBuf = valueBufPadded.slice(0, length);\n    var value = valueBuf.toString('UTF-8');\n    return value;\n  };\n\n  StringDataType.prototype.getDefaultValue = function () {\n    return StringDataType._DEFAULT_VALUE;\n  };\n\n  StringDataType.prototype.getSignatureType = function () {\n    return ethereum_types_1.SolidityTypes.String;\n  };\n\n  StringDataType._SIZE_KNOWN_AT_COMPILE_TIME = false;\n  StringDataType._DEFAULT_VALUE = '';\n  return StringDataType;\n}(blob_1.AbstractBlobDataType);\n\nexports.StringDataType = StringDataType;","map":null,"metadata":{},"sourceType":"script"}