{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport default function fetchWaiting(_x, _x2) {\n  return _fetchWaiting.apply(this, arguments);\n}\n\nfunction _fetchWaiting() {\n  _fetchWaiting = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input, init) {\n    var minimumLoadingTime,\n        startTime,\n        response,\n        endTime,\n        timeoutTime,\n        _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            minimumLoadingTime = _args.length > 2 && _args[2] !== undefined ? _args[2] : 0;\n            startTime = Date.now();\n            _context.next = 4;\n            return fetch(input, init);\n\n          case 4:\n            response = _context.sent;\n            endTime = Date.now();\n            timeoutTime = minimumLoadingTime - (endTime - startTime);\n            _context.next = 9;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, timeoutTime);\n            });\n\n          case 9:\n            return _context.abrupt(\"return\", response);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchWaiting.apply(this, arguments);\n}","map":{"version":3,"names":["fetchWaiting","input","init","minimumLoadingTime","startTime","Date","now","fetch","response","endTime","timeoutTime","Promise","resolve","setTimeout"],"sources":["/Applications/XAMPP/voxel-interface/src/utils/fetchWaiting.ts"],"sourcesContent":["export default async function fetchWaiting(input: RequestInfo, init?: RequestInit, minimumLoadingTime = 0) {\n  const startTime = Date.now()\n  const response = await fetch(input, init)\n  const endTime = Date.now()\n  const timeoutTime = minimumLoadingTime - (endTime - startTime)\n  await new Promise(resolve => setTimeout(resolve, timeoutTime))\n  return response\n}\n"],"mappings":";;AAAA,wBAA8BA,YAA9B;EAAA;AAAA;;;6EAAe,iBAA4BC,KAA5B,EAAgDC,IAAhD;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAoEC,kBAApE,2DAAyF,CAAzF;YACPC,SADO,GACKC,IAAI,CAACC,GAAL,EADL;YAAA;YAAA,OAEUC,KAAK,CAACN,KAAD,EAAQC,IAAR,CAFf;;UAAA;YAEPM,QAFO;YAGPC,OAHO,GAGGJ,IAAI,CAACC,GAAL,EAHH;YAIPI,WAJO,GAIOP,kBAAkB,IAAIM,OAAO,GAAGL,SAAd,CAJzB;YAAA;YAAA,OAKP,IAAIO,OAAJ,CAAY,UAAAC,OAAO;cAAA,OAAIC,UAAU,CAACD,OAAD,EAAUF,WAAV,CAAd;YAAA,CAAnB,CALO;;UAAA;YAAA,iCAMNF,QANM;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C"},"metadata":{},"sourceType":"module"}