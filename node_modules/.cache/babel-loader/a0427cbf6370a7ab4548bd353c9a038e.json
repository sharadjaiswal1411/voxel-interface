{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { createAction } from '@reduxjs/toolkit';\nvar ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nvar LOWER_HEX_REGEX = /^0x[a-f0-9]*$/;\nexport function toCallKey(call) {\n  if (!ADDRESS_REGEX.test(call.address)) {\n    throw new Error(\"Invalid address: \".concat(call.address));\n  }\n\n  if (!LOWER_HEX_REGEX.test(call.callData)) {\n    throw new Error(\"Invalid hex: \".concat(call.callData));\n  }\n\n  var key = \"\".concat(call.address, \"-\").concat(call.callData);\n\n  if (call.gasRequired) {\n    if (!Number.isSafeInteger(call.gasRequired)) {\n      throw new Error(\"Invalid number: \".concat(call.gasRequired));\n    }\n\n    key += \"-\".concat(call.gasRequired);\n  }\n\n  return key;\n}\nexport function parseCallKey(callKey) {\n  var pcs = callKey.split('-');\n\n  if (![2, 3].includes(pcs.length)) {\n    throw new Error(\"Invalid call key: \".concat(callKey));\n  }\n\n  return _objectSpread({\n    address: pcs[0],\n    callData: pcs[1]\n  }, pcs[2] ? {\n    gasRequired: Number.parseInt(pcs[2])\n  } : {});\n}\nexport var addMulticallListeners = createAction('multicall/addMulticallListeners');\nexport var removeMulticallListeners = createAction('multicall/removeMulticallListeners');\nexport var fetchingMulticallResults = createAction('multicall/fetchingMulticallResults');\nexport var errorFetchingMulticallResults = createAction('multicall/errorFetchingMulticallResults');\nexport var updateMulticallResults = createAction('multicall/updateMulticallResults');","map":{"version":3,"names":["createAction","ADDRESS_REGEX","LOWER_HEX_REGEX","toCallKey","call","test","address","Error","callData","key","gasRequired","Number","isSafeInteger","parseCallKey","callKey","pcs","split","includes","length","parseInt","addMulticallListeners","removeMulticallListeners","fetchingMulticallResults","errorFetchingMulticallResults","updateMulticallResults"],"sources":["/Applications/XAMPP/voxel-interface/src/state/multicall/actions.ts"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit'\n\nexport interface Call {\n  address: string\n  callData: string\n  gasRequired?: number\n}\n\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nconst LOWER_HEX_REGEX = /^0x[a-f0-9]*$/\nexport function toCallKey(call: Call): string {\n  if (!ADDRESS_REGEX.test(call.address)) {\n    throw new Error(`Invalid address: ${call.address}`)\n  }\n  if (!LOWER_HEX_REGEX.test(call.callData)) {\n    throw new Error(`Invalid hex: ${call.callData}`)\n  }\n  let key = `${call.address}-${call.callData}`\n  if (call.gasRequired) {\n    if (!Number.isSafeInteger(call.gasRequired)) {\n      throw new Error(`Invalid number: ${call.gasRequired}`)\n    }\n    key += `-${call.gasRequired}`\n  }\n  return key\n}\n\nexport function parseCallKey(callKey: string): Call {\n  const pcs = callKey.split('-')\n  if (![2, 3].includes(pcs.length)) {\n    throw new Error(`Invalid call key: ${callKey}`)\n  }\n  return {\n    address: pcs[0],\n    callData: pcs[1],\n    ...(pcs[2] ? { gasRequired: Number.parseInt(pcs[2]) } : {}),\n  }\n}\n\nexport interface ListenerOptions {\n  // how often this data should be fetched, by default 1\n  readonly blocksPerFetch?: number\n  readonly gasRequired?: number | undefined\n}\n\nexport const addMulticallListeners = createAction<{ chainId: number; calls: Call[]; options?: ListenerOptions }>(\n  'multicall/addMulticallListeners',\n)\nexport const removeMulticallListeners = createAction<{ chainId: number; calls: Call[]; options?: ListenerOptions }>(\n  'multicall/removeMulticallListeners',\n)\nexport const fetchingMulticallResults = createAction<{ chainId: number; calls: Call[]; fetchingBlockNumber: number }>(\n  'multicall/fetchingMulticallResults',\n)\nexport const errorFetchingMulticallResults = createAction<{\n  chainId: number\n  calls: Call[]\n  fetchingBlockNumber: number\n}>('multicall/errorFetchingMulticallResults')\nexport const updateMulticallResults = createAction<{\n  chainId: number\n  blockNumber: number\n  results: {\n    [callKey: string]: string | null\n  }\n}>('multicall/updateMulticallResults')\n"],"mappings":";AAAA,SAASA,YAAT,QAA6B,kBAA7B;AAQA,IAAMC,aAAa,GAAG,qBAAtB;AACA,IAAMC,eAAe,GAAG,eAAxB;AACA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAuC;EAC5C,IAAI,CAACH,aAAa,CAACI,IAAd,CAAmBD,IAAI,CAACE,OAAxB,CAAL,EAAuC;IACrC,MAAM,IAAIC,KAAJ,4BAA8BH,IAAI,CAACE,OAAnC,EAAN;EACD;;EACD,IAAI,CAACJ,eAAe,CAACG,IAAhB,CAAqBD,IAAI,CAACI,QAA1B,CAAL,EAA0C;IACxC,MAAM,IAAID,KAAJ,wBAA0BH,IAAI,CAACI,QAA/B,EAAN;EACD;;EACD,IAAIC,GAAG,aAAML,IAAI,CAACE,OAAX,cAAsBF,IAAI,CAACI,QAA3B,CAAP;;EACA,IAAIJ,IAAI,CAACM,WAAT,EAAsB;IACpB,IAAI,CAACC,MAAM,CAACC,aAAP,CAAqBR,IAAI,CAACM,WAA1B,CAAL,EAA6C;MAC3C,MAAM,IAAIH,KAAJ,2BAA6BH,IAAI,CAACM,WAAlC,EAAN;IACD;;IACDD,GAAG,eAAQL,IAAI,CAACM,WAAb,CAAH;EACD;;EACD,OAAOD,GAAP;AACD;AAED,OAAO,SAASI,YAAT,CAAsBC,OAAtB,EAA6C;EAClD,IAAMC,GAAG,GAAGD,OAAO,CAACE,KAAR,CAAc,GAAd,CAAZ;;EACA,IAAI,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAOC,QAAP,CAAgBF,GAAG,CAACG,MAApB,CAAL,EAAkC;IAChC,MAAM,IAAIX,KAAJ,6BAA+BO,OAA/B,EAAN;EACD;;EACD;IACER,OAAO,EAAES,GAAG,CAAC,CAAD,CADd;IAEEP,QAAQ,EAAEO,GAAG,CAAC,CAAD;EAFf,GAGMA,GAAG,CAAC,CAAD,CAAH,GAAS;IAAEL,WAAW,EAAEC,MAAM,CAACQ,QAAP,CAAgBJ,GAAG,CAAC,CAAD,CAAnB;EAAf,CAAT,GAAoD,EAH1D;AAKD;AAQD,OAAO,IAAMK,qBAAqB,GAAGpB,YAAY,CAC/C,iCAD+C,CAA1C;AAGP,OAAO,IAAMqB,wBAAwB,GAAGrB,YAAY,CAClD,oCADkD,CAA7C;AAGP,OAAO,IAAMsB,wBAAwB,GAAGtB,YAAY,CAClD,oCADkD,CAA7C;AAGP,OAAO,IAAMuB,6BAA6B,GAAGvB,YAAY,CAItD,yCAJsD,CAAlD;AAKP,OAAO,IAAMwB,sBAAsB,GAAGxB,YAAY,CAM/C,kCAN+C,CAA3C"},"metadata":{},"sourceType":"module"}