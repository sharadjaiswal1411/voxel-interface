{"ast":null,"code":"import numbro from 'numbro';\nimport { EPSILON } from 'constants/index'; // using a currency library here in case we want to add more in future\n\nexport var formatDollarAmount = function formatDollarAmount(num) {\n  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var round = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (num === 0) return '$0.00';\n  if (!num) return '-';\n\n  if (num < 0.001 && digits <= 3) {\n    return '<$0.001';\n  }\n\n  return numbro(num).formatCurrency({\n    average: round,\n    mantissa: num > 1000 ? 2 : digits,\n    abbreviations: {\n      million: 'M',\n      billion: 'B'\n    }\n  });\n}; // using a currency library here in case we want to add more in future\n\nexport var formatAmount = function formatAmount(num) {\n  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  if (num === 0) return '0';\n  if (!num) return '-';\n\n  if (num < 0.001) {\n    return '<0.001';\n  }\n\n  return numbro(num).format({\n    average: true,\n    mantissa: num > 1000 ? 2 : digits,\n    abbreviations: {\n      million: 'M',\n      billion: 'B'\n    }\n  });\n};\nexport function isEqual(a, b) {\n  var ep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EPSILON;\n  return Math.abs(a - b) < ep;\n}","map":{"version":3,"names":["numbro","EPSILON","formatDollarAmount","num","digits","round","formatCurrency","average","mantissa","abbreviations","million","billion","formatAmount","format","isEqual","a","b","ep","Math","abs"],"sources":["/Applications/XAMPP/voxel-interface/src/utils/numbers.ts"],"sourcesContent":["import numbro from 'numbro'\n\nimport { EPSILON } from 'constants/index'\n\n// using a currency library here in case we want to add more in future\nexport const formatDollarAmount = (num: number | undefined, digits = 2, round = true) => {\n  if (num === 0) return '$0.00'\n  if (!num) return '-'\n  if (num < 0.001 && digits <= 3) {\n    return '<$0.001'\n  }\n\n  return numbro(num).formatCurrency({\n    average: round,\n    mantissa: num > 1000 ? 2 : digits,\n    abbreviations: {\n      million: 'M',\n      billion: 'B',\n    },\n  })\n}\n\n// using a currency library here in case we want to add more in future\nexport const formatAmount = (num: number | undefined, digits = 2) => {\n  if (num === 0) return '0'\n  if (!num) return '-'\n  if (num < 0.001) {\n    return '<0.001'\n  }\n  return numbro(num).format({\n    average: true,\n    mantissa: num > 1000 ? 2 : digits,\n    abbreviations: {\n      million: 'M',\n      billion: 'B',\n    },\n  })\n}\n\nexport function isEqual(a: number, b: number, ep = EPSILON) {\n  return Math.abs(a - b) < ep\n}\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,SAASC,OAAT,QAAwB,iBAAxB,C,CAEA;;AACA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,GAAD,EAAuD;EAAA,IAA7BC,MAA6B,uEAApB,CAAoB;EAAA,IAAjBC,KAAiB,uEAAT,IAAS;EACvF,IAAIF,GAAG,KAAK,CAAZ,EAAe,OAAO,OAAP;EACf,IAAI,CAACA,GAAL,EAAU,OAAO,GAAP;;EACV,IAAIA,GAAG,GAAG,KAAN,IAAeC,MAAM,IAAI,CAA7B,EAAgC;IAC9B,OAAO,SAAP;EACD;;EAED,OAAOJ,MAAM,CAACG,GAAD,CAAN,CAAYG,cAAZ,CAA2B;IAChCC,OAAO,EAAEF,KADuB;IAEhCG,QAAQ,EAAEL,GAAG,GAAG,IAAN,GAAa,CAAb,GAAiBC,MAFK;IAGhCK,aAAa,EAAE;MACbC,OAAO,EAAE,GADI;MAEbC,OAAO,EAAE;IAFI;EAHiB,CAA3B,CAAP;AAQD,CAfM,C,CAiBP;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACT,GAAD,EAAyC;EAAA,IAAfC,MAAe,uEAAN,CAAM;EACnE,IAAID,GAAG,KAAK,CAAZ,EAAe,OAAO,GAAP;EACf,IAAI,CAACA,GAAL,EAAU,OAAO,GAAP;;EACV,IAAIA,GAAG,GAAG,KAAV,EAAiB;IACf,OAAO,QAAP;EACD;;EACD,OAAOH,MAAM,CAACG,GAAD,CAAN,CAAYU,MAAZ,CAAmB;IACxBN,OAAO,EAAE,IADe;IAExBC,QAAQ,EAAEL,GAAG,GAAG,IAAN,GAAa,CAAb,GAAiBC,MAFH;IAGxBK,aAAa,EAAE;MACbC,OAAO,EAAE,GADI;MAEbC,OAAO,EAAE;IAFI;EAHS,CAAnB,CAAP;AAQD,CAdM;AAgBP,OAAO,SAASG,OAAT,CAAiBC,CAAjB,EAA4BC,CAA5B,EAAqD;EAAA,IAAdC,EAAc,uEAAThB,OAAS;EAC1D,OAAOiB,IAAI,CAACC,GAAL,CAASJ,CAAC,GAAGC,CAAb,IAAkBC,EAAzB;AACD"},"metadata":{},"sourceType":"module"}