{"ast":null,"code":"import CID from 'cids';\nimport { getCodec, rmPrefix } from 'multicodec';\nimport { decode, toB58String } from 'multihashes';\nexport function hexToUint8Array(hex) {\n  hex = hex.startsWith('0x') ? hex.substr(2) : hex;\n  if (hex.length % 2 !== 0) throw new Error('hex must have length that is multiple of 2');\n  var arr = new Uint8Array(hex.length / 2);\n\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = parseInt(hex.substr(i * 2, 2), 16);\n  }\n\n  return arr;\n}\nvar UTF_8_DECODER = new TextDecoder();\n/**\n * Returns the URI representation of the content hash for supported codecs\n * @param contenthash to decode\n */\n\nexport default function contenthashToUri(contenthash) {\n  var buff = hexToUint8Array(contenthash);\n  var codec = getCodec(buff); // the typing is wrong for @types/multicodec\n\n  switch (codec) {\n    case 'ipfs-ns':\n      {\n        var data = rmPrefix(buff);\n        var cid = new CID(data);\n        return \"ipfs://\".concat(toB58String(cid.multihash));\n      }\n\n    case 'ipns-ns':\n      {\n        var _data = rmPrefix(buff);\n\n        var _cid = new CID(_data);\n\n        var multihash = decode(_cid.multihash);\n\n        if (multihash.name === 'identity') {\n          return \"ipns://\".concat(UTF_8_DECODER.decode(multihash.digest).trim());\n        } else {\n          return \"ipns://\".concat(toB58String(_cid.multihash));\n        }\n      }\n\n    default:\n      throw new Error(\"Unrecognized codec: \".concat(codec));\n  }\n}","map":{"version":3,"names":["CID","getCodec","rmPrefix","decode","toB58String","hexToUint8Array","hex","startsWith","substr","length","Error","arr","Uint8Array","i","parseInt","UTF_8_DECODER","TextDecoder","contenthashToUri","contenthash","buff","codec","data","cid","multihash","name","digest","trim"],"sources":["/Applications/XAMPP/voxel-interface/src/utils/contenthashToUri.ts"],"sourcesContent":["import CID from 'cids'\nimport { getCodec, rmPrefix } from 'multicodec'\nimport { decode, toB58String } from 'multihashes'\n\nexport function hexToUint8Array(hex: string): Uint8Array {\n  hex = hex.startsWith('0x') ? hex.substr(2) : hex\n  if (hex.length % 2 !== 0) throw new Error('hex must have length that is multiple of 2')\n  const arr = new Uint8Array(hex.length / 2)\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = parseInt(hex.substr(i * 2, 2), 16)\n  }\n  return arr\n}\n\nconst UTF_8_DECODER = new TextDecoder()\n\n/**\n * Returns the URI representation of the content hash for supported codecs\n * @param contenthash to decode\n */\nexport default function contenthashToUri(contenthash: string): string {\n  const buff = hexToUint8Array(contenthash)\n  const codec = getCodec(buff as Buffer) // the typing is wrong for @types/multicodec\n  switch (codec) {\n    case 'ipfs-ns': {\n      const data = rmPrefix(buff as Buffer)\n      const cid = new CID(data)\n      return `ipfs://${toB58String(cid.multihash)}`\n    }\n    case 'ipns-ns': {\n      const data = rmPrefix(buff as Buffer)\n      const cid = new CID(data)\n      const multihash = decode(cid.multihash)\n      if (multihash.name === 'identity') {\n        return `ipns://${UTF_8_DECODER.decode(multihash.digest).trim()}`\n      } else {\n        return `ipns://${toB58String(cid.multihash)}`\n      }\n    }\n    default:\n      throw new Error(`Unrecognized codec: ${codec}`)\n  }\n}\n"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,MAAhB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,YAAnC;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,aAApC;AAEA,OAAO,SAASC,eAAT,CAAyBC,GAAzB,EAAkD;EACvDA,GAAG,GAAGA,GAAG,CAACC,UAAJ,CAAe,IAAf,IAAuBD,GAAG,CAACE,MAAJ,CAAW,CAAX,CAAvB,GAAuCF,GAA7C;EACA,IAAIA,GAAG,CAACG,MAAJ,GAAa,CAAb,KAAmB,CAAvB,EAA0B,MAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;EAC1B,IAAMC,GAAG,GAAG,IAAIC,UAAJ,CAAeN,GAAG,CAACG,MAAJ,GAAa,CAA5B,CAAZ;;EACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACF,MAAxB,EAAgCI,CAAC,EAAjC,EAAqC;IACnCF,GAAG,CAACE,CAAD,CAAH,GAASC,QAAQ,CAACR,GAAG,CAACE,MAAJ,CAAWK,CAAC,GAAG,CAAf,EAAkB,CAAlB,CAAD,EAAuB,EAAvB,CAAjB;EACD;;EACD,OAAOF,GAAP;AACD;AAED,IAAMI,aAAa,GAAG,IAAIC,WAAJ,EAAtB;AAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,gBAAT,CAA0BC,WAA1B,EAAuD;EACpE,IAAMC,IAAI,GAAGd,eAAe,CAACa,WAAD,CAA5B;EACA,IAAME,KAAK,GAAGnB,QAAQ,CAACkB,IAAD,CAAtB,CAFoE,CAE7B;;EACvC,QAAQC,KAAR;IACE,KAAK,SAAL;MAAgB;QACd,IAAMC,IAAI,GAAGnB,QAAQ,CAACiB,IAAD,CAArB;QACA,IAAMG,GAAG,GAAG,IAAItB,GAAJ,CAAQqB,IAAR,CAAZ;QACA,wBAAiBjB,WAAW,CAACkB,GAAG,CAACC,SAAL,CAA5B;MACD;;IACD,KAAK,SAAL;MAAgB;QACd,IAAMF,KAAI,GAAGnB,QAAQ,CAACiB,IAAD,CAArB;;QACA,IAAMG,IAAG,GAAG,IAAItB,GAAJ,CAAQqB,KAAR,CAAZ;;QACA,IAAME,SAAS,GAAGpB,MAAM,CAACmB,IAAG,CAACC,SAAL,CAAxB;;QACA,IAAIA,SAAS,CAACC,IAAV,KAAmB,UAAvB,EAAmC;UACjC,wBAAiBT,aAAa,CAACZ,MAAd,CAAqBoB,SAAS,CAACE,MAA/B,EAAuCC,IAAvC,EAAjB;QACD,CAFD,MAEO;UACL,wBAAiBtB,WAAW,CAACkB,IAAG,CAACC,SAAL,CAA5B;QACD;MACF;;IACD;MACE,MAAM,IAAIb,KAAJ,+BAAiCU,KAAjC,EAAN;EAjBJ;AAmBD"},"metadata":{},"sourceType":"module"}