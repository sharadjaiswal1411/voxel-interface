{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Applications/XAMPP/voxel-interface/src/components/Web3ReactManager/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Trans } from \"@lingui/react\";\nimport { useWeb3React } from '@web3-react/core';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport LocalLoader from 'components/LocalLoader';\nimport { network } from '../../connectors';\nimport { NetworkContextName } from '../../constants';\nimport { useEagerConnect, useInactiveListener } from '../../hooks';\nimport Loader from '../Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar MessageWrapper = styled.div.withConfig({\n  displayName: \"Web3ReactManager__MessageWrapper\",\n  componentId: \"sc-17zx2xz-0\"\n})([\"display:flex;align-items:center;justify-content:center;height:20rem;\"]);\n_c = MessageWrapper;\nvar Message = styled.h2.withConfig({\n  displayName: \"Web3ReactManager__Message\",\n  componentId: \"sc-17zx2xz-1\"\n})([\"color:\", \";\"], function (_ref) {\n  var theme = _ref.theme;\n  return theme.primary;\n});\n_c2 = Message;\nexport default function Web3ReactManager(_ref2) {\n  _s();\n\n  var children = _ref2.children;\n\n  var _useWeb3React = useWeb3React(),\n      active = _useWeb3React.active;\n\n  var _useWeb3React2 = useWeb3React(NetworkContextName),\n      networkActive = _useWeb3React2.active,\n      networkError = _useWeb3React2.error,\n      activateNetwork = _useWeb3React2.activate; // try to eagerly connect to an injected provider, if it exists and has granted access already\n\n\n  var triedEager = useEagerConnect(); // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n\n  useEffect(function () {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]); // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n\n  useInactiveListener(!triedEager); // handle delayed loader state\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showLoader = _useState2[0],\n      setShowLoader = _useState2[1];\n\n  useEffect(function () {\n    var timeout = setTimeout(function () {\n      setShowLoader(true);\n    }, 600);\n    return function () {\n      clearTimeout(timeout);\n    };\n  }, []); // on page load, do nothing until we've tried to connect to the injected connector\n\n  if (!triedEager) {\n    return /*#__PURE__*/_jsxDEV(LocalLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  } // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n\n\n  if (!active && networkError) {\n    return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Message, {\n        children: /*#__PURE__*/_jsxDEV(Trans, {\n          id: \"Oops! An unknown error occurred. Please refresh the page, or visit from another browser or device.\"\n        }, void 0, false, void 0, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  } // if neither context is active, spin\n\n\n  if (!active && !networkActive) {\n    return showLoader ? /*#__PURE__*/_jsxDEV(MessageWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this) : null;\n  }\n\n  return children;\n}\n\n_s(Web3ReactManager, \"hiQkfN2w+jO6onBERO0nDHlavyE=\", false, function () {\n  return [useWeb3React, useWeb3React, useEagerConnect, useInactiveListener];\n});\n\n_c3 = Web3ReactManager;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MessageWrapper\");\n$RefreshReg$(_c2, \"Message\");\n$RefreshReg$(_c3, \"Web3ReactManager\");","map":{"version":3,"names":["useWeb3React","React","useEffect","useState","styled","LocalLoader","network","NetworkContextName","useEagerConnect","useInactiveListener","Loader","MessageWrapper","div","Message","h2","theme","primary","Web3ReactManager","children","active","networkActive","networkError","error","activateNetwork","activate","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout"],"sources":["/Applications/XAMPP/voxel-interface/src/components/Web3ReactManager/index.tsx"],"sourcesContent":["import { Trans } from '@lingui/macro'\nimport { useWeb3React } from '@web3-react/core'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\n\nimport LocalLoader from 'components/LocalLoader'\n\nimport { network } from '../../connectors'\nimport { NetworkContextName } from '../../constants'\nimport { useEagerConnect, useInactiveListener } from '../../hooks'\nimport Loader from '../Loader'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.primary};\n`\n\nexport default function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return <LocalLoader />\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>\n          <Trans>\n            Oops! An unknown error occurred. Please refresh the page, or visit from another browser or device.\n          </Trans>\n        </Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        <Loader />\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n"],"mappings":";;;;;;AACA,SAASA,YAAT,QAA6B,kBAA7B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,aAArD;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,IAAMC,cAAc,GAAGP,MAAM,CAACQ,GAAV;EAAA;EAAA;AAAA,4EAApB;KAAMD,c;AAON,IAAME,OAAO,GAAGT,MAAM,CAACU,EAAV;EAAA;EAAA;AAAA,oBACF;EAAA,IAAGC,KAAH,QAAGA,KAAH;EAAA,OAAeA,KAAK,CAACC,OAArB;AAAA,CADE,CAAb;MAAMH,O;AAIN,eAAe,SAASI,gBAAT,QAAmE;EAAA;;EAAA,IAAvCC,QAAuC,SAAvCA,QAAuC;;EAChF,oBAAmBlB,YAAY,EAA/B;EAAA,IAAQmB,MAAR,iBAAQA,MAAR;;EACA,qBAAkFnB,YAAY,CAACO,kBAAD,CAA9F;EAAA,IAAgBa,aAAhB,kBAAQD,MAAR;EAAA,IAAsCE,YAAtC,kBAA+BC,KAA/B;EAAA,IAA8DC,eAA9D,kBAAoDC,QAApD,CAFgF,CAIhF;;;EACA,IAAMC,UAAU,GAAGjB,eAAe,EAAlC,CALgF,CAOhF;;EACAN,SAAS,CAAC,YAAM;IACd,IAAIuB,UAAU,IAAI,CAACL,aAAf,IAAgC,CAACC,YAAjC,IAAiD,CAACF,MAAtD,EAA8D;MAC5DI,eAAe,CAACjB,OAAD,CAAf;IACD;EACF,CAJQ,EAIN,CAACmB,UAAD,EAAaL,aAAb,EAA4BC,YAA5B,EAA0CE,eAA1C,EAA2DJ,MAA3D,CAJM,CAAT,CARgF,CAchF;;EACAV,mBAAmB,CAAC,CAACgB,UAAF,CAAnB,CAfgF,CAiBhF;;EACA,gBAAoCtB,QAAQ,CAAC,KAAD,CAA5C;EAAA;EAAA,IAAOuB,UAAP;EAAA,IAAmBC,aAAnB;;EACAzB,SAAS,CAAC,YAAM;IACd,IAAM0B,OAAO,GAAGC,UAAU,CAAC,YAAM;MAC/BF,aAAa,CAAC,IAAD,CAAb;IACD,CAFyB,EAEvB,GAFuB,CAA1B;IAIA,OAAO,YAAM;MACXG,YAAY,CAACF,OAAD,CAAZ;IACD,CAFD;EAGD,CARQ,EAQN,EARM,CAAT,CAnBgF,CA6BhF;;EACA,IAAI,CAACH,UAAL,EAAiB;IACf,oBAAO,QAAC,WAAD;MAAA;MAAA;MAAA;IAAA,QAAP;EACD,CAhC+E,CAkChF;;;EACA,IAAI,CAACN,MAAD,IAAWE,YAAf,EAA6B;IAC3B,oBACE,QAAC,cAAD;MAAA,uBACE,QAAC,OAAD;QAAA,uBACE;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EASD,CA7C+E,CA+ChF;;;EACA,IAAI,CAACF,MAAD,IAAW,CAACC,aAAhB,EAA+B;IAC7B,OAAOM,UAAU,gBACf,QAAC,cAAD;MAAA,uBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADe,GAIb,IAJJ;EAKD;;EAED,OAAOR,QAAP;AACD;;GAzDuBD,gB;UACHjB,Y,EAC+DA,Y,EAG/DQ,e,EAUnBC,mB;;;MAfsBQ,gB"},"metadata":{},"sourceType":"module"}