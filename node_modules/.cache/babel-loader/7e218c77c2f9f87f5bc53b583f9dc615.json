{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\n\nfunction wait(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\nfunction waitRandom(min, max) {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)));\n}\n/**\n * This error is thrown if the function is cancelled before completing\n */\n\n\nexport var CancelledError = /*#__PURE__*/function (_Error) {\n  _inherits(CancelledError, _Error);\n\n  var _super = _createSuper(CancelledError);\n\n  function CancelledError() {\n    _classCallCheck(this, CancelledError);\n\n    return _super.call(this, 'Cancelled');\n  }\n\n  return _createClass(CancelledError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Throw this error if the function should retry\n */\n\nexport var RetryableError = /*#__PURE__*/function (_Error2) {\n  _inherits(RetryableError, _Error2);\n\n  var _super2 = _createSuper(RetryableError);\n\n  function RetryableError() {\n    _classCallCheck(this, RetryableError);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return _createClass(RetryableError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\n\nexport function retry(fn, _ref) {\n  var n = _ref.n,\n      minWait = _ref.minWait,\n      maxWait = _ref.maxWait;\n  var completed = false;\n  var rejectCancelled;\n  var promise = new Promise( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {\n      var result;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              rejectCancelled = reject;\n\n            case 1:\n              if (!true) {\n                _context.next = 24;\n                break;\n              }\n\n              result = void 0;\n              _context.prev = 3;\n              _context.next = 6;\n              return fn();\n\n            case 6:\n              result = _context.sent;\n\n              if (!completed) {\n                resolve(result);\n                completed = true;\n              }\n\n              return _context.abrupt(\"break\", 24);\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](3);\n\n              if (!completed) {\n                _context.next = 15;\n                break;\n              }\n\n              return _context.abrupt(\"break\", 24);\n\n            case 15:\n              if (!(n <= 0 || !(_context.t0 instanceof RetryableError))) {\n                _context.next = 19;\n                break;\n              }\n\n              reject(_context.t0);\n              completed = true;\n              return _context.abrupt(\"break\", 24);\n\n            case 19:\n              n--;\n\n            case 20:\n              _context.next = 22;\n              return waitRandom(minWait, maxWait);\n\n            case 22:\n              _context.next = 1;\n              break;\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 11]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  return {\n    promise: promise,\n    cancel: function cancel() {\n      if (completed) return;\n      completed = true;\n      rejectCancelled(new CancelledError());\n    }\n  };\n}","map":{"version":3,"names":["wait","ms","Promise","resolve","setTimeout","waitRandom","min","max","Math","round","random","CancelledError","Error","RetryableError","retry","fn","n","minWait","maxWait","completed","rejectCancelled","promise","reject","result","cancel"],"sources":["/Applications/XAMPP/voxel-interface/src/utils/retry.ts"],"sourcesContent":["function wait(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nfunction waitRandom(min: number, max: number): Promise<void> {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\n}\n\n/**\n * This error is thrown if the function is cancelled before completing\n */\nexport class CancelledError extends Error {\n  constructor() {\n    super('Cancelled')\n  }\n}\n\n/**\n * Throw this error if the function should retry\n */\nexport class RetryableError extends Error {}\n\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\nexport function retry<T>(\n  fn: () => Promise<T>,\n  { n, minWait, maxWait }: { n: number; minWait: number; maxWait: number },\n): { promise: Promise<T>; cancel: () => void } {\n  let completed = false\n  let rejectCancelled: (error: Error) => void\n  const promise = new Promise<T>(async (resolve, reject) => {\n    rejectCancelled = reject\n    while (true) {\n      let result: T\n      try {\n        result = await fn()\n        if (!completed) {\n          resolve(result)\n          completed = true\n        }\n        break\n      } catch (error) {\n        if (completed) {\n          break\n        }\n        if (n <= 0 || !(error instanceof RetryableError)) {\n          reject(error)\n          completed = true\n          break\n        }\n        n--\n      }\n      await waitRandom(minWait, maxWait)\n    }\n  })\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return\n      completed = true\n      rejectCancelled(new CancelledError())\n    },\n  }\n}\n"],"mappings":";;;;;;;;AAAA,SAASA,IAAT,CAAcC,EAAd,EAAyC;EACvC,OAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO;IAAA,OAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAd;EAAA,CAAnB,CAAP;AACD;;AAED,SAASI,UAAT,CAAoBC,GAApB,EAAiCC,GAAjC,EAA6D;EAC3D,OAAOP,IAAI,CAACM,GAAG,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACD,GAAL,CAAS,CAAT,EAAYA,GAAG,GAAGD,GAAlB,CAA3B,CAAP,CAAX;AACD;AAED;AACA;AACA;;;AACA,WAAaK,cAAb;EAAA;;EAAA;;EACE,0BAAc;IAAA;;IAAA,yBACN,WADM;EAEb;;EAHH;AAAA,iCAAoCC,KAApC;AAMA;AACA;AACA;;AACA,WAAaC,cAAb;EAAA;;EAAA;;EAAA;IAAA;;IAAA;EAAA;;EAAA;AAAA,iCAAoCD,KAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,KAAT,CACLC,EADK,QAGwC;EAAA,IAD3CC,CAC2C,QAD3CA,CAC2C;EAAA,IADxCC,OACwC,QADxCA,OACwC;EAAA,IAD/BC,OAC+B,QAD/BA,OAC+B;EAC7C,IAAIC,SAAS,GAAG,KAAhB;EACA,IAAIC,eAAJ;EACA,IAAMC,OAAO,GAAG,IAAInB,OAAJ;IAAA,uEAAe,iBAAOC,OAAP,EAAgBmB,MAAhB;MAAA;MAAA;QAAA;UAAA;YAAA;cAC7BF,eAAe,GAAGE,MAAlB;;YAD6B;cAAA,KAEtB,IAFsB;gBAAA;gBAAA;cAAA;;cAGvBC,MAHuB;cAAA;cAAA;cAAA,OAKVR,EAAE,EALQ;;YAAA;cAKzBQ,MALyB;;cAMzB,IAAI,CAACJ,SAAL,EAAgB;gBACdhB,OAAO,CAACoB,MAAD,CAAP;gBACAJ,SAAS,GAAG,IAAZ;cACD;;cATwB;;YAAA;cAAA;cAAA;;cAAA,KAYrBA,SAZqB;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA,MAerBH,CAAC,IAAI,CAAL,IAAU,EAAE,uBAAiBH,cAAnB,CAfW;gBAAA;gBAAA;cAAA;;cAgBvBS,MAAM,aAAN;cACAH,SAAS,GAAG,IAAZ;cAjBuB;;YAAA;cAoBzBH,CAAC;;YApBwB;cAAA;cAAA,OAsBrBX,UAAU,CAACY,OAAD,EAAUC,OAAV,CAtBW;;YAAA;cAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAf;;IAAA;MAAA;IAAA;EAAA,IAAhB;EAyBA,OAAO;IACLG,OAAO,EAAPA,OADK;IAELG,MAAM,EAAE,kBAAM;MACZ,IAAIL,SAAJ,EAAe;MACfA,SAAS,GAAG,IAAZ;MACAC,eAAe,CAAC,IAAIT,cAAJ,EAAD,CAAf;IACD;EANI,CAAP;AAQD"},"metadata":{},"sourceType":"module"}