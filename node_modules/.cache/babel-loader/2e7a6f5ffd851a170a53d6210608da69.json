{"ast":null,"code":"import { _nullishCoalesce } from '@sentry/utils/esm/buildPolyfills';\nimport { getGlobalObject, browserPerformanceTimeOrigin, logger, htmlTreeAsString } from '@sentry/utils';\nimport { getActiveTransaction, msToSec } from '../../utils.js';\nimport { getCLS } from '../web-vitals/getCLS.js';\nimport { getFID } from '../web-vitals/getFID.js';\nimport { getLCP } from '../web-vitals/getLCP.js';\nimport { getVisibilityWatcher } from '../web-vitals/lib/getVisibilityWatcher.js';\nimport { observe } from '../web-vitals/lib/observe.js';\nimport { _startChild, isMeasurementValue } from './utils.js';\nvar global = getGlobalObject();\n\nfunction getBrowserPerformanceAPI() {\n  return global && global.addEventListener && global.performance;\n}\n\nvar _performanceCursor = 0;\nvar _measurements = {};\n\nvar _lcpEntry;\n\nvar _clsEntry;\n/**\n * Start tracking web vitals\n */\n\n\nfunction startTrackingWebVitals() {\n  var reportAllChanges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var performance = getBrowserPerformanceAPI();\n\n  if (performance && browserPerformanceTimeOrigin) {\n    if (performance.mark) {\n      global.performance.mark('sentry-tracing-init');\n    }\n\n    _trackCLS();\n\n    _trackLCP(reportAllChanges);\n\n    _trackFID();\n  }\n}\n/**\n * Start tracking long tasks.\n */\n\n\nfunction startTrackingLongTasks() {\n  var entryHandler = function entryHandler(entry) {\n    var transaction = getActiveTransaction();\n\n    if (!transaction) {\n      return;\n    }\n\n    var startTime = msToSec(browserPerformanceTimeOrigin + entry.startTime);\n    var duration = msToSec(entry.duration);\n    transaction.startChild({\n      description: 'Long Task',\n      op: 'ui.long-task',\n      startTimestamp: startTime,\n      endTimestamp: startTime + duration\n    });\n  };\n\n  observe('longtask', entryHandler);\n}\n/** Starts tracking the Cumulative Layout Shift on the current page. */\n\n\nfunction _trackCLS() {\n  // See:\n  // https://web.dev/evolving-cls/\n  // https://web.dev/cls-web-tooling/\n  getCLS(function (metric) {\n    var entry = metric.entries.pop();\n\n    if (!entry) {\n      return;\n    }\n\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = {\n      value: metric.value,\n      unit: ''\n    };\n    _clsEntry = entry;\n  });\n}\n/** Starts tracking the Largest Contentful Paint on the current page. */\n\n\nfunction _trackLCP(reportAllChanges) {\n  getLCP(function (metric) {\n    var entry = metric.entries.pop();\n\n    if (!entry) {\n      return;\n    }\n\n    var timeOrigin = msToSec(browserPerformanceTimeOrigin);\n    var startTime = msToSec(entry.startTime);\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = {\n      value: metric.value,\n      unit: 'millisecond'\n    };\n    _measurements['mark.lcp'] = {\n      value: timeOrigin + startTime,\n      unit: 'second'\n    };\n    _lcpEntry = entry;\n  }, reportAllChanges);\n}\n/** Starts tracking the First Input Delay on the current page. */\n\n\nfunction _trackFID() {\n  getFID(function (metric) {\n    var entry = metric.entries.pop();\n\n    if (!entry) {\n      return;\n    }\n\n    var timeOrigin = msToSec(browserPerformanceTimeOrigin);\n    var startTime = msToSec(entry.startTime);\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = {\n      value: metric.value,\n      unit: 'millisecond'\n    };\n    _measurements['mark.fid'] = {\n      value: timeOrigin + startTime,\n      unit: 'second'\n    };\n  });\n}\n/** Add performance related spans to a transaction */\n\n\nfunction addPerformanceEntries(transaction) {\n  var performance = getBrowserPerformanceAPI();\n\n  if (!performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  var timeOrigin = msToSec(browserPerformanceTimeOrigin);\n  var performanceEntries = performance.getEntries();\n  var responseStartTimestamp;\n  var requestStartTimestamp;\n  performanceEntries.slice(_performanceCursor).forEach(function (entry) {\n    var startTime = msToSec(entry.startTime);\n    var duration = msToSec(entry.duration);\n\n    if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n      return;\n    }\n\n    switch (entry.entryType) {\n      case 'navigation':\n        {\n          _addNavigationSpans(transaction, entry, timeOrigin);\n\n          responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);\n          requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);\n          break;\n        }\n\n      case 'mark':\n      case 'paint':\n      case 'measure':\n        {\n          var startTimestamp = _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin); // capture web vitals\n\n\n          var firstHidden = getVisibilityWatcher(); // Only report if the page wasn't hidden prior to the web vital.\n\n          var shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n          if (entry.name === 'first-paint' && shouldRecord) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding FP');\n            _measurements['fp'] = {\n              value: entry.startTime,\n              unit: 'millisecond'\n            };\n            _measurements['mark.fp'] = {\n              value: startTimestamp,\n              unit: 'second'\n            };\n          }\n\n          if (entry.name === 'first-contentful-paint' && shouldRecord) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding FCP');\n            _measurements['fcp'] = {\n              value: entry.startTime,\n              unit: 'millisecond'\n            };\n            _measurements['mark.fcp'] = {\n              value: startTimestamp,\n              unit: 'second'\n            };\n          }\n\n          break;\n        }\n\n      case 'resource':\n        {\n          var resourceName = entry.name.replace(global.location.origin, '');\n\n          _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n\n          break;\n        }\n\n      default: // Ignore other entry types.\n\n    }\n  });\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n\n  _trackNavigator(transaction); // Measurements are only available for pageload transactions\n\n\n  if (transaction.op === 'pageload') {\n    // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n    // start of the response in milliseconds\n    if (typeof responseStartTimestamp === 'number') {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding TTFB');\n      _measurements['ttfb'] = {\n        value: (responseStartTimestamp - transaction.startTimestamp) * 1000,\n        unit: 'millisecond'\n      };\n\n      if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n        // Capture the time spent making the request and receiving the first byte of the response.\n        // This is the time between the start of the request and the start of the response in milliseconds.\n        _measurements['ttfb.requestTime'] = {\n          value: (responseStartTimestamp - requestStartTimestamp) * 1000,\n          unit: 'millisecond'\n        };\n      }\n    }\n\n    ['fcp', 'fp', 'lcp'].forEach(function (name) {\n      if (!_measurements[name] || timeOrigin >= transaction.startTimestamp) {\n        return;\n      } // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n\n\n      var oldValue = _measurements[name].value;\n      var measurementTimestamp = timeOrigin + msToSec(oldValue); // normalizedValue should be in milliseconds\n\n      var normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n      var delta = normalizedValue - oldValue;\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(\"[Measurements] Normalized \".concat(name, \" from \").concat(oldValue, \" to \").concat(normalizedValue, \" (\").concat(delta, \")\"));\n      _measurements[name].value = normalizedValue;\n    });\n\n    if (_measurements['mark.fid'] && _measurements['fid']) {\n      // create span for FID\n      _startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: _measurements['mark.fid'].value + msToSec(_measurements['fid'].value),\n        op: 'web.vitals',\n        startTimestamp: _measurements['mark.fid'].value\n      });\n    } // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n\n\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n\n    Object.keys(_measurements).forEach(function (measurementName) {\n      transaction.setMeasurement(measurementName, _measurements[measurementName].value, _measurements[measurementName].unit);\n    });\n\n    _tagMetricInfo(transaction);\n  }\n\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n/** Create measure related spans */\n\n\nfunction _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin) {\n  var measureStartTimestamp = timeOrigin + startTime;\n  var measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType,\n    startTimestamp: measureStartTimestamp\n  });\n\n  return measureStartTimestamp;\n}\n/** Instrument navigation entries */\n\n\nfunction _addNavigationSpans(transaction, entry, timeOrigin) {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(function (event) {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n\n  _addRequest(transaction, entry, timeOrigin);\n}\n/** Create performance navigation related spans */\n\n\nfunction _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin, description, eventEnd) {\n  var end = eventEnd ? entry[eventEnd] : entry[\"\".concat(event, \"End\")];\n  var start = entry[\"\".concat(event, \"Start\")];\n\n  if (!start || !end) {\n    return;\n  }\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: _nullishCoalesce(description, function () {\n      return event;\n    }),\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end)\n  });\n}\n/** Create request and response related spans */\n\n\nfunction _addRequest(transaction, entry, timeOrigin) {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n  });\n}\n/** Create resource-related spans */\n\n\nfunction _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin) {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  var data = {};\n\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n\n  var startTimestamp = timeOrigin + startTime;\n  var endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp: endTimestamp,\n    op: entry.initiatorType ? \"resource.\".concat(entry.initiatorType) : 'resource',\n    startTimestamp: startTimestamp,\n    data: data\n  });\n}\n/**\n * Capture the information of the user agent.\n */\n\n\nfunction _trackNavigator(transaction) {\n  var navigator = global.navigator;\n\n  if (!navigator) {\n    return;\n  } // track network connectivity\n\n\n  var connection = navigator.connection;\n\n  if (connection) {\n    if (connection.effectiveType) {\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n\n    if (connection.type) {\n      transaction.setTag('connectionType', connection.type);\n    }\n\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = {\n        value: connection.rtt,\n        unit: 'millisecond'\n      };\n    }\n\n    if (isMeasurementValue(connection.downlink)) {\n      _measurements['connection.downlink'] = {\n        value: connection.downlink,\n        unit: ''\n      }; // unit is empty string for now, while relay doesn't support download speed units\n    }\n  }\n\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    transaction.setTag('deviceMemory', \"\".concat(navigator.deviceMemory, \" GB\"));\n  }\n\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n/** Add LCP / CLS data to transaction to allow debugging */\n\n\nfunction _tagMetricInfo(transaction) {\n  if (_lcpEntry) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding LCP Data'); // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n\n    if (_lcpEntry.id) {\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  } // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n\n\n  if (_clsEntry && _clsEntry.sources) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding CLS Data');\n\n    _clsEntry.sources.forEach(function (source, index) {\n      return transaction.setTag(\"cls.source.\".concat(index + 1), htmlTreeAsString(source.node));\n    });\n  }\n}\n\nexport { _addMeasureSpans, _addResourceSpans, addPerformanceEntries, startTrackingLongTasks, startTrackingWebVitals };","map":null,"metadata":{},"sourceType":"module"}