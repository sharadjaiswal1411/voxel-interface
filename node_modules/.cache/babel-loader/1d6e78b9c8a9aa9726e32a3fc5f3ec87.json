{"ast":null,"code":"import _toConsumableArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isPlainObject, dateTimestampInSeconds, getGlobalSingleton, SyncPromise, logger, isThenable } from '@sentry/utils';\nimport { updateSession } from './session.js';\n/**\n * Absolute maximum number of breadcrumbs added to an event.\n * The `maxBreadcrumbs` option cannot be higher than this value.\n */\n\nvar MAX_BREADCRUMBS = 100;\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\n\nvar Scope = /*#__PURE__*/function () {\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n\n  /** Transaction Name */\n\n  /** Span */\n\n  /** Session */\n\n  /** Request Mode Session Status */\n  function Scope() {\n    _classCallCheck(this, Scope);\n\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n\n\n  _createClass(Scope, [{\n    key: \"addScopeListener\",\n    value:\n    /**\n     * Add internal on change listener. Used for sub SDKs that need to store the scope.\n     * @hidden\n     */\n    function addScopeListener(callback) {\n      this._scopeListeners.push(callback);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"addEventProcessor\",\n    value: function addEventProcessor(callback) {\n      this._eventProcessors.push(callback);\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setUser\",\n    value: function setUser(user) {\n      this._user = user || {};\n\n      if (this._session) {\n        updateSession(this._session, {\n          user: user\n        });\n      }\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getUser\",\n    value: function getUser() {\n      return this._user;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getRequestSession\",\n    value: function getRequestSession() {\n      return this._requestSession;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setRequestSession\",\n    value: function setRequestSession(requestSession) {\n      this._requestSession = requestSession;\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setTags\",\n    value: function setTags(tags) {\n      this._tags = _objectSpread(_objectSpread({}, this._tags), tags);\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setTag\",\n    value: function setTag(key, value) {\n      this._tags = _objectSpread(_objectSpread({}, this._tags), {}, _defineProperty({}, key, value));\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setExtras\",\n    value: function setExtras(extras) {\n      this._extra = _objectSpread(_objectSpread({}, this._extra), extras);\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, extra) {\n      this._extra = _objectSpread(_objectSpread({}, this._extra), {}, _defineProperty({}, key, extra));\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setFingerprint\",\n    value: function setFingerprint(fingerprint) {\n      this._fingerprint = fingerprint;\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setLevel\",\n    value: function setLevel(level) {\n      this._level = level;\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setTransactionName\",\n    value: function setTransactionName(name) {\n      this._transactionName = name;\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setContext\",\n    value: function setContext(key, context) {\n      if (context === null) {\n        delete this._contexts[key];\n      } else {\n        this._contexts = _objectSpread(_objectSpread({}, this._contexts), {}, _defineProperty({}, key, context));\n      }\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setSpan\",\n    value: function setSpan(span) {\n      this._span = span;\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getSpan\",\n    value: function getSpan() {\n      return this._span;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction() {\n      // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n      // have a pointer to the currently-active transaction.\n      var span = this.getSpan();\n      return span && span.transaction;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setSession\",\n    value: function setSession(session) {\n      if (!session) {\n        delete this._session;\n      } else {\n        this._session = session;\n      }\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getSession\",\n    value: function getSession() {\n      return this._session;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(captureContext) {\n      if (!captureContext) {\n        return this;\n      }\n\n      if (typeof captureContext === 'function') {\n        var updatedScope = captureContext(this);\n        return updatedScope instanceof Scope ? updatedScope : this;\n      }\n\n      if (captureContext instanceof Scope) {\n        this._tags = _objectSpread(_objectSpread({}, this._tags), captureContext._tags);\n        this._extra = _objectSpread(_objectSpread({}, this._extra), captureContext._extra);\n        this._contexts = _objectSpread(_objectSpread({}, this._contexts), captureContext._contexts);\n\n        if (captureContext._user && Object.keys(captureContext._user).length) {\n          this._user = captureContext._user;\n        }\n\n        if (captureContext._level) {\n          this._level = captureContext._level;\n        }\n\n        if (captureContext._fingerprint) {\n          this._fingerprint = captureContext._fingerprint;\n        }\n\n        if (captureContext._requestSession) {\n          this._requestSession = captureContext._requestSession;\n        }\n      } else if (isPlainObject(captureContext)) {\n        captureContext = captureContext;\n        this._tags = _objectSpread(_objectSpread({}, this._tags), captureContext.tags);\n        this._extra = _objectSpread(_objectSpread({}, this._extra), captureContext.extra);\n        this._contexts = _objectSpread(_objectSpread({}, this._contexts), captureContext.contexts);\n\n        if (captureContext.user) {\n          this._user = captureContext.user;\n        }\n\n        if (captureContext.level) {\n          this._level = captureContext.level;\n        }\n\n        if (captureContext.fingerprint) {\n          this._fingerprint = captureContext.fingerprint;\n        }\n\n        if (captureContext.requestSession) {\n          this._requestSession = captureContext.requestSession;\n        }\n      }\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._breadcrumbs = [];\n      this._tags = {};\n      this._extra = {};\n      this._user = {};\n      this._contexts = {};\n      this._level = undefined;\n      this._transactionName = undefined;\n      this._fingerprint = undefined;\n      this._requestSession = undefined;\n      this._span = undefined;\n      this._session = undefined;\n\n      this._notifyScopeListeners();\n\n      this._attachments = [];\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"addBreadcrumb\",\n    value: function addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n      var maxCrumbs = typeof maxBreadcrumbs === 'number' ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS; // No data has been changed, so don't notify scope listeners\n\n      if (maxCrumbs <= 0) {\n        return this;\n      }\n\n      var mergedBreadcrumb = _objectSpread({\n        timestamp: dateTimestampInSeconds()\n      }, breadcrumb);\n\n      this._breadcrumbs = [].concat(_toConsumableArray(this._breadcrumbs), [mergedBreadcrumb]).slice(-maxCrumbs);\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"clearBreadcrumbs\",\n    value: function clearBreadcrumbs() {\n      this._breadcrumbs = [];\n\n      this._notifyScopeListeners();\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"addAttachment\",\n    value: function addAttachment(attachment) {\n      this._attachments.push(attachment);\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getAttachments\",\n    value: function getAttachments() {\n      return this._attachments;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"clearAttachments\",\n    value: function clearAttachments() {\n      this._attachments = [];\n      return this;\n    }\n    /**\n     * Applies the current context and fingerprint to the event.\n     * Note that breadcrumbs will be added by the client.\n     * Also if the event has already breadcrumbs on it, we do not merge them.\n     * @param event Event\n     * @param hint May contain additional information about the original exception.\n     * @hidden\n     */\n\n  }, {\n    key: \"applyToEvent\",\n    value: function applyToEvent(event) {\n      var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this._extra && Object.keys(this._extra).length) {\n        event.extra = _objectSpread(_objectSpread({}, this._extra), event.extra);\n      }\n\n      if (this._tags && Object.keys(this._tags).length) {\n        event.tags = _objectSpread(_objectSpread({}, this._tags), event.tags);\n      }\n\n      if (this._user && Object.keys(this._user).length) {\n        event.user = _objectSpread(_objectSpread({}, this._user), event.user);\n      }\n\n      if (this._contexts && Object.keys(this._contexts).length) {\n        event.contexts = _objectSpread(_objectSpread({}, this._contexts), event.contexts);\n      }\n\n      if (this._level) {\n        event.level = this._level;\n      }\n\n      if (this._transactionName) {\n        event.transaction = this._transactionName;\n      } // We want to set the trace context for normal events only if there isn't already\n      // a trace context on the event. There is a product feature in place where we link\n      // errors with transaction and it relies on that.\n\n\n      if (this._span) {\n        event.contexts = _objectSpread({\n          trace: this._span.getTraceContext()\n        }, event.contexts);\n        var transactionName = this._span.transaction && this._span.transaction.name;\n\n        if (transactionName) {\n          event.tags = _objectSpread({\n            transaction: transactionName\n          }, event.tags);\n        }\n      }\n\n      this._applyFingerprint(event);\n\n      event.breadcrumbs = [].concat(_toConsumableArray(event.breadcrumbs || []), _toConsumableArray(this._breadcrumbs));\n      event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n      event.sdkProcessingMetadata = _objectSpread(_objectSpread({}, event.sdkProcessingMetadata), this._sdkProcessingMetadata);\n      return this._notifyEventProcessors([].concat(_toConsumableArray(getGlobalEventProcessors()), _toConsumableArray(this._eventProcessors)), event, hint);\n    }\n    /**\n     * Add data which will be accessible during event processing but won't get sent to Sentry\n     */\n\n  }, {\n    key: \"setSDKProcessingMetadata\",\n    value: function setSDKProcessingMetadata(newData) {\n      this._sdkProcessingMetadata = _objectSpread(_objectSpread({}, this._sdkProcessingMetadata), newData);\n      return this;\n    }\n    /**\n     * This will be called after {@link applyToEvent} is finished.\n     */\n\n  }, {\n    key: \"_notifyEventProcessors\",\n    value: function _notifyEventProcessors(processors, event, hint) {\n      var _this = this;\n\n      var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      return new SyncPromise(function (resolve, reject) {\n        var processor = processors[index];\n\n        if (event === null || typeof processor !== 'function') {\n          resolve(event);\n        } else {\n          var result = processor(_objectSpread({}, event), hint);\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && processor.id && result === null && logger.log(\"Event processor \\\"\".concat(processor.id, \"\\\" dropped event\"));\n\n          if (isThenable(result)) {\n            void result.then(function (final) {\n              return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);\n            }).then(null, reject);\n          } else {\n            void _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n          }\n        }\n      });\n    }\n    /**\n     * This will be called on every set call.\n     */\n\n  }, {\n    key: \"_notifyScopeListeners\",\n    value: function _notifyScopeListeners() {\n      var _this2 = this;\n\n      // We need this check for this._notifyingListeners to be able to work on scope during updates\n      // If this check is not here we'll produce endless recursion when something is done with the scope\n      // during the callback.\n      if (!this._notifyingListeners) {\n        this._notifyingListeners = true;\n\n        this._scopeListeners.forEach(function (callback) {\n          callback(_this2);\n        });\n\n        this._notifyingListeners = false;\n      }\n    }\n    /**\n     * Applies fingerprint from the scope to the event if there's one,\n     * uses message if there's one instead or get rid of empty fingerprint\n     */\n\n  }, {\n    key: \"_applyFingerprint\",\n    value: function _applyFingerprint(event) {\n      // Make sure it's an array first and we actually have something in place\n      event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : []; // If we have something on the scope, then merge it with event\n\n      if (this._fingerprint) {\n        event.fingerprint = event.fingerprint.concat(this._fingerprint);\n      } // If we have no data at all, remove empty array default\n\n\n      if (event.fingerprint && !event.fingerprint.length) {\n        delete event.fingerprint;\n      }\n    }\n  }], [{\n    key: \"clone\",\n    value: function clone(scope) {\n      var newScope = new Scope();\n\n      if (scope) {\n        newScope._breadcrumbs = _toConsumableArray(scope._breadcrumbs);\n        newScope._tags = _objectSpread({}, scope._tags);\n        newScope._extra = _objectSpread({}, scope._extra);\n        newScope._contexts = _objectSpread({}, scope._contexts);\n        newScope._user = scope._user;\n        newScope._level = scope._level;\n        newScope._span = scope._span;\n        newScope._session = scope._session;\n        newScope._transactionName = scope._transactionName;\n        newScope._fingerprint = scope._fingerprint;\n        newScope._eventProcessors = _toConsumableArray(scope._eventProcessors);\n        newScope._requestSession = scope._requestSession;\n        newScope._attachments = _toConsumableArray(scope._attachments);\n      }\n\n      return newScope;\n    }\n  }]);\n\n  return Scope;\n}();\n/**\n * Returns the global event processors.\n */\n\n\nfunction getGlobalEventProcessors() {\n  return getGlobalSingleton('globalEventProcessors', function () {\n    return [];\n  });\n}\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\n\n\nfunction addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}\n\nexport { Scope, addGlobalEventProcessor };","map":null,"metadata":{},"sourceType":"module"}