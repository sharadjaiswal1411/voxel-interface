{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar ethereum_types_1 = require(\"ethereum-types\");\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar _ = require(\"lodash\");\n\nvar utils_2 = require(\"./utils\");\n/**\n * Utils to convert ethereum structures from user-space format to RPC format. (marshall/unmarshall)\n */\n\n\nexports.marshaller = {\n  /**\n   * Unmarshall block without transaction data\n   * @param blockWithHexValues block to unmarshall\n   * @return unmarshalled block without transaction data\n   */\n  unmarshalIntoBlockWithoutTransactionData: function unmarshalIntoBlockWithoutTransactionData(blockWithHexValues) {\n    var block = __assign({}, blockWithHexValues, {\n      gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit),\n      gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed),\n      size: utils_2.utils.convertHexToNumber(blockWithHexValues.size),\n      timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp),\n      number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number),\n      difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty),\n      totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty)\n    });\n\n    return block;\n  },\n\n  /**\n   * Unmarshall block with transaction data\n   * @param blockWithHexValues block to unmarshall\n   * @return unmarshalled block with transaction data\n   */\n  unmarshalIntoBlockWithTransactionData: function unmarshalIntoBlockWithTransactionData(blockWithHexValues) {\n    var block = __assign({}, blockWithHexValues, {\n      gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit),\n      gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed),\n      size: utils_2.utils.convertHexToNumber(blockWithHexValues.size),\n      timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp),\n      number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number),\n      difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty),\n      totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty),\n      transactions: []\n    });\n\n    block.transactions = _.map(blockWithHexValues.transactions, function (tx) {\n      var transaction = exports.marshaller.unmarshalTransaction(tx);\n      return transaction;\n    });\n    return block;\n  },\n\n  /**\n   * Unmarshall transaction\n   * @param txRpc transaction to unmarshall\n   * @return unmarshalled transaction\n   */\n  unmarshalTransaction: function unmarshalTransaction(txRpc) {\n    var tx = __assign({}, txRpc, {\n      blockNumber: txRpc.blockNumber !== null ? utils_2.utils.convertHexToNumber(txRpc.blockNumber) : null,\n      transactionIndex: txRpc.transactionIndex !== null ? utils_2.utils.convertHexToNumber(txRpc.transactionIndex) : null,\n      nonce: utils_2.utils.convertHexToNumber(txRpc.nonce),\n      gas: utils_2.utils.convertHexToNumber(txRpc.gas),\n      gasPrice: utils_2.utils.convertAmountToBigNumber(txRpc.gasPrice),\n      value: utils_2.utils.convertAmountToBigNumber(txRpc.value)\n    });\n\n    return tx;\n  },\n\n  /**\n   * Unmarshall transaction receipt\n   * @param txReceiptRpc transaction receipt to unmarshall\n   * @return unmarshalled transaction receipt\n   */\n  unmarshalTransactionReceipt: function unmarshalTransactionReceipt(txReceiptRpc) {\n    var txReceipt = __assign({}, txReceiptRpc, {\n      blockNumber: utils_2.utils.convertHexToNumber(txReceiptRpc.blockNumber),\n      transactionIndex: utils_2.utils.convertHexToNumber(txReceiptRpc.transactionIndex),\n      cumulativeGasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.cumulativeGasUsed),\n      gasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.gasUsed),\n      logs: _.map(txReceiptRpc.logs, exports.marshaller.unmarshalLog.bind(exports.marshaller))\n    });\n\n    return txReceipt;\n  },\n\n  /**\n   * Unmarshall transaction data\n   * @param txDataRpc transaction data to unmarshall\n   * @return unmarshalled transaction data\n   */\n  unmarshalTxData: function unmarshalTxData(txDataRpc) {\n    if (txDataRpc.from === undefined) {\n      throw new Error(\"txData must include valid 'from' value.\");\n    }\n\n    var txData = __assign({}, txDataRpc, {\n      value: txDataRpc.value !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.value) : undefined,\n      gas: txDataRpc.gas !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.gas) : undefined,\n      gasPrice: txDataRpc.gasPrice !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.gasPrice) : undefined,\n      nonce: txDataRpc.nonce !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.nonce) : undefined\n    });\n\n    return txData;\n  },\n\n  /**\n   * Marshall transaction data\n   * @param txData transaction data to marshall\n   * @return marshalled transaction data\n   */\n  marshalTxData: function marshalTxData(txData) {\n    if (txData.from === undefined) {\n      throw new Error(\"txData must include valid 'from' value.\");\n    }\n\n    var callTxDataBase = __assign({}, txData);\n\n    delete callTxDataBase.from;\n\n    var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n\n    var txDataRPC = __assign({}, callTxDataBaseRPC, {\n      from: exports.marshaller.marshalAddress(txData.from)\n    });\n\n    var prunableIfUndefined = ['gasPrice', 'gas', 'value', 'nonce'];\n\n    _.each(txDataRPC, function (value, key) {\n      if (value === undefined && _.includes(prunableIfUndefined, key)) {\n        delete txDataRPC[key];\n      }\n    });\n\n    return txDataRPC;\n  },\n\n  /**\n   * Marshall call data\n   * @param callData call data to marshall\n   * @return marshalled call data\n   */\n  marshalCallData: function marshalCallData(callData) {\n    var callTxDataBase = __assign({}, callData);\n\n    delete callTxDataBase.from;\n\n    var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n\n    var callDataRPC = __assign({}, callTxDataBaseRPC, {\n      from: callData.from === undefined ? undefined : exports.marshaller.marshalAddress(callData.from)\n    });\n\n    return callDataRPC;\n  },\n\n  /**\n   * Marshall address\n   * @param address address to marshall\n   * @return marshalled address\n   */\n  marshalAddress: function marshalAddress(address) {\n    if (utils_1.addressUtils.isAddress(address)) {\n      return ethUtil.addHexPrefix(address);\n    }\n\n    throw new Error(\"Invalid address encountered: \" + address);\n  },\n\n  /**\n   * Marshall block param\n   * @param blockParam block param to marshall\n   * @return marshalled block param\n   */\n  marshalBlockParam: function marshalBlockParam(blockParam) {\n    if (blockParam === undefined) {\n      return ethereum_types_1.BlockParamLiteral.Latest;\n    }\n\n    var encodedBlockParam = _.isNumber(blockParam) ? utils_2.utils.numberToHex(blockParam) : blockParam;\n    return encodedBlockParam;\n  },\n\n  /**\n   * Unmarshall log\n   * @param rawLog log to unmarshall\n   * @return unmarshalled log\n   */\n  unmarshalLog: function unmarshalLog(rawLog) {\n    var formattedLog = __assign({}, rawLog, {\n      logIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.logIndex),\n      blockNumber: utils_2.utils.convertHexToNumberOrNull(rawLog.blockNumber),\n      transactionIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.transactionIndex)\n    });\n\n    return formattedLog;\n  },\n  _marshalCallTxDataBase: function _marshalCallTxDataBase(callTxDataBase) {\n    var callTxDataBaseRPC = __assign({}, callTxDataBase, {\n      to: callTxDataBase.to === undefined ? undefined : exports.marshaller.marshalAddress(callTxDataBase.to),\n      gasPrice: callTxDataBase.gasPrice === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gasPrice),\n      gas: callTxDataBase.gas === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gas),\n      value: callTxDataBase.value === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.value),\n      nonce: callTxDataBase.nonce === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.nonce)\n    });\n\n    return callTxDataBaseRPC;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}