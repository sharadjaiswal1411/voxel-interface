{"ast":null,"code":"import _classCallCheck from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { logger, getGlobalObject, extractTraceparentData, parseBaggageSetMutability } from '@sentry/utils';\nimport { startIdleTransaction } from '../hubextensions.js';\nimport { DEFAULT_IDLE_TIMEOUT, DEFAULT_FINAL_TIMEOUT } from '../idletransaction.js';\nimport '../utils.js';\nimport { registerBackgroundTabDetection } from './backgroundtab.js';\nimport { startTrackingWebVitals, startTrackingLongTasks, addPerformanceEntries } from './metrics/index.js';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request.js';\nimport { instrumentRoutingWithDefaults } from './router.js';\nvar BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n/** Options for Browser Tracing integration */\n\nvar DEFAULT_BROWSER_TRACING_OPTIONS = _objectSpread({\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  finalTimeout: DEFAULT_FINAL_TIMEOUT,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  _experiments: {\n    enableLongTask: true\n  }\n}, defaultRequestInstrumentationOptions);\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\n\n\nvar BrowserTracing = /*#__PURE__*/function () {\n  function BrowserTracing(_options) {\n    _classCallCheck(this, BrowserTracing);\n\n    ;\n\n    BrowserTracing.prototype.__init.call(this);\n\n    var tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins; // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n\n    if (_options) {\n      if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins)) {\n        tracingOrigins = _options.tracingOrigins;\n      } else {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && (this._emitOptionsWarning = true);\n      }\n    }\n\n    this.options = _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), {}, {\n      tracingOrigins: tracingOrigins\n    });\n    var _metricOptions = this.options._metricOptions;\n    startTrackingWebVitals(_metricOptions && _metricOptions._reportAllChanges);\n\n    if (_optionalChain([this, 'access', function (_2) {\n      return _2.options;\n    }, 'access', function (_3) {\n      return _3._experiments;\n    }, 'optionalAccess', function (_4) {\n      return _4.enableLongTask;\n    }])) {\n      startTrackingLongTasks();\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(BrowserTracing, [{\n    key: \"__init\",\n    value: // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n    // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n    // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n    // integrations.\n\n    /** Browser Tracing integration options */\n\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = BROWSER_TRACING_INTEGRATION_ID;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      var _this = this;\n\n      this._getCurrentHub = getCurrentHub;\n\n      if (this._emitOptionsWarning) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.');\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"[Tracing] We added a reasonable default for you: \".concat(defaultRequestInstrumentationOptions.tracingOrigins));\n      }\n\n      var _this$options = this.options,\n          instrumentRouting = _this$options.routingInstrumentation,\n          startTransactionOnLocationChange = _this$options.startTransactionOnLocationChange,\n          startTransactionOnPageLoad = _this$options.startTransactionOnPageLoad,\n          markBackgroundTransactions = _this$options.markBackgroundTransactions,\n          traceFetch = _this$options.traceFetch,\n          traceXHR = _this$options.traceXHR,\n          tracingOrigins = _this$options.tracingOrigins,\n          shouldCreateSpanForRequest = _this$options.shouldCreateSpanForRequest;\n      instrumentRouting(function (context) {\n        return _this._createRouteTransaction(context);\n      }, startTransactionOnPageLoad, startTransactionOnLocationChange);\n\n      if (markBackgroundTransactions) {\n        registerBackgroundTabDetection();\n      }\n\n      instrumentOutgoingRequests({\n        traceFetch: traceFetch,\n        traceXHR: traceXHR,\n        tracingOrigins: tracingOrigins,\n        shouldCreateSpanForRequest: shouldCreateSpanForRequest\n      });\n    }\n    /** Create routing idle transaction. */\n\n  }, {\n    key: \"_createRouteTransaction\",\n    value: function _createRouteTransaction(context) {\n      var _this2 = this;\n\n      if (!this._getCurrentHub) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"[Tracing] Did not create \".concat(context.op, \" transaction because _getCurrentHub is invalid.\"));\n        return undefined;\n      }\n\n      var _this$options2 = this.options,\n          beforeNavigate = _this$options2.beforeNavigate,\n          idleTimeout = _this$options2.idleTimeout,\n          finalTimeout = _this$options2.finalTimeout;\n      var parentContextFromHeader = context.op === 'pageload' ? extractTraceDataFromMetaTags() : undefined;\n\n      var expandedContext = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, context), parentContextFromHeader), parentContextFromHeader && {\n        metadata: _objectSpread(_objectSpread({}, context.metadata), parentContextFromHeader.metadata)\n      }), {}, {\n        trimEnd: true\n      });\n\n      var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext; // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n      // from being sent to Sentry).\n\n      var finalContext = modifiedContext === undefined ? _objectSpread(_objectSpread({}, expandedContext), {}, {\n        sampled: false\n      }) : modifiedContext; // If `beforeNavigate` set a custom name, record that fact\n\n      finalContext.metadata = finalContext.name !== expandedContext.name ? _objectSpread(_objectSpread({}, finalContext.metadata), {}, {\n        source: 'custom'\n      }) : finalContext.metadata;\n\n      if (finalContext.sampled === false) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(\"[Tracing] Will not send \".concat(finalContext.op, \" transaction because of beforeNavigate.\"));\n      }\n\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(\"[Tracing] Starting \".concat(finalContext.op, \" transaction on scope\"));\n\n      var hub = this._getCurrentHub();\n\n      var _getGlobalObject = getGlobalObject(),\n          location = _getGlobalObject.location;\n\n      var idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, finalTimeout, true, {\n        location: location\n      } // for use in the tracesSampler\n      );\n      idleTransaction.registerBeforeFinishCallback(function (transaction) {\n        addPerformanceEntries(transaction);\n        transaction.setTag('sentry_reportAllChanges', Boolean(_this2.options._metricOptions && _this2.options._metricOptions._reportAllChanges));\n      });\n      return idleTransaction;\n    }\n  }]);\n\n  return BrowserTracing;\n}();\n/**\n * Gets transaction context data from `sentry-trace` and `baggage` <meta> tags.\n * @returns Transaction context data or undefined neither tag exists or has valid data\n */\n\n\nfunction extractTraceDataFromMetaTags() {\n  var sentrytraceValue = getMetaContent('sentry-trace');\n  var baggageValue = getMetaContent('baggage');\n  var sentrytraceData = sentrytraceValue ? extractTraceparentData(sentrytraceValue) : undefined;\n  var baggage = parseBaggageSetMutability(baggageValue, sentrytraceValue); // TODO more extensive checks for baggage validity/emptyness?\n\n  if (sentrytraceData || baggage) {\n    return _objectSpread(_objectSpread({}, sentrytraceData && sentrytraceData), baggage && {\n      metadata: {\n        baggage: baggage\n      }\n    });\n  }\n\n  return undefined;\n}\n/** Returns the value of a meta tag */\n\n\nfunction getMetaContent(metaName) {\n  var globalObject = getGlobalObject(); // DOM/querySelector is not available in all environments\n\n  if (globalObject.document && globalObject.document.querySelector) {\n    var el = globalObject.document.querySelector(\"meta[name=\".concat(metaName, \"]\"));\n    return el ? el.getAttribute('content') : null;\n  } else {\n    return null;\n  }\n}\n\nexport { BROWSER_TRACING_INTEGRATION_ID, BrowserTracing, extractTraceDataFromMetaTags, getMetaContent };","map":null,"metadata":{},"sourceType":"module"}