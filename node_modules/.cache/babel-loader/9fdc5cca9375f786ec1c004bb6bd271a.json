{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = require(\"lodash\");\n\nvar calldata_1 = require(\"../calldata/calldata\");\n\nvar raw_calldata_1 = require(\"../calldata/raw_calldata\");\n\nvar constants_1 = require(\"../utils/constants\");\n\nvar DataType =\n/** @class */\nfunction () {\n  function DataType(dataItem, factory) {\n    this._dataItem = dataItem;\n    this._factory = factory;\n  }\n\n  DataType.prototype.getDataItem = function () {\n    return this._dataItem;\n  };\n\n  DataType.prototype.getFactory = function () {\n    return this._factory;\n  };\n\n  DataType.prototype.encode = function (value, rules, selector) {\n    var rules_ = rules === undefined ? constants_1.constants.DEFAULT_ENCODING_RULES : rules;\n    var calldata = new calldata_1.Calldata(rules_);\n\n    if (selector !== undefined) {\n      calldata.setSelector(selector);\n    }\n\n    var block = this.generateCalldataBlock(value);\n    calldata.setRoot(block);\n    var encodedCalldata = calldata.toString();\n    return encodedCalldata;\n  };\n\n  DataType.prototype.decode = function (calldata, rules, selector) {\n    if (selector !== undefined && !_.startsWith(calldata, selector)) {\n      throw new Error(\"Tried to decode calldata, but it was missing the function selector. Expected prefix '\" + selector + \"'. Got '\" + calldata + \"'.\");\n    }\n\n    var hasSelector = selector !== undefined;\n    var rawCalldata = new raw_calldata_1.RawCalldata(calldata, hasSelector);\n    var rules_ = rules === undefined ? constants_1.constants.DEFAULT_DECODING_RULES : rules;\n    var value = rawCalldata.getSizeInBytes() > 0 ? this.generateValue(rawCalldata, rules_) : this.getDefaultValue(rules_);\n    return value;\n  };\n\n  DataType.prototype.decodeAsArray = function (returndata, rules) {\n    var value = this.decode(returndata, rules);\n    var valuesAsArray = _.isObject(value) ? _.values(value) : [value];\n    return valuesAsArray;\n  };\n\n  DataType.prototype.getSignature = function (isDetailed) {\n    if (_.isEmpty(this._dataItem.name) || !isDetailed) {\n      return this.getSignatureType();\n    }\n\n    var name = this.getDataItem().name;\n    var lastIndexOfScopeDelimiter = name.lastIndexOf('.');\n    var isScopedName = lastIndexOfScopeDelimiter !== undefined && lastIndexOfScopeDelimiter > 0;\n    var shortName = isScopedName ? name.substr(lastIndexOfScopeDelimiter + 1) : name;\n    var detailedSignature = shortName + \" \" + this.getSignatureType();\n    return detailedSignature;\n  };\n\n  return DataType;\n}();\n\nexports.DataType = DataType;","map":null,"metadata":{},"sourceType":"script"}