{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\n\nvar _s = $RefreshSig$();\n\nvar _excluded = [\"networkId\"];\nimport { i18n } from \"@lingui/core\";\nimport { UnsupportedChainIdError } from '@web3-react/core';\nimport { stringify } from 'qs';\nimport { useCallback, useEffect, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport { NETWORKS_INFO, SUPPORTED_NETWORKS } from 'constants/networks';\nimport { useActiveWeb3React } from 'hooks';\nimport { updateChainIdWhenNotConnected } from 'state/application/actions';\nimport { NotificationType, useNotify } from 'state/application/hooks';\nimport { useAppDispatch } from 'state/hooks';\nimport useParsedQueryString from './useParsedQueryString';\n\nvar getAddNetworkParams = function getAddNetworkParams(chainId) {\n  return {\n    chainId: '0x' + chainId.toString(16),\n    chainName: NETWORKS_INFO[chainId].name,\n    nativeCurrency: {\n      name: NETWORKS_INFO[chainId].nativeToken.symbol,\n      symbol: NETWORKS_INFO[chainId].nativeToken.symbol,\n      decimals: NETWORKS_INFO[chainId].nativeToken.decimal\n    },\n    rpcUrls: [NETWORKS_INFO[chainId].rpcUrl],\n    blockExplorerUrls: [NETWORKS_INFO[chainId].etherscanUrl]\n  };\n};\n/**\n * Given a network string (e.g. from user agent), return the best match for corresponding SupportedNetwork\n * @param maybeSupportedNetwork the fuzzy network identifier, can be networkId (1, 137, ...) or networkName (ethereum, polygon, ...)\n */\n\n\nfunction parseNetworkId(maybeSupportedNetwork) {\n  return SUPPORTED_NETWORKS.find(function (chainId) {\n    return chainId.toString() === maybeSupportedNetwork || NETWORKS_INFO[chainId].route === maybeSupportedNetwork;\n  });\n}\n\nexport function useActiveNetwork() {\n  _s();\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      chainId = _useActiveWeb3React.chainId,\n      library = _useActiveWeb3React.library,\n      error = _useActiveWeb3React.error;\n\n  var history = useHistory();\n  var location = useLocation();\n  var qs = useParsedQueryString();\n  var dispatch = useAppDispatch();\n  var notify = useNotify();\n  var locationWithoutNetworkId = useMemo(function () {\n    // Delete networkId from qs object\n    var networkId = qs.networkId,\n        qsWithoutNetworkId = _objectWithoutProperties(qs, _excluded);\n\n    return _objectSpread(_objectSpread({}, location), {}, {\n      search: stringify(_objectSpread({}, qsWithoutNetworkId))\n    });\n  }, [location, qs]);\n  var changeNetwork = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(desiredChainId, successCallback, failureCallback) {\n      var _library$provider;\n\n      var switchNetworkParams, addNetworkParams, isNotConnected, isWrongNetwork, activeProvider, _Object$keys, isSwitchError;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              switchNetworkParams = {\n                chainId: '0x' + Number(desiredChainId).toString(16)\n              };\n              addNetworkParams = getAddNetworkParams(desiredChainId);\n              isNotConnected = !(library && library.provider);\n              isWrongNetwork = error instanceof UnsupportedChainIdError;\n\n              if (!(isNotConnected && !isWrongNetwork)) {\n                _context.next = 8;\n                break;\n              }\n\n              dispatch(updateChainIdWhenNotConnected(desiredChainId));\n              successCallback && successCallback();\n              return _context.abrupt(\"return\");\n\n            case 8:\n              history.push(locationWithoutNetworkId);\n              activeProvider = (_library$provider = library === null || library === void 0 ? void 0 : library.provider) !== null && _library$provider !== void 0 ? _library$provider : window.ethereum;\n\n              if (!(activeProvider && activeProvider.request)) {\n                _context.next = 45;\n                break;\n              }\n\n              _context.prev = 11;\n              _context.next = 14;\n              return activeProvider.request({\n                method: 'wallet_switchEthereumChain',\n                params: [switchNetworkParams]\n              });\n\n            case 14:\n              successCallback && successCallback();\n              _context.next = 45;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](11);\n              // This is a workaround solution for Coin98\n              isSwitchError = typeof _context.t0 === 'object' && _context.t0 && ((_Object$keys = Object.keys(_context.t0)) === null || _Object$keys === void 0 ? void 0 : _Object$keys.length) === 0; // This error code indicates that the chain has not been added to MetaMask.\n\n              if (!((_context.t0 === null || _context.t0 === void 0 ? void 0 : _context.t0.code) === 4902 || (_context.t0 === null || _context.t0 === void 0 ? void 0 : _context.t0.code) === -32603 || isSwitchError)) {\n                _context.next = 42;\n                break;\n              }\n\n              _context.prev = 21;\n              _context.next = 24;\n              return activeProvider.request({\n                method: 'wallet_addEthereumChain',\n                params: [addNetworkParams]\n              });\n\n            case 24:\n              _context.prev = 24;\n              _context.next = 27;\n              return activeProvider.request({\n                method: 'wallet_switchEthereumChain',\n                params: [switchNetworkParams]\n              });\n\n            case 27:\n              _context.next = 32;\n              break;\n\n            case 29:\n              _context.prev = 29;\n              _context.t1 = _context[\"catch\"](24);\n              notify({\n                title:\n                /*i18n*/\n                i18n._(\"Failed to switch network\"),\n                type: NotificationType.ERROR,\n                summary:\n                /*i18n*/\n                i18n._(\"In order to use VoxelSwap on {0}, you must change the network in your wallet.\", {\n                  0: NETWORKS_INFO[desiredChainId].name\n                })\n              });\n\n            case 32:\n              successCallback && successCallback();\n              _context.next = 40;\n              break;\n\n            case 35:\n              _context.prev = 35;\n              _context.t2 = _context[\"catch\"](21);\n              console.error('add', _context.t2);\n\n              if ((_context.t2 === null || _context.t2 === void 0 ? void 0 : _context.t2.code) === 4001) {\n                notify({\n                  title:\n                  /*i18n*/\n                  i18n._(\"Failed to switch network\"),\n                  type: NotificationType.ERROR,\n                  summary:\n                  /*i18n*/\n                  i18n._(\"In order to use VoxelSwap on {0}, you must change the network in your wallet.\", {\n                    0: NETWORKS_INFO[desiredChainId].name\n                  })\n                });\n              }\n\n              failureCallback && failureCallback();\n\n            case 40:\n              _context.next = 45;\n              break;\n\n            case 42:\n              // handle other \"switch\" errors\n              console.error('switch', _context.t0);\n              failureCallback && failureCallback();\n              notify({\n                title:\n                /*i18n*/\n                i18n._(\"Failed to switch network\"),\n                type: NotificationType.ERROR,\n                summary:\n                /*i18n*/\n                i18n._(\"In order to use VoxelSwap on {0}, you must change the network in your wallet.\", {\n                  0: NETWORKS_INFO[desiredChainId].name\n                })\n              });\n\n            case 45:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[11, 17], [21, 35], [24, 29]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [dispatch, history, library, locationWithoutNetworkId, error, notify]);\n  useEffect(function () {\n    var urlNetworkId = typeof qs.networkId === 'string' ? parseNetworkId(qs.networkId) : undefined;\n\n    if (urlNetworkId && urlNetworkId !== chainId) {\n      changeNetwork(urlNetworkId);\n    }\n  }, [chainId, changeNetwork, qs.networkId]);\n  return {\n    changeNetwork: changeNetwork\n  };\n}\n\n_s(useActiveNetwork, \"Tw8Sikx4kj0p91l4Y6VJ8TYKjQ4=\", false, function () {\n  return [useActiveWeb3React, useHistory, useLocation, useParsedQueryString, useAppDispatch, useNotify];\n});","map":{"version":3,"names":["UnsupportedChainIdError","stringify","useCallback","useEffect","useMemo","useHistory","useLocation","NETWORKS_INFO","SUPPORTED_NETWORKS","useActiveWeb3React","updateChainIdWhenNotConnected","NotificationType","useNotify","useAppDispatch","useParsedQueryString","getAddNetworkParams","chainId","toString","chainName","name","nativeCurrency","nativeToken","symbol","decimals","decimal","rpcUrls","rpcUrl","blockExplorerUrls","etherscanUrl","parseNetworkId","maybeSupportedNetwork","find","route","useActiveNetwork","library","error","history","location","qs","dispatch","notify","locationWithoutNetworkId","networkId","qsWithoutNetworkId","search","changeNetwork","desiredChainId","successCallback","failureCallback","switchNetworkParams","Number","addNetworkParams","isNotConnected","provider","isWrongNetwork","push","activeProvider","window","ethereum","request","method","params","isSwitchError","Object","keys","length","code","title","type","ERROR","summary","console","urlNetworkId","undefined"],"sources":["/Applications/XAMPP/voxel-interface/src/hooks/useActiveNetwork.ts"],"sourcesContent":["import { ChainId } from '@kyberswap/ks-sdk-core'\nimport { t } from '@lingui/macro'\nimport { UnsupportedChainIdError } from '@web3-react/core'\nimport { stringify } from 'qs'\nimport { useCallback, useEffect, useMemo } from 'react'\nimport { useHistory, useLocation } from 'react-router'\n\nimport { NETWORKS_INFO, SUPPORTED_NETWORKS } from 'constants/networks'\nimport { useActiveWeb3React } from 'hooks'\nimport { updateChainIdWhenNotConnected } from 'state/application/actions'\nimport { NotificationType, useNotify } from 'state/application/hooks'\nimport { useAppDispatch } from 'state/hooks'\n\nimport useParsedQueryString from './useParsedQueryString'\n\nconst getAddNetworkParams = (chainId: ChainId) => ({\n  chainId: '0x' + chainId.toString(16),\n  chainName: NETWORKS_INFO[chainId].name,\n  nativeCurrency: {\n    name: NETWORKS_INFO[chainId].nativeToken.symbol,\n    symbol: NETWORKS_INFO[chainId].nativeToken.symbol,\n    decimals: NETWORKS_INFO[chainId].nativeToken.decimal,\n  },\n  rpcUrls: [NETWORKS_INFO[chainId].rpcUrl],\n  blockExplorerUrls: [NETWORKS_INFO[chainId].etherscanUrl],\n})\n\n/**\n * Given a network string (e.g. from user agent), return the best match for corresponding SupportedNetwork\n * @param maybeSupportedNetwork the fuzzy network identifier, can be networkId (1, 137, ...) or networkName (ethereum, polygon, ...)\n */\nfunction parseNetworkId(maybeSupportedNetwork: string): ChainId | undefined {\n  return SUPPORTED_NETWORKS.find(chainId => {\n    return chainId.toString() === maybeSupportedNetwork || NETWORKS_INFO[chainId].route === maybeSupportedNetwork\n  })\n}\n\nexport function useActiveNetwork() {\n  const { chainId, library, error } = useActiveWeb3React()\n  const history = useHistory()\n  const location = useLocation()\n  const qs = useParsedQueryString()\n  const dispatch = useAppDispatch()\n  const notify = useNotify()\n\n  const locationWithoutNetworkId = useMemo(() => {\n    // Delete networkId from qs object\n    const { networkId, ...qsWithoutNetworkId } = qs\n    return { ...location, search: stringify({ ...qsWithoutNetworkId }) }\n  }, [location, qs])\n\n  const changeNetwork = useCallback(\n    async (desiredChainId: ChainId, successCallback?: () => void, failureCallback?: () => void) => {\n      const switchNetworkParams = {\n        chainId: '0x' + Number(desiredChainId).toString(16),\n      }\n      const addNetworkParams = getAddNetworkParams(desiredChainId)\n\n      const isNotConnected = !(library && library.provider)\n      const isWrongNetwork = error instanceof UnsupportedChainIdError\n      if (isNotConnected && !isWrongNetwork) {\n        dispatch(updateChainIdWhenNotConnected(desiredChainId))\n        successCallback && successCallback()\n        return\n      }\n\n      history.push(locationWithoutNetworkId)\n      const activeProvider = library?.provider ?? window.ethereum\n      if (activeProvider && activeProvider.request) {\n        try {\n          await activeProvider.request({\n            method: 'wallet_switchEthereumChain',\n            params: [switchNetworkParams],\n          })\n          successCallback && successCallback()\n        } catch (switchError) {\n          // This is a workaround solution for Coin98\n          const isSwitchError = typeof switchError === 'object' && switchError && Object.keys(switchError)?.length === 0\n          // This error code indicates that the chain has not been added to MetaMask.\n          if (switchError?.code === 4902 || switchError?.code === -32603 || isSwitchError) {\n            try {\n              await activeProvider.request({ method: 'wallet_addEthereumChain', params: [addNetworkParams] })\n              try {\n                await activeProvider.request({\n                  method: 'wallet_switchEthereumChain',\n                  params: [switchNetworkParams],\n                })\n              } catch {\n                notify({\n                  title: t`Failed to switch network`,\n                  type: NotificationType.ERROR,\n                  summary: t`In order to use VoxelSwap on ${NETWORKS_INFO[desiredChainId].name}, you must change the network in your wallet.`,\n                })\n              }\n              successCallback && successCallback()\n            } catch (addError) {\n              console.error('add', addError)\n              if (addError?.code === 4001) {\n                notify({\n                  title: t`Failed to switch network`,\n                  type: NotificationType.ERROR,\n                  summary: t`In order to use VoxelSwap on ${NETWORKS_INFO[desiredChainId].name}, you must change the network in your wallet.`,\n                })\n              }\n              failureCallback && failureCallback()\n            }\n          } else {\n            // handle other \"switch\" errors\n            console.error('switch', switchError)\n            failureCallback && failureCallback()\n            notify({\n              title: t`Failed to switch network`,\n              type: NotificationType.ERROR,\n              summary: t`In order to use VoxelSwap on ${NETWORKS_INFO[desiredChainId].name}, you must change the network in your wallet.`,\n            })\n          }\n        }\n      }\n    },\n    [dispatch, history, library, locationWithoutNetworkId, error, notify],\n  )\n\n  useEffect(() => {\n    const urlNetworkId = typeof qs.networkId === 'string' ? parseNetworkId(qs.networkId) : undefined\n    if (urlNetworkId && urlNetworkId !== chainId) {\n      changeNetwork(urlNetworkId)\n    }\n  }, [chainId, changeNetwork, qs.networkId])\n\n  return { changeNetwork }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}