{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { GLOBAL_DATA, GLOBAL_DATA_ELASTIC } from 'apollo/queries';\nimport { MAINNET_NETWORKS, NETWORKS_INFO } from 'constants/networks';\nimport { ELASTIC_NOT_SUPPORTED } from 'constants/v2';\nimport useAggregatorAPR from 'hooks/useAggregatorAPR';\nimport useAggregatorVolume from 'hooks/useAggregatorVolume';\nexport function useGlobalData() {\n  _s();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      globalData = _useState2[0],\n      setGlobalData = _useState2[1];\n\n  var aggregatorData = useAggregatorVolume();\n  var aggregatorAPR = useAggregatorAPR();\n  useEffect(function () {\n    var getSumValues = function getSumValues(results, field) {\n      return results.reduce(function (total, item) {\n        var _item$data, _item$data$dmmFactori;\n\n        if (!(item !== null && item !== void 0 && (_item$data = item.data) !== null && _item$data !== void 0 && (_item$data$dmmFactori = _item$data.dmmFactories) !== null && _item$data$dmmFactori !== void 0 && _item$data$dmmFactori.length)) return total;\n        var sum = item.data.dmmFactories.reduce(function (sum, factory) {\n          return sum + parseFloat(factory[field] || '0');\n        }, 0);\n        return total + sum;\n      }, 0).toString();\n    };\n\n    var getResultByChainIds = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(chainIds) {\n        var elasticChains, elasticPromises, elasticResult, tvlElastic, allChainPromises, queryResult;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                elasticChains = chainIds.filter(function (id) {\n                  return !ELASTIC_NOT_SUPPORTED[id];\n                });\n                elasticPromises = elasticChains.map(function (chain) {\n                  return NETWORKS_INFO[chain].elasticClient.query({\n                    query: GLOBAL_DATA_ELASTIC(),\n                    fetchPolicy: 'cache-first'\n                  });\n                });\n                _context.next = 4;\n                return Promise.all(elasticPromises.map(function (promises) {\n                  return promises.catch(function (e) {\n                    return e;\n                  });\n                }));\n\n              case 4:\n                elasticResult = _context.sent.filter(function (res) {\n                  return !(res instanceof Error);\n                });\n                tvlElastic = elasticResult.reduce(function (total, item) {\n                  var _item$data2, _item$data2$factories, _item$data2$factories2;\n\n                  return total + parseFloat((item === null || item === void 0 ? void 0 : (_item$data2 = item.data) === null || _item$data2 === void 0 ? void 0 : (_item$data2$factories = _item$data2.factories) === null || _item$data2$factories === void 0 ? void 0 : (_item$data2$factories2 = _item$data2$factories[0]) === null || _item$data2$factories2 === void 0 ? void 0 : _item$data2$factories2.totalValueLockedUSD) || '0');\n                }, 0);\n                allChainPromises = chainIds.map(function (chain) {\n                  return NETWORKS_INFO[chain].classicClient.query({\n                    query: GLOBAL_DATA(),\n                    fetchPolicy: 'no-cache'\n                  });\n                });\n                _context.next = 9;\n                return Promise.all(allChainPromises.map(function (promises) {\n                  return promises.catch(function (e) {\n                    return e;\n                  });\n                }));\n\n              case 9:\n                queryResult = _context.sent.filter(function (res) {\n                  return !(res instanceof Error);\n                });\n                return _context.abrupt(\"return\", {\n                  data: {\n                    dmmFactories: [{\n                      totalVolumeUSD: getSumValues(queryResult, 'totalVolumeUSD'),\n                      totalVolumeETH: getSumValues(queryResult, 'totalVolumeETH'),\n                      totalFeeUSD: getSumValues(queryResult, 'totalFeeUSD'),\n                      untrackedVolumeUSD: getSumValues(queryResult, 'untrackedVolumeUSD'),\n                      untrackedFeeUSD: getSumValues(queryResult, 'untrackedFeeUSD'),\n                      totalLiquidityUSD: parseFloat(getSumValues(queryResult, 'totalLiquidityUSD')) + tvlElastic,\n                      totalLiquidityETH: getSumValues(queryResult, 'totalLiquidityETH'),\n                      totalAmplifiedLiquidityUSD: getSumValues(queryResult, 'totalAmplifiedLiquidityUSD'),\n                      totalAmplifiedLiquidityETH: getSumValues(queryResult, 'totalAmplifiedLiquidityETH')\n                    }]\n                  }\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getResultByChainIds(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    function getGlobalData() {\n      return _getGlobalData.apply(this, arguments);\n    }\n\n    function _getGlobalData() {\n      _getGlobalData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return getResultByChainIds(MAINNET_NETWORKS);\n\n              case 2:\n                result = _context2.sent;\n                setGlobalData(_objectSpread(_objectSpread({}, result.data), {}, {\n                  aggregatorData: {\n                    totalVolume: aggregatorData === null || aggregatorData === void 0 ? void 0 : aggregatorData.totalVolume,\n                    last24hVolume: aggregatorData === null || aggregatorData === void 0 ? void 0 : aggregatorData.last24hVolume,\n                    maxApr: aggregatorAPR === null || aggregatorAPR === void 0 ? void 0 : aggregatorAPR.max_apr,\n                    totalEarnings: aggregatorAPR === null || aggregatorAPR === void 0 ? void 0 : aggregatorAPR.total_earnings\n                  }\n                }));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return _getGlobalData.apply(this, arguments);\n    }\n\n    getGlobalData();\n  }, [aggregatorData, aggregatorAPR]);\n  return globalData;\n}\n\n_s(useGlobalData, \"V0y2YjuW/fk0tyPTqzfhoiBlkDg=\", false, function () {\n  return [useAggregatorVolume, useAggregatorAPR];\n});","map":{"version":3,"names":["useEffect","useState","GLOBAL_DATA","GLOBAL_DATA_ELASTIC","MAINNET_NETWORKS","NETWORKS_INFO","ELASTIC_NOT_SUPPORTED","useAggregatorAPR","useAggregatorVolume","useGlobalData","globalData","setGlobalData","aggregatorData","aggregatorAPR","getSumValues","results","field","reduce","total","item","data","dmmFactories","length","sum","factory","parseFloat","toString","getResultByChainIds","chainIds","elasticChains","filter","id","elasticPromises","map","chain","elasticClient","query","fetchPolicy","Promise","all","promises","catch","e","elasticResult","res","Error","tvlElastic","factories","totalValueLockedUSD","allChainPromises","classicClient","queryResult","totalVolumeUSD","totalVolumeETH","totalFeeUSD","untrackedVolumeUSD","untrackedFeeUSD","totalLiquidityUSD","totalLiquidityETH","totalAmplifiedLiquidityUSD","totalAmplifiedLiquidityETH","getGlobalData","result","totalVolume","last24hVolume","maxApr","max_apr","totalEarnings","total_earnings"],"sources":["/Applications/XAMPP/voxel-interface/src/state/about/hooks.ts"],"sourcesContent":["import { ChainId } from '@kyberswap/ks-sdk-core'\nimport { useEffect, useState } from 'react'\n\nimport { GLOBAL_DATA, GLOBAL_DATA_ELASTIC } from 'apollo/queries'\nimport { MAINNET_NETWORKS, NETWORKS_INFO } from 'constants/networks'\nimport { ELASTIC_NOT_SUPPORTED } from 'constants/v2'\nimport useAggregatorAPR from 'hooks/useAggregatorAPR'\nimport useAggregatorVolume from 'hooks/useAggregatorVolume'\n\ninterface GlobalData {\n  dmmFactories: {\n    totalVolumeUSD: string\n    totalVolumeETH: string\n    totalFeeUSD: string\n    untrackedVolumeUSD: string\n    untrackedFeeUSD: string\n    totalLiquidityUSD: string\n    totalLiquidityETH: string\n    totalAmplifiedLiquidityUSD: string\n    totalAmplifiedLiquidityETH: string\n    [key: string]: string\n  }[]\n  aggregatorData?: {\n    totalVolume?: string\n    last24hVolume?: string\n    maxApr?: {\n      value: number\n      id: string\n      chain_id: number\n      is_farm: boolean\n    }\n    totalEarnings?: number\n  }\n}\n\nexport function useGlobalData() {\n  const [globalData, setGlobalData] = useState<GlobalData>()\n  const aggregatorData = useAggregatorVolume()\n  const aggregatorAPR = useAggregatorAPR()\n\n  useEffect(() => {\n    const getSumValues = (results: { data: GlobalData }[], field: string) => {\n      return results\n        .reduce((total, item) => {\n          if (!item?.data?.dmmFactories?.length) return total\n          const sum = item.data.dmmFactories.reduce((sum, factory) => sum + parseFloat(factory[field] || '0'), 0)\n          return total + sum\n        }, 0)\n        .toString()\n    }\n    const getResultByChainIds = async (chainIds: readonly ChainId[]) => {\n      const elasticChains = chainIds.filter(id => !ELASTIC_NOT_SUPPORTED[id])\n\n      const elasticPromises = elasticChains.map(chain =>\n        NETWORKS_INFO[chain].elasticClient.query({\n          query: GLOBAL_DATA_ELASTIC(),\n          fetchPolicy: 'cache-first',\n        }),\n      )\n\n      const elasticResult = (await Promise.all(elasticPromises.map(promises => promises.catch(e => e)))).filter(\n        res => !(res instanceof Error),\n      )\n\n      const tvlElastic = elasticResult.reduce((total, item) => {\n        return total + parseFloat(item?.data?.factories?.[0]?.totalValueLockedUSD || '0')\n      }, 0)\n\n      const allChainPromises = chainIds.map(chain =>\n        NETWORKS_INFO[chain].classicClient.query({\n          query: GLOBAL_DATA(),\n          fetchPolicy: 'no-cache',\n        }),\n      )\n\n      const queryResult = (await Promise.all(allChainPromises.map(promises => promises.catch(e => e)))).filter(\n        res => !(res instanceof Error),\n      )\n\n      return {\n        data: {\n          dmmFactories: [\n            {\n              totalVolumeUSD: getSumValues(queryResult, 'totalVolumeUSD'),\n              totalVolumeETH: getSumValues(queryResult, 'totalVolumeETH'),\n              totalFeeUSD: getSumValues(queryResult, 'totalFeeUSD'),\n              untrackedVolumeUSD: getSumValues(queryResult, 'untrackedVolumeUSD'),\n              untrackedFeeUSD: getSumValues(queryResult, 'untrackedFeeUSD'),\n              totalLiquidityUSD: parseFloat(getSumValues(queryResult, 'totalLiquidityUSD')) + tvlElastic,\n              totalLiquidityETH: getSumValues(queryResult, 'totalLiquidityETH'),\n              totalAmplifiedLiquidityUSD: getSumValues(queryResult, 'totalAmplifiedLiquidityUSD'),\n              totalAmplifiedLiquidityETH: getSumValues(queryResult, 'totalAmplifiedLiquidityETH'),\n            },\n          ],\n        },\n      }\n    }\n\n    async function getGlobalData() {\n      const result = await getResultByChainIds(MAINNET_NETWORKS)\n\n      setGlobalData({\n        ...result.data,\n        aggregatorData: {\n          totalVolume: aggregatorData?.totalVolume,\n          last24hVolume: aggregatorData?.last24hVolume,\n          maxApr: aggregatorAPR?.max_apr,\n          totalEarnings: aggregatorAPR?.total_earnings,\n        },\n      })\n    }\n\n    getGlobalData()\n  }, [aggregatorData, aggregatorAPR])\n\n  return globalData\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}