{"ast":null,"code":"import _defineProperty from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { _nullishCoalesce } from '@sentry/utils/esm/buildPolyfills';\nimport { uuid4, timestampWithMs, logger, dropUndefinedKeys } from '@sentry/utils';\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\n\nvar SpanRecorder = /*#__PURE__*/function () {\n  function SpanRecorder() {\n    var maxlen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n\n    _classCallCheck(this, SpanRecorder);\n\n    ;\n\n    SpanRecorder.prototype.__init.call(this);\n\n    this._maxlen = maxlen;\n  }\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n\n\n  _createClass(SpanRecorder, [{\n    key: \"__init\",\n    value: function __init() {\n      this.spans = [];\n    }\n  }, {\n    key: \"add\",\n    value: function add(span) {\n      if (this.spans.length > this._maxlen) {\n        span.spanRecorder = undefined;\n      } else {\n        this.spans.push(span);\n      }\n    }\n  }]);\n\n  return SpanRecorder;\n}();\n/**\n * Span contains all data about a span\n */\n\n\nvar Span = /*#__PURE__*/function () {\n  /**\n   * List of spans that were finalized\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  function Span(spanContext) {\n    _classCallCheck(this, Span);\n\n    ;\n\n    Span.prototype.__init2.call(this);\n\n    Span.prototype.__init3.call(this);\n\n    Span.prototype.__init4.call(this);\n\n    Span.prototype.__init5.call(this);\n\n    Span.prototype.__init6.call(this);\n\n    if (!spanContext) {\n      return this;\n    }\n\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    } // We want to include booleans as well here\n\n\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _createClass(Span, [{\n    key: \"__init2\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init2() {\n      this.traceId = uuid4();\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this.spanId = uuid4().substring(16);\n    }\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * Internal keeper of the status\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * Timestamp in seconds when the span was created.\n     */\n\n  }, {\n    key: \"__init4\",\n    value: function __init4() {\n      this.startTimestamp = timestampWithMs();\n    }\n    /**\n     * Timestamp in seconds when the span ended.\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"__init5\",\n    value: function __init5() {\n      this.tags = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"__init6\",\n    value: function __init6() {\n      this.data = {};\n    }\n  }, {\n    key: \"startChild\",\n    value: function startChild(spanContext) {\n      var childSpan = new Span(_objectSpread(_objectSpread({}, spanContext), {}, {\n        parentSpanId: this.spanId,\n        sampled: this.sampled,\n        traceId: this.traceId\n      }));\n      childSpan.spanRecorder = this.spanRecorder;\n\n      if (childSpan.spanRecorder) {\n        childSpan.spanRecorder.add(childSpan);\n      }\n\n      childSpan.transaction = this.transaction;\n\n      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && childSpan.transaction) {\n        var opStr = spanContext && spanContext.op || '< unknown op >';\n        var nameStr = childSpan.transaction.name || '< unknown name >';\n        var idStr = childSpan.transaction.spanId;\n        var logMessage = \"[Tracing] Starting '\".concat(opStr, \"' span on transaction '\").concat(nameStr, \"' (\").concat(idStr, \").\");\n        childSpan.transaction.metadata.spanMetadata[childSpan.spanId] = {\n          logMessage: logMessage\n        };\n        logger.log(logMessage);\n      }\n\n      return childSpan;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setTag\",\n    value: function setTag(key, value) {\n      this.tags = _objectSpread(_objectSpread({}, this.tags), {}, _defineProperty({}, key, value));\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setData\",\n    value: function setData(key, value) {\n      this.data = _objectSpread(_objectSpread({}, this.data), {}, _defineProperty({}, key, value));\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setStatus\",\n    value: function setStatus(value) {\n      this.status = value;\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"setHttpStatus\",\n    value: function setHttpStatus(httpStatus) {\n      this.setTag('http.status_code', String(httpStatus));\n      var spanStatus = spanStatusfromHttpCode(httpStatus);\n\n      if (spanStatus !== 'unknown_error') {\n        this.setStatus(spanStatus);\n      }\n\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"isSuccess\",\n    value: function isSuccess() {\n      return this.status === 'ok';\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"finish\",\n    value: function finish(endTimestamp) {\n      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && // Don't call this for transactions\n      this.transaction && this.transaction.spanId !== this.spanId) {\n        var logMessage = this.transaction.metadata.spanMetadata[this.spanId].logMessage;\n\n        if (logMessage) {\n          logger.log(logMessage.replace('Starting', 'Finishing'));\n        }\n      }\n\n      this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"toTraceparent\",\n    value: function toTraceparent() {\n      var sampledString = '';\n\n      if (this.sampled !== undefined) {\n        sampledString = this.sampled ? '-1' : '-0';\n      }\n\n      return \"\".concat(this.traceId, \"-\").concat(this.spanId).concat(sampledString);\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"toContext\",\n    value: function toContext() {\n      return dropUndefinedKeys({\n        data: this.data,\n        description: this.description,\n        endTimestamp: this.endTimestamp,\n        op: this.op,\n        parentSpanId: this.parentSpanId,\n        sampled: this.sampled,\n        spanId: this.spanId,\n        startTimestamp: this.startTimestamp,\n        status: this.status,\n        tags: this.tags,\n        traceId: this.traceId\n      });\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"updateWithContext\",\n    value: function updateWithContext(spanContext) {\n      var _this = this;\n\n      this.data = _nullishCoalesce(spanContext.data, function () {\n        return {};\n      });\n      this.description = spanContext.description;\n      this.endTimestamp = spanContext.endTimestamp;\n      this.op = spanContext.op;\n      this.parentSpanId = spanContext.parentSpanId;\n      this.sampled = spanContext.sampled;\n      this.spanId = _nullishCoalesce(spanContext.spanId, function () {\n        return _this.spanId;\n      });\n      this.startTimestamp = _nullishCoalesce(spanContext.startTimestamp, function () {\n        return _this.startTimestamp;\n      });\n      this.status = spanContext.status;\n      this.tags = _nullishCoalesce(spanContext.tags, function () {\n        return {};\n      });\n      this.traceId = _nullishCoalesce(spanContext.traceId, function () {\n        return _this.traceId;\n      });\n      return this;\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"getTraceContext\",\n    value: function getTraceContext() {\n      return dropUndefinedKeys({\n        data: Object.keys(this.data).length > 0 ? this.data : undefined,\n        description: this.description,\n        op: this.op,\n        parent_span_id: this.parentSpanId,\n        span_id: this.spanId,\n        status: this.status,\n        tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n        trace_id: this.traceId\n      });\n    }\n    /**\n     * @inheritDoc\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return dropUndefinedKeys({\n        data: Object.keys(this.data).length > 0 ? this.data : undefined,\n        description: this.description,\n        op: this.op,\n        parent_span_id: this.parentSpanId,\n        span_id: this.spanId,\n        start_timestamp: this.startTimestamp,\n        status: this.status,\n        tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n        timestamp: this.endTimestamp,\n        trace_id: this.traceId\n      });\n    }\n  }]);\n\n  return Span;\n}();\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n\n\nfunction spanStatusfromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n\n      case 403:\n        return 'permission_denied';\n\n      case 404:\n        return 'not_found';\n\n      case 409:\n        return 'already_exists';\n\n      case 413:\n        return 'failed_precondition';\n\n      case 429:\n        return 'resource_exhausted';\n\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n\n      case 503:\n        return 'unavailable';\n\n      case 504:\n        return 'deadline_exceeded';\n\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n\nexport { Span, SpanRecorder, spanStatusfromHttpCode };","map":null,"metadata":{},"sourceType":"module"}