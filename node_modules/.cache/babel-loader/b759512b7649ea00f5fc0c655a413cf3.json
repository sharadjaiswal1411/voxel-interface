{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assert_1 = require(\"@0x/assert\");\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar types_1 = require(\"../types\");\n\nvar subprovider_1 = require(\"./subprovider\");\n\nvar BaseWalletSubprovider =\n/** @class */\nfunction (_super) {\n  __extends(BaseWalletSubprovider, _super);\n\n  function BaseWalletSubprovider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  BaseWalletSubprovider._validateTxParams = function (txParams) {\n    if (txParams.to !== undefined) {\n      assert_1.assert.isETHAddressHex('to', txParams.to);\n    }\n\n    assert_1.assert.isHexString('nonce', txParams.nonce);\n  };\n\n  BaseWalletSubprovider._validateSender = function (sender) {\n    if (sender === undefined || !utils_1.addressUtils.isAddress(sender)) {\n      throw new Error(types_1.WalletSubproviderErrors.SenderInvalidOrNotSupplied);\n    }\n  };\n  /**\n   * This method conforms to the web3-provider-engine interface.\n   * It is called internally by the ProviderEngine when it is this subproviders\n   * turn to handle a JSON RPC request.\n   * @param payload JSON RPC payload\n   * @param next Callback to call if this subprovider decides not to handle the request\n   * @param end Callback to call if subprovider handled the request and wants to pass back the request.\n   */\n  // tslint:disable-next-line:async-suffix\n\n\n  BaseWalletSubprovider.prototype.handleRequest = function (payload, next, end) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, accounts, txParams, address, typedData, _b, err_1, err_2, filledParams, signedTx, response, err_3, filledParams, signedTx, result, err_4, data, ecSignatureHex, err_5, signature, err_6;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = payload.method;\n\n            switch (_b) {\n              case 'eth_coinbase':\n                return [3\n                /*break*/\n                , 1];\n\n              case 'eth_accounts':\n                return [3\n                /*break*/\n                , 5];\n\n              case 'eth_sendTransaction':\n                return [3\n                /*break*/\n                , 9];\n\n              case 'eth_signTransaction':\n                return [3\n                /*break*/\n                , 16];\n\n              case 'eth_sign':\n                return [3\n                /*break*/\n                , 22];\n\n              case 'personal_sign':\n                return [3\n                /*break*/\n                , 22];\n\n              case 'eth_signTypedData':\n                return [3\n                /*break*/\n                , 27];\n            }\n\n            return [3\n            /*break*/\n            , 32];\n\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.getAccountsAsync()];\n\n          case 2:\n            accounts = _c.sent();\n            end(null, accounts[0]);\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _c.sent();\n            end(err_1);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n\n          case 5:\n            _c.trys.push([5, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this.getAccountsAsync()];\n\n          case 6:\n            accounts = _c.sent();\n            end(null, accounts);\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            err_2 = _c.sent();\n            end(err_2);\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n\n          case 9:\n            txParams = payload.params[0];\n            _c.label = 10;\n\n          case 10:\n            _c.trys.push([10, 14,, 15]);\n\n            BaseWalletSubprovider._validateSender(txParams.from);\n\n            return [4\n            /*yield*/\n            , this._populateMissingTxParamsAsync(txParams)];\n\n          case 11:\n            filledParams = _c.sent();\n            return [4\n            /*yield*/\n            , this.signTransactionAsync(filledParams)];\n\n          case 12:\n            signedTx = _c.sent();\n            return [4\n            /*yield*/\n            , this._emitSendTransactionAsync(signedTx)];\n\n          case 13:\n            response = _c.sent();\n            end(null, response.result);\n            return [3\n            /*break*/\n            , 15];\n\n          case 14:\n            err_3 = _c.sent();\n            end(err_3);\n            return [3\n            /*break*/\n            , 15];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n\n          case 16:\n            txParams = payload.params[0];\n            _c.label = 17;\n\n          case 17:\n            _c.trys.push([17, 20,, 21]);\n\n            return [4\n            /*yield*/\n            , this._populateMissingTxParamsAsync(txParams)];\n\n          case 18:\n            filledParams = _c.sent();\n            return [4\n            /*yield*/\n            , this.signTransactionAsync(filledParams)];\n\n          case 19:\n            signedTx = _c.sent();\n            result = {\n              raw: signedTx,\n              tx: txParams\n            };\n            end(null, result);\n            return [3\n            /*break*/\n            , 21];\n\n          case 20:\n            err_4 = _c.sent();\n            end(err_4);\n            return [3\n            /*break*/\n            , 21];\n\n          case 21:\n            return [2\n            /*return*/\n            ];\n\n          case 22:\n            data = payload.method === 'eth_sign' ? payload.params[1] : payload.params[0];\n            address = payload.method === 'eth_sign' ? payload.params[0] : payload.params[1];\n            _c.label = 23;\n\n          case 23:\n            _c.trys.push([23, 25,, 26]);\n\n            return [4\n            /*yield*/\n            , this.signPersonalMessageAsync(data, address)];\n\n          case 24:\n            ecSignatureHex = _c.sent();\n            end(null, ecSignatureHex);\n            return [3\n            /*break*/\n            , 26];\n\n          case 25:\n            err_5 = _c.sent();\n            end(err_5);\n            return [3\n            /*break*/\n            , 26];\n\n          case 26:\n            return [2\n            /*return*/\n            ];\n\n          case 27:\n            _a = __read(payload.params, 2), address = _a[0], typedData = _a[1];\n            _c.label = 28;\n\n          case 28:\n            _c.trys.push([28, 30,, 31]);\n\n            return [4\n            /*yield*/\n            , this.signTypedDataAsync(address, typedData)];\n\n          case 29:\n            signature = _c.sent();\n            end(null, signature);\n            return [3\n            /*break*/\n            , 31];\n\n          case 30:\n            err_6 = _c.sent();\n            end(err_6);\n            return [3\n            /*break*/\n            , 31];\n\n          case 31:\n            return [2\n            /*return*/\n            ];\n\n          case 32:\n            next();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  BaseWalletSubprovider.prototype._emitSendTransactionAsync = function (signedTx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            payload = {\n              method: 'eth_sendRawTransaction',\n              params: [signedTx]\n            };\n            return [4\n            /*yield*/\n            , this.emitPayloadAsync(payload)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  BaseWalletSubprovider.prototype._populateMissingTxParamsAsync = function (partialTxParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var txParams, gasPriceResult, gasPrice, nonceResult, nonce, gasResult, gas;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            txParams = partialTxParams;\n            if (!(partialTxParams.gasPrice === undefined)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.emitPayloadAsync({\n              method: 'eth_gasPrice',\n              params: []\n            })];\n\n          case 1:\n            gasPriceResult = _a.sent();\n            gasPrice = gasPriceResult.result.toString();\n            txParams = __assign({}, txParams, {\n              gasPrice: gasPrice\n            });\n            _a.label = 2;\n\n          case 2:\n            if (!(partialTxParams.nonce === undefined)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.emitPayloadAsync({\n              method: 'eth_getTransactionCount',\n              params: [partialTxParams.from, 'pending']\n            })];\n\n          case 3:\n            nonceResult = _a.sent();\n            nonce = nonceResult.result;\n            txParams = __assign({}, txParams, {\n              nonce: nonce\n            });\n            _a.label = 4;\n\n          case 4:\n            if (!(partialTxParams.gas === undefined)) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.emitPayloadAsync({\n              method: 'eth_estimateGas',\n              params: [partialTxParams]\n            })];\n\n          case 5:\n            gasResult = _a.sent();\n            gas = gasResult.result.toString();\n            txParams = __assign({}, txParams, {\n              gas: gas\n            });\n            _a.label = 6;\n\n          case 6:\n            return [2\n            /*return*/\n            , txParams];\n        }\n      });\n    });\n  };\n\n  return BaseWalletSubprovider;\n}(subprovider_1.Subprovider);\n\nexports.BaseWalletSubprovider = BaseWalletSubprovider;","map":null,"metadata":{},"sourceType":"script"}