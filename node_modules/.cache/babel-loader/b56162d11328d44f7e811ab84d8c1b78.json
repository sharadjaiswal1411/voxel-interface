{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _possibleConstructorReturn from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _assertThisInitialized from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getCurrentHub } from '@sentry/browser';\nimport { timestampWithMs } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { REACT_MOUNT_OP, REACT_UPDATE_OP, REACT_RENDER_OP } from './constants.js';\nvar _jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/profiler.tsx\";\nvar UNKNOWN_COMPONENT = 'unknown';\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\n\nvar Profiler = /*#__PURE__*/function (_React$Component) {\n  _inherits(Profiler, _React$Component);\n\n  var _super = _createSuper(Profiler);\n\n  function Profiler(props) {\n    var _this;\n\n    _classCallCheck(this, Profiler);\n\n    _this = _super.call(this, props);\n\n    Profiler.prototype.__init.call(_assertThisInitialized(_this));\n\n    Profiler.prototype.__init2.call(_assertThisInitialized(_this));\n\n    ;\n    var _this$props = _this.props,\n        name = _this$props.name,\n        _this$props$disabled = _this$props.disabled,\n        disabled = _this$props$disabled === void 0 ? false : _this$props$disabled;\n\n    if (disabled) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    var activeTransaction = getActiveTransaction();\n\n    if (activeTransaction) {\n      _this._mountSpan = activeTransaction.startChild({\n        description: \"<\".concat(name, \">\"),\n        op: REACT_MOUNT_OP\n      });\n    }\n\n    return _this;\n  } // If a component mounted, we can finish the mount activity.\n\n\n  _createClass(Profiler, [{\n    key: \"__init\",\n    value:\n    /**\n     * The span of the mount activity\n     * Made protected for the React Native SDK to access\n     */\n    function __init() {\n      this._mountSpan = undefined;\n    }\n    /**\n     * The span that represents the duration of time between shouldComponentUpdate and componentDidUpdate\n     */\n\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._updateSpan = undefined;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this._mountSpan) {\n        this._mountSpan.finish();\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(_ref) {\n      var _this2 = this;\n\n      var updateProps = _ref.updateProps,\n          _ref$includeUpdates = _ref.includeUpdates,\n          includeUpdates = _ref$includeUpdates === void 0 ? true : _ref$includeUpdates;\n\n      // Only generate an update span if includeUpdates is true, if there is a valid mountSpan,\n      // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n      // We are just trying to give baseline clues for further investigation.\n      if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {\n        // See what props haved changed between the previous props, and the current props. This is\n        // set as data on the span. We just store the prop keys as the values could be potenially very large.\n        var changedProps = Object.keys(updateProps).filter(function (k) {\n          return updateProps[k] !== _this2.props.updateProps[k];\n        });\n\n        if (changedProps.length > 0) {\n          var now = timestampWithMs();\n          this._updateSpan = this._mountSpan.startChild({\n            data: {\n              changedProps: changedProps\n            },\n            description: \"<\".concat(this.props.name, \">\"),\n            op: REACT_UPDATE_OP,\n            startTimestamp: now\n          });\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this._updateSpan) {\n        this._updateSpan.finish();\n\n        this._updateSpan = undefined;\n      }\n    } // If a component is unmounted, we can say it is no longer on the screen.\n    // This means we can finish the span representing the component render.\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props2 = this.props,\n          name = _this$props2.name,\n          _this$props2$includeR = _this$props2.includeRender,\n          includeRender = _this$props2$includeR === void 0 ? true : _this$props2$includeR;\n\n      if (this._mountSpan && includeRender) {\n        // If we were able to obtain the spanId of the mount activity, we should set the\n        // next activity as a child to the component mount activity.\n        this._mountSpan.startChild({\n          description: \"<\".concat(name, \">\"),\n          endTimestamp: timestampWithMs(),\n          op: REACT_RENDER_OP,\n          startTimestamp: this._mountSpan.endTimestamp\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.defaultProps = {\n        disabled: false,\n        includeRender: true,\n        includeUpdates: true\n      };\n    }\n  }]);\n\n  return Profiler;\n}(React.Component);\n\nProfiler.__initStatic();\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\n\n\nfunction withProfiler(WrappedComponent, // We do not want to have `updateProps` given in options, it is instead filled through the HOC.\noptions) {\n  var _this3 = this;\n\n  var componentDisplayName = options && options.name || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  var Wrapped = function Wrapped(props) {\n    return React.createElement(Profiler, _objectSpread(_objectSpread({}, options), {}, {\n      name: componentDisplayName,\n      updateProps: props,\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      }\n    }), React.createElement(WrappedComponent, _objectSpread(_objectSpread({}, props), {}, {\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      }\n    })));\n  };\n\n  Wrapped.displayName = \"profiler(\".concat(componentDisplayName, \")\"); // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\n\n\nfunction useProfiler(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    disabled: false,\n    hasRenderSpan: true\n  };\n\n  var _React$useState = React.useState(function () {\n    if (options && options.disabled) {\n      return undefined;\n    }\n\n    var activeTransaction = getActiveTransaction();\n\n    if (activeTransaction) {\n      return activeTransaction.startChild({\n        description: \"<\".concat(name, \">\"),\n        op: REACT_MOUNT_OP\n      });\n    }\n\n    return undefined;\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      mountSpan = _React$useState2[0];\n\n  React.useEffect(function () {\n    if (mountSpan) {\n      mountSpan.finish();\n    }\n\n    return function () {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: \"<\".concat(name, \">\"),\n          endTimestamp: timestampWithMs(),\n          op: REACT_RENDER_OP,\n          startTimestamp: mountSpan.endTimestamp\n        });\n      }\n    }; // We only want this to run once.\n  }, []);\n}\n/** Grabs active transaction off scope */\n\n\nfunction getActiveTransaction() {\n  var hub = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getCurrentHub();\n\n  if (hub) {\n    var scope = hub.getScope();\n\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n\n  return undefined;\n}\n\nexport { Profiler, UNKNOWN_COMPONENT, getActiveTransaction, useProfiler, withProfiler };","map":null,"metadata":{},"sourceType":"module"}