{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"count\", \"wrapper\", \"className\", \"containerClassName\", \"containerTestId\", \"circle\", \"style\"],\n    _excluded2 = [\"children\"];\nimport React from 'react';\n/**\n * @internal\n */\n\nvar SkeletonThemeContext = React.createContext({});\n/* eslint-disable react/no-array-index-key */\n\nvar defaultEnableAnimation = true; // For performance & cleanliness, don't add any inline styles unless we have to\n\nfunction styleOptionsToCssProperties(_ref) {\n  var baseColor = _ref.baseColor,\n      highlightColor = _ref.highlightColor,\n      width = _ref.width,\n      height = _ref.height,\n      borderRadius = _ref.borderRadius,\n      circle = _ref.circle,\n      direction = _ref.direction,\n      duration = _ref.duration,\n      _ref$enableAnimation = _ref.enableAnimation,\n      enableAnimation = _ref$enableAnimation === void 0 ? defaultEnableAnimation : _ref$enableAnimation;\n  var style = {};\n  if (direction === 'rtl') style['--animation-direction'] = 'reverse';\n  if (typeof duration === 'number') style['--animation-duration'] = \"\".concat(duration, \"s\");\n  if (!enableAnimation) style['--pseudo-element-display'] = 'none';\n  if (typeof width === 'string' || typeof width === 'number') style.width = width;\n  if (typeof height === 'string' || typeof height === 'number') style.height = height;\n  if (typeof borderRadius === 'string' || typeof borderRadius === 'number') style.borderRadius = borderRadius;\n  if (circle) style.borderRadius = '50%';\n  if (typeof baseColor !== 'undefined') style['--base-color'] = baseColor;\n  if (typeof highlightColor !== 'undefined') style['--highlight-color'] = highlightColor;\n  return style;\n}\n\nfunction Skeleton(_ref2) {\n  var _ref2$count = _ref2.count,\n      count = _ref2$count === void 0 ? 1 : _ref2$count,\n      Wrapper = _ref2.wrapper,\n      customClassName = _ref2.className,\n      containerClassName = _ref2.containerClassName,\n      containerTestId = _ref2.containerTestId,\n      _ref2$circle = _ref2.circle,\n      circle = _ref2$circle === void 0 ? false : _ref2$circle,\n      styleProp = _ref2.style,\n      originalPropsStyleOptions = _objectWithoutProperties(_ref2, _excluded);\n\n  var _a, _b, _c;\n\n  var contextStyleOptions = React.useContext(SkeletonThemeContext);\n\n  var propsStyleOptions = _objectSpread({}, originalPropsStyleOptions); // DO NOT overwrite style options from the context if `propsStyleOptions`\n  // has properties explicity set to undefined\n\n\n  for (var _i = 0, _Object$entries = Object.entries(originalPropsStyleOptions); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        key = _Object$entries$_i[0],\n        value = _Object$entries$_i[1];\n\n    if (typeof value === 'undefined') {\n      delete propsStyleOptions[key];\n    }\n  } // Props take priority over context\n\n\n  var styleOptions = _objectSpread(_objectSpread(_objectSpread({}, contextStyleOptions), propsStyleOptions), {}, {\n    circle: circle\n  }); // `styleProp` has the least priority out of everything\n\n\n  var style = _objectSpread(_objectSpread({}, styleProp), styleOptionsToCssProperties(styleOptions));\n\n  var className = 'react-loading-skeleton';\n  if (customClassName) className += \" \".concat(customClassName);\n  var inline = (_a = styleOptions.inline) !== null && _a !== void 0 ? _a : false;\n  var elements = [];\n  var countCeil = Math.ceil(count);\n\n  for (var i = 0; i < countCeil; i++) {\n    var thisStyle = style;\n\n    if (countCeil > count && i === countCeil - 1) {\n      // count is not an integer and we've reached the last iteration of\n      // the loop, so add a \"fractional\" skeleton.\n      //\n      // For example, if count is 3.5, we've already added 3 full\n      // skeletons, so now we add one more skeleton that is 0.5 times the\n      // original width.\n      var width = (_b = thisStyle.width) !== null && _b !== void 0 ? _b : '100%'; // 100% is the default since that's what's in the CSS\n\n      var fractionalPart = count % 1;\n      var fractionalWidth = typeof width === 'number' ? width * fractionalPart : \"calc(\".concat(width, \" * \").concat(fractionalPart, \")\");\n      thisStyle = _objectSpread(_objectSpread({}, thisStyle), {}, {\n        width: fractionalWidth\n      });\n    }\n\n    var skeletonSpan = React.createElement(\"span\", {\n      className: className,\n      style: thisStyle,\n      key: i\n    }, \"\\u200C\");\n\n    if (inline) {\n      elements.push(skeletonSpan);\n    } else {\n      // Without the <br />, the skeleton lines will all run together if\n      // `width` is specified\n      elements.push(React.createElement(React.Fragment, {\n        key: i\n      }, skeletonSpan, React.createElement(\"br\", null)));\n    }\n  }\n\n  return React.createElement(\"span\", {\n    className: containerClassName,\n    \"data-testid\": containerTestId,\n    \"aria-live\": \"polite\",\n    \"aria-busy\": (_c = styleOptions.enableAnimation) !== null && _c !== void 0 ? _c : defaultEnableAnimation\n  }, Wrapper ? elements.map(function (el, i) {\n    return React.createElement(Wrapper, {\n      key: i\n    }, el);\n  }) : elements);\n}\n\nfunction SkeletonTheme(_ref3) {\n  var children = _ref3.children,\n      styleOptions = _objectWithoutProperties(_ref3, _excluded2);\n\n  return React.createElement(SkeletonThemeContext.Provider, {\n    value: styleOptions\n  }, children);\n}\n\nexport { SkeletonTheme, Skeleton as default };","map":null,"metadata":{},"sourceType":"module"}