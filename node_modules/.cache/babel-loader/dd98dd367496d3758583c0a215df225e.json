{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar react_1 = require(\"react\");\n\nvar isReact16Plus = parseInt(react_1.version.substr(0, react_1.version.indexOf('.'))) > 15;\n\nvar isFn = function isFn(fn) {\n  return typeof fn === 'function';\n};\n\nvar render = function render(props, data) {\n  var more = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    more[_i - 2] = arguments[_i];\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof props !== 'object') {\n      throw new TypeError('renderChildren(props, data) first argument must be a props object.');\n    }\n\n    var children_1 = props.children,\n        render_1 = props.render;\n\n    if (isFn(children_1) && isFn(render_1)) {\n      console.warn('Both \"render\" and \"children\" are specified for in a universal interface component. ' + 'Children will be used.');\n      console.trace();\n    }\n\n    if (typeof data !== 'object') {\n      console.warn('Universal component interface normally expects data to be an object, ' + (\"\\\"\" + typeof data + \"\\\" received.\"));\n      console.trace();\n    }\n  }\n\n  var render = props.render,\n      _a = props.children,\n      children = _a === void 0 ? render : _a,\n      component = props.component,\n      _b = props.comp,\n      comp = _b === void 0 ? component : _b;\n  if (isFn(children)) return children.apply(void 0, tslib_1.__spreadArrays([data], more));\n\n  if (comp) {\n    return react_1.createElement(comp, data);\n  }\n\n  if (children instanceof Array) return isReact16Plus ? children : react_1.createElement.apply(void 0, tslib_1.__spreadArrays(['div', null], children));\n\n  if (children && children instanceof Object) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!children.type || typeof children.type !== 'string' && typeof children.type !== 'function' && typeof children.type !== 'symbol') {\n        console.warn('Universal component interface received object as children, ' + 'expected React element, but received unexpected React \"type\".');\n        console.trace();\n      }\n\n      if (typeof children.type === 'string') return children;\n      return react_1.cloneElement(children, Object.assign({}, children.props, data));\n    } else {\n      if (typeof children.type === 'string') return children;\n      return react_1.cloneElement(children, Object.assign({}, children.props, data));\n    }\n  }\n\n  return children || null;\n};\n\nexports.default = render;","map":null,"metadata":{},"sourceType":"script"}