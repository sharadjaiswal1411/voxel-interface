{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assert_1 = require(\"@0x/assert\");\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar EthereumTx = require(\"ethereumjs-tx\");\n\nvar _ = require(\"lodash\");\n\nvar HDNode = require(\"hdkey\");\n\nvar types_1 = require(\"../types\");\n\nvar wallet_utils_1 = require(\"../utils/wallet_utils\");\n\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\n\nvar PRIVATE_KEY_PATH = \"44'/60'/0'/0\";\nvar DEFAULT_NUM_ADDRESSES_TO_FETCH = 10;\nvar DEFAULT_ADDRESS_SEARCH_LIMIT = 1000;\n\nvar TrezorSubprovider =\n/** @class */\nfunction (_super) {\n  __extends(TrezorSubprovider, _super);\n  /**\n   * Instantiates a TrezorSubprovider. Defaults to private key path set to `44'/60'/0'/0/`.\n   * Must be initialized with trezor-connect API module https://github.com/trezor/connect.\n   * @param TrezorSubprovider config object containing trezor-connect API\n   * @return TrezorSubprovider instance\n   */\n\n\n  function TrezorSubprovider(config) {\n    var _this = _super.call(this) || this;\n\n    _this._privateKeyPath = PRIVATE_KEY_PATH;\n    _this._trezorConnectClientApi = config.trezorConnectClientApi;\n    _this._networkId = config.networkId;\n    _this._addressSearchLimit = config.accountFetchingConfigs !== undefined && config.accountFetchingConfigs.addressSearchLimit !== undefined ? config.accountFetchingConfigs.addressSearchLimit : DEFAULT_ADDRESS_SEARCH_LIMIT;\n    return _this;\n  }\n  /**\n   * Retrieve a users Trezor account. This method is automatically called\n   * when issuing a `eth_accounts` JSON RPC request via your providerEngine\n   * instance.\n   * @return An array of accounts\n   */\n\n\n  TrezorSubprovider.prototype.getAccountsAsync = function (numberOfAccounts) {\n    if (numberOfAccounts === void 0) {\n      numberOfAccounts = DEFAULT_NUM_ADDRESSES_TO_FETCH;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var initialDerivedKeyInfo, derivedKeyInfos, accounts;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._initialDerivedKeyInfoAsync()];\n\n          case 1:\n            initialDerivedKeyInfo = _a.sent();\n            derivedKeyInfos = wallet_utils_1.walletUtils.calculateDerivedHDKeyInfos(initialDerivedKeyInfo, numberOfAccounts);\n            accounts = _.map(derivedKeyInfos, function (k) {\n              return k.address;\n            });\n            return [2\n            /*return*/\n            , accounts];\n        }\n      });\n    });\n  };\n  /**\n   * Signs a transaction on the Trezor with the account specificed by the `from` field in txParams.\n   * If you've added the TrezorSubprovider to your app's provider, you can simply send an `eth_sendTransaction`\n   * JSON RPC request, and this method will be called auto-magically. If you are not using this via a ProviderEngine\n   * instance, you can call it directly.\n   * @param txParams Parameters of the transaction to sign\n   * @return Signed transaction hex string\n   */\n\n\n  TrezorSubprovider.prototype.signTransactionAsync = function (txData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var initialDerivedKeyInfo, derivedKeyInfo, fullDerivationPath, response, payload, tx, vIndex, rIndex, sIndex, payload;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (txData.from === undefined || !utils_1.addressUtils.isAddress(txData.from)) {\n              throw new Error(types_1.WalletSubproviderErrors.FromAddressMissingOrInvalid);\n            }\n\n            txData.value = txData.value ? txData.value : '0x0';\n            txData.data = txData.data ? txData.data : '0x';\n            txData.gas = txData.gas ? txData.gas : '0x0';\n            txData.gasPrice = txData.gasPrice ? txData.gasPrice : '0x0';\n            return [4\n            /*yield*/\n            , this._initialDerivedKeyInfoAsync()];\n\n          case 1:\n            initialDerivedKeyInfo = _a.sent();\n            derivedKeyInfo = this._findDerivedKeyInfoForAddress(initialDerivedKeyInfo, txData.from);\n            fullDerivationPath = derivedKeyInfo.derivationPath;\n            return [4\n            /*yield*/\n            , this._trezorConnectClientApi.ethereumSignTransaction({\n              path: fullDerivationPath,\n              transaction: {\n                to: txData.to,\n                value: txData.value,\n                data: txData.data,\n                chainId: this._networkId,\n                nonce: txData.nonce,\n                gasLimit: txData.gas,\n                gasPrice: txData.gasPrice\n              }\n            })];\n\n          case 2:\n            response = _a.sent();\n\n            if (response.success) {\n              payload = response.payload;\n              tx = new EthereumTx(txData);\n              vIndex = 6;\n              tx.raw[vIndex] = Buffer.from([1]); // v\n\n              rIndex = 7;\n              tx.raw[rIndex] = Buffer.from([]); // r\n\n              sIndex = 8;\n              tx.raw[sIndex] = Buffer.from([]); // s\n              // slice off leading 0x\n\n              tx.v = Buffer.from(payload.v.slice(2), 'hex');\n              tx.r = Buffer.from(payload.r.slice(2), 'hex');\n              tx.s = Buffer.from(payload.s.slice(2), 'hex');\n              return [2\n              /*return*/\n              , \"0x\" + tx.serialize().toString('hex')];\n            } else {\n              payload = response.payload;\n              throw new Error(payload.error);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sign a personal Ethereum signed message. The signing account will be the account\n   * associated with the provided address. If you've added the TrezorSubprovider to\n   * your app's provider, you can simply send an `eth_sign` or `personal_sign` JSON RPC\n   * request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param data Hex string message to sign\n   * @param address Address of the account to sign with\n   * @return Signature hex string (order: rsv)\n   */\n\n\n  TrezorSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var initialDerivedKeyInfo, derivedKeyInfo, fullDerivationPath, response, payload, payload;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (data === undefined) {\n              throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n            }\n\n            assert_1.assert.isHexString('data', data);\n            assert_1.assert.isETHAddressHex('address', address);\n            return [4\n            /*yield*/\n            , this._initialDerivedKeyInfoAsync()];\n\n          case 1:\n            initialDerivedKeyInfo = _a.sent();\n            derivedKeyInfo = this._findDerivedKeyInfoForAddress(initialDerivedKeyInfo, address);\n            fullDerivationPath = derivedKeyInfo.derivationPath;\n            return [4\n            /*yield*/\n            , this._trezorConnectClientApi.ethereumSignMessage({\n              path: fullDerivationPath,\n              message: data,\n              hex: true\n            })];\n\n          case 2:\n            response = _a.sent();\n\n            if (response.success) {\n              payload = response.payload;\n              return [2\n              /*return*/\n              , \"0x\" + payload.signature];\n            } else {\n              payload = response.payload;\n              throw new Error(payload.error);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * TODO:: eth_signTypedData is currently not supported on Trezor devices.\n   * @param address Address of the account to sign with\n   * @param data the typed data object\n   * @return Signature hex string (order: rsv)\n   */\n  // tslint:disable-next-line:prefer-function-over-method\n\n\n  TrezorSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(types_1.WalletSubproviderErrors.MethodNotSupported);\n      });\n    });\n  };\n\n  TrezorSubprovider.prototype._initialDerivedKeyInfoAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var parentKeyDerivationPath, response, payload, hdKey, address, initialDerivedKeyInfo, payload;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._initialDerivedKeyInfo) return [3\n            /*break*/\n            , 1];\n            return [2\n            /*return*/\n            , this._initialDerivedKeyInfo];\n\n          case 1:\n            parentKeyDerivationPath = \"m/\" + this._privateKeyPath;\n            return [4\n            /*yield*/\n            , this._trezorConnectClientApi.getPublicKey({\n              path: parentKeyDerivationPath\n            })];\n\n          case 2:\n            response = _a.sent();\n\n            if (response.success) {\n              payload = response.payload;\n              hdKey = new HDNode();\n              hdKey.publicKey = new Buffer(payload.publicKey, 'hex');\n              hdKey.chainCode = new Buffer(payload.chainCode, 'hex');\n              address = wallet_utils_1.walletUtils.addressOfHDKey(hdKey);\n              initialDerivedKeyInfo = {\n                hdKey: hdKey,\n                address: address,\n                derivationPath: parentKeyDerivationPath,\n                baseDerivationPath: this._privateKeyPath\n              };\n              this._initialDerivedKeyInfo = initialDerivedKeyInfo;\n              return [2\n              /*return*/\n              , initialDerivedKeyInfo];\n            } else {\n              payload = response.payload;\n              throw new Error(payload.error);\n            }\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TrezorSubprovider.prototype._findDerivedKeyInfoForAddress = function (initalHDKey, address) {\n    var matchedDerivedKeyInfo = wallet_utils_1.walletUtils.findDerivedKeyInfoForAddressIfExists(address, initalHDKey, this._addressSearchLimit);\n\n    if (matchedDerivedKeyInfo === undefined) {\n      throw new Error(types_1.WalletSubproviderErrors.AddressNotFound + \": \" + address);\n    }\n\n    return matchedDerivedKeyInfo;\n  };\n\n  return TrezorSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider);\n\nexports.TrezorSubprovider = TrezorSubprovider;","map":null,"metadata":{},"sourceType":"script"}