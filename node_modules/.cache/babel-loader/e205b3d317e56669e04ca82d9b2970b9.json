{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { isClient } from './util';\n\nvar noop = function noop() {};\n\nvar useLocalStorage = function useLocalStorage(key, initialValue, options) {\n  if (!isClient) {\n    return [initialValue, noop, noop];\n  }\n\n  if (!key) {\n    throw new Error('useLocalStorage key may not be falsy');\n  }\n\n  var deserializer = options ? options.raw ? function (value) {\n    return value;\n  } : options.deserializer : JSON.parse; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  var _a = useState(function () {\n    try {\n      var serializer = options ? options.raw ? String : options.serializer : JSON.stringify;\n      var localStorageValue = localStorage.getItem(key);\n\n      if (localStorageValue !== null) {\n        return deserializer(localStorageValue);\n      } else {\n        initialValue && localStorage.setItem(key, serializer(initialValue));\n        return initialValue;\n      }\n    } catch (_a) {\n      // If user is in private mode or has storage restriction\n      // localStorage can throw. JSON.parse and JSON.stringify\n      // can throw, too.\n      return initialValue;\n    }\n  }),\n      state = _a[0],\n      setState = _a[1]; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n\n  var set = useCallback(function (valOrFunc) {\n    try {\n      var newState = typeof valOrFunc === 'function' ? valOrFunc(state) : valOrFunc;\n      if (typeof newState === 'undefined') return;\n      var value = void 0;\n      if (options) {\n        if (options.raw) {\n          if (typeof newState === 'string') value = newState;else value = JSON.stringify(newState);\n        } else if (options.serializer) value = options.serializer(newState);else value = JSON.stringify(newState);\n      } else value = JSON.stringify(newState);\n      localStorage.setItem(key, value);\n      setState(deserializer(value));\n    } catch (_a) {// If user is in private mode or has storage restriction\n      // localStorage can throw. Also JSON.stringify can throw.\n    }\n  }, [key, setState]); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  var remove = useCallback(function () {\n    try {\n      localStorage.removeItem(key);\n      setState(undefined);\n    } catch (_a) {// If user is in private mode or has storage restriction\n      // localStorage can throw.\n    }\n  }, [key, setState]);\n  return [state, set, remove];\n};\n\nexport default useLocalStorage;","map":null,"metadata":{},"sourceType":"module"}