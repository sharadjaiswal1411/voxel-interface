{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _s = $RefreshSig$();\n\nimport { WETH } from '@kyberswap/ks-sdk-core';\nimport { BigNumber } from 'ethers';\nimport { useCallback, useEffect, useState } from 'react';\nimport ERC20_ABI from 'constants/abis/erc20.json';\nimport { useActiveWeb3React } from 'hooks';\nimport { isAddress } from 'utils';\nimport { useContract } from './useContract';\nimport useTransactionStatus from './useTransactionStatus';\n\nfunction useTokenBalance(tokenAddress) {\n  _s();\n\n  var _useState = useState({\n    value: BigNumber.from(0),\n    decimals: 18\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      balance = _useState2[0],\n      setBalance = _useState2[1];\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      account = _useActiveWeb3React.account,\n      chainId = _useActiveWeb3React.chainId,\n      library = _useActiveWeb3React.library; //const currentBlockNumber = useBlockNumber()\n  // allows balance to update given transaction updates\n\n\n  var currentTransactionStatus = useTransactionStatus();\n  var addressCheckSum = isAddress(tokenAddress);\n  var tokenContract = useContract(addressCheckSum ? addressCheckSum : undefined, ERC20_ABI, false);\n  var fetchBalance = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var getBalance, balance;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            getBalance = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(contract, owner) {\n                var ethBalance, _balance, decimals;\n\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n\n                        if (!(account && chainId && (contract === null || contract === void 0 ? void 0 : contract.address) === WETH[chainId].address)) {\n                          _context.next = 6;\n                          break;\n                        }\n\n                        _context.next = 4;\n                        return library === null || library === void 0 ? void 0 : library.getBalance(account);\n\n                      case 4:\n                        ethBalance = _context.sent;\n                        return _context.abrupt(\"return\", {\n                          value: BigNumber.from(ethBalance),\n                          decimals: 18\n                        });\n\n                      case 6:\n                        _context.next = 8;\n                        return contract === null || contract === void 0 ? void 0 : contract.balanceOf(owner);\n\n                      case 8:\n                        _balance = _context.sent;\n                        _context.next = 11;\n                        return contract === null || contract === void 0 ? void 0 : contract.decimals();\n\n                      case 11:\n                        decimals = _context.sent;\n                        return _context.abrupt(\"return\", {\n                          value: BigNumber.from(_balance),\n                          decimals: decimals\n                        });\n\n                      case 15:\n                        _context.prev = 15;\n                        _context.t0 = _context[\"catch\"](0);\n                        return _context.abrupt(\"return\", {\n                          value: BigNumber.from(0),\n                          decimals: 18\n                        });\n\n                      case 18:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[0, 15]]);\n              }));\n\n              return function getBalance(_x, _x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            _context2.next = 3;\n            return getBalance(tokenContract, account);\n\n          case 3:\n            balance = _context2.sent;\n            setBalance(balance);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), [account, tokenContract, chainId, library]);\n  useEffect(function () {\n    if (account && tokenContract) {\n      fetchBalance();\n    }\n  }, [account, currentTransactionStatus, fetchBalance, tokenContract]);\n  return balance;\n}\n\n_s(useTokenBalance, \"9IhCtt/aLyiMcVEJwpqz/31fszE=\", false, function () {\n  return [useActiveWeb3React, useTransactionStatus, useContract];\n});\n\nexport default useTokenBalance;","map":{"version":3,"names":["WETH","BigNumber","useCallback","useEffect","useState","ERC20_ABI","useActiveWeb3React","isAddress","useContract","useTransactionStatus","useTokenBalance","tokenAddress","value","from","decimals","balance","setBalance","account","chainId","library","currentTransactionStatus","addressCheckSum","tokenContract","undefined","fetchBalance","getBalance","contract","owner","address","ethBalance","balanceOf"],"sources":["/Applications/XAMPP/voxel-interface/src/hooks/useTokenBalance.ts"],"sourcesContent":["import { WETH } from '@kyberswap/ks-sdk-core'\nimport { BigNumber, Contract } from 'ethers'\nimport { useCallback, useEffect, useState } from 'react'\n\nimport ERC20_ABI from 'constants/abis/erc20.json'\nimport { useActiveWeb3React } from 'hooks'\nimport { isAddress } from 'utils'\n\nimport { useContract } from './useContract'\nimport useTransactionStatus from './useTransactionStatus'\n\nexport interface BalanceProps {\n  value: BigNumber\n  decimals: number\n}\n\nfunction useTokenBalance(tokenAddress: string) {\n  const [balance, setBalance] = useState<BalanceProps>({ value: BigNumber.from(0), decimals: 18 })\n  const { account, chainId, library } = useActiveWeb3React()\n  //const currentBlockNumber = useBlockNumber()\n  // allows balance to update given transaction updates\n  const currentTransactionStatus = useTransactionStatus()\n  const addressCheckSum = isAddress(tokenAddress)\n  const tokenContract = useContract(addressCheckSum ? addressCheckSum : undefined, ERC20_ABI, false)\n\n  const fetchBalance = useCallback(async () => {\n    const getBalance = async (contract: Contract | null, owner: string | null | undefined): Promise<BalanceProps> => {\n      try {\n        if (account && chainId && contract?.address === WETH[chainId].address) {\n          const ethBalance = await library?.getBalance(account)\n          return { value: BigNumber.from(ethBalance), decimals: 18 }\n        }\n\n        const balance = await contract?.balanceOf(owner)\n        const decimals = await contract?.decimals()\n\n        return { value: BigNumber.from(balance), decimals: decimals }\n        //todo: return as BigNumber as opposed toString since information will\n        //return Fraction.from(BigNumber.from(balance), BigNumber.from(10).pow(decimals)).toString()\n      } catch (e) {\n        return { value: BigNumber.from(0), decimals: 18 }\n      }\n    }\n\n    const balance = await getBalance(tokenContract, account)\n    setBalance(balance)\n  }, [account, tokenContract, chainId, library])\n\n  useEffect(() => {\n    if (account && tokenContract) {\n      fetchBalance()\n    }\n  }, [account, currentTransactionStatus, fetchBalance, tokenContract])\n\n  return balance\n}\n\nexport default useTokenBalance\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}