{"ast":null,"code":"import _defineProperty from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Fraction, Percent, TokenAmount } from '@kyberswap/ks-sdk-core';\nimport JSBI from 'jsbi';\nimport { ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_LOW, ALLOWED_PRICE_IMPACT_MEDIUM, BLOCKED_PRICE_IMPACT_NON_EXPERT } from '../constants';\nimport { Field } from '../state/swap/actions';\nimport { basisPointsToPercent } from './index';\nexport function computeFee(pairs) {\n  var realizedLPFee = new Fraction(JSBI.BigInt(0)); // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n\n  if (pairs) {\n    for (var i = 0; i < pairs.length; i++) {\n      var fee = pairs[i].fee;\n\n      if (fee) {\n        realizedLPFee = realizedLPFee.add(new Percent(JSBI.BigInt(fee), JSBI.BigInt('1000000000000000000')));\n      }\n    }\n  }\n\n  return realizedLPFee;\n} // computes price breakdown for the trade\n\nexport function computeTradePriceBreakdown(trade) {\n  var pairs = trade ? trade.route.pairs : undefined;\n  var realizedLPFee = computeFee(pairs);\n  var accruedFeePercent = new Percent(realizedLPFee.numerator, JSBI.BigInt('1000000000000000000')); // remove lp fees from price impact\n\n  var priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined; // the x*y=k impact\n\n  var priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction ? new Percent(priceImpactWithoutFeeFraction === null || priceImpactWithoutFeeFraction === void 0 ? void 0 : priceImpactWithoutFeeFraction.numerator, priceImpactWithoutFeeFraction === null || priceImpactWithoutFeeFraction === void 0 ? void 0 : priceImpactWithoutFeeFraction.denominator) : undefined; // the amount of the input that accrues to LPs\n\n  var realizedLPFeeAmount = realizedLPFee && trade && // TODO: Check again inputAmount.quotient\n  // (trade.inputAmount.currency.isToken\n  // ?\n  TokenAmount.fromRawAmount(trade.inputAmount.currency, realizedLPFee.multiply(trade.inputAmount.quotient).quotient); // : CurrencyAmount.ether(realizedLPFee.multiply(trade.inputAmount.raw).quotient))\n\n  return {\n    priceImpactWithoutFee: priceImpactWithoutFeePercent,\n    realizedLPFee: realizedLPFeeAmount,\n    accruedFeePercent: accruedFeePercent\n  };\n} // computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\n\nexport function computeSlippageAdjustedAmounts(trade, allowedSlippage) {\n  var _ref;\n\n  var pct = basisPointsToPercent(allowedSlippage);\n  return _ref = {}, _defineProperty(_ref, Field.INPUT, trade === null || trade === void 0 ? void 0 : trade.maximumAmountIn(pct)), _defineProperty(_ref, Field.OUTPUT, trade === null || trade === void 0 ? void 0 : trade.minimumAmountOut(pct)), _ref;\n}\nexport function warningSeverity(priceImpact) {\n  if (!priceImpact) return 0;\n  if (!(priceImpact !== null && priceImpact !== void 0 && priceImpact.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT))) return 4;\n  if (!(priceImpact !== null && priceImpact !== void 0 && priceImpact.lessThan(ALLOWED_PRICE_IMPACT_HIGH))) return 3;\n  if (!(priceImpact !== null && priceImpact !== void 0 && priceImpact.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM))) return 2;\n  if (!(priceImpact !== null && priceImpact !== void 0 && priceImpact.lessThan(ALLOWED_PRICE_IMPACT_LOW))) return 1;\n  return 0;\n}\nexport function formatExecutionPrice(trade, inverted, chainId) {\n  if (!trade || !chainId) {\n    return '';\n  }\n\n  var nativeInput = trade.inputAmount.currency;\n  var nativeOutput = trade.outputAmount.currency;\n  return inverted ? \"\".concat(trade.executionPrice.invert().toSignificant(6), \" \").concat(nativeInput === null || nativeInput === void 0 ? void 0 : nativeInput.symbol, \" / \").concat(nativeOutput === null || nativeOutput === void 0 ? void 0 : nativeOutput.symbol) : \"\".concat(trade.executionPrice.toSignificant(6), \" \").concat(nativeOutput === null || nativeOutput === void 0 ? void 0 : nativeOutput.symbol, \" / \").concat(nativeInput.symbol);\n}\nexport function computePriceImpactWithoutFee(pairs, priceImpact) {\n  var realizedLPFee = computeFee(pairs); // remove lp fees from price impact\n\n  var priceImpactWithoutFeeFraction = priceImpact ? priceImpact.subtract(realizedLPFee) : undefined; // the x*y=k impact\n\n  var priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction ? new Percent(priceImpactWithoutFeeFraction === null || priceImpactWithoutFeeFraction === void 0 ? void 0 : priceImpactWithoutFeeFraction.numerator, priceImpactWithoutFeeFraction === null || priceImpactWithoutFeeFraction === void 0 ? void 0 : priceImpactWithoutFeeFraction.denominator) : undefined;\n  return priceImpactWithoutFeePercent;\n}","map":{"version":3,"names":["Fraction","Percent","TokenAmount","JSBI","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","BLOCKED_PRICE_IMPACT_NON_EXPERT","Field","basisPointsToPercent","computeFee","pairs","realizedLPFee","BigInt","i","length","fee","add","computeTradePriceBreakdown","trade","route","undefined","accruedFeePercent","numerator","priceImpactWithoutFeeFraction","priceImpact","subtract","priceImpactWithoutFeePercent","denominator","realizedLPFeeAmount","fromRawAmount","inputAmount","currency","multiply","quotient","priceImpactWithoutFee","computeSlippageAdjustedAmounts","allowedSlippage","pct","INPUT","maximumAmountIn","OUTPUT","minimumAmountOut","warningSeverity","lessThan","formatExecutionPrice","inverted","chainId","nativeInput","nativeOutput","outputAmount","executionPrice","invert","toSignificant","symbol","computePriceImpactWithoutFee"],"sources":["/Applications/XAMPP/voxel-interface/src/utils/prices.ts"],"sourcesContent":["import { Pair, Trade } from '@kyberswap/ks-sdk-classic'\nimport { ChainId, Currency, CurrencyAmount, Fraction, Percent, TokenAmount, TradeType } from '@kyberswap/ks-sdk-core'\nimport JSBI from 'jsbi'\n\nimport { AnyTrade } from 'hooks/useSwapCallback'\n\nimport {\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_LOW,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n} from '../constants'\nimport { Field } from '../state/swap/actions'\nimport { Aggregator } from './aggregator'\nimport { basisPointsToPercent } from './index'\n\nexport function computeFee(pairs?: Array<Pair>): Fraction {\n  let realizedLPFee: Fraction = new Fraction(JSBI.BigInt(0))\n\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n  if (pairs) {\n    for (let i = 0; i < pairs.length; i++) {\n      const fee = pairs[i].fee\n      if (fee) {\n        realizedLPFee = realizedLPFee.add(new Percent(JSBI.BigInt(fee), JSBI.BigInt('1000000000000000000')))\n      }\n    }\n  }\n\n  return realizedLPFee\n}\n\n// computes price breakdown for the trade\nexport function computeTradePriceBreakdown(trade?: Trade<Currency, Currency, TradeType>): {\n  priceImpactWithoutFee?: Percent\n  realizedLPFee?: CurrencyAmount<Currency>\n  accruedFeePercent: Percent\n} {\n  const pairs = trade ? trade.route.pairs : undefined\n  const realizedLPFee: Fraction = computeFee(pairs)\n  const accruedFeePercent: Percent = new Percent(realizedLPFee.numerator, JSBI.BigInt('1000000000000000000'))\n\n  // remove lp fees from price impact\n  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined\n\n  // the x*y=k impact\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\n    ? new Percent(priceImpactWithoutFeeFraction?.numerator, priceImpactWithoutFeeFraction?.denominator)\n    : undefined\n\n  // the amount of the input that accrues to LPs\n  const realizedLPFeeAmount =\n    realizedLPFee &&\n    trade &&\n    // TODO: Check again inputAmount.quotient\n    // (trade.inputAmount.currency.isToken\n    // ?\n    TokenAmount.fromRawAmount(trade.inputAmount.currency, realizedLPFee.multiply(trade.inputAmount.quotient).quotient)\n  // : CurrencyAmount.ether(realizedLPFee.multiply(trade.inputAmount.raw).quotient))\n\n  return { priceImpactWithoutFee: priceImpactWithoutFeePercent, realizedLPFee: realizedLPFeeAmount, accruedFeePercent }\n}\n\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\nexport function computeSlippageAdjustedAmounts(\n  trade: AnyTrade | Aggregator | undefined,\n  allowedSlippage: number,\n): { [field in Field]?: CurrencyAmount<Currency> } {\n  const pct = basisPointsToPercent(allowedSlippage)\n  return {\n    [Field.INPUT]: trade?.maximumAmountIn(pct),\n    [Field.OUTPUT]: trade?.minimumAmountOut(pct),\n  }\n}\n\nexport function warningSeverity(priceImpact: Percent | undefined): 0 | 1 | 2 | 3 | 4 {\n  if (!priceImpact) return 0\n  if (!priceImpact?.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT)) return 4\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) return 3\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM)) return 2\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_LOW)) return 1\n  return 0\n}\n\nexport function formatExecutionPrice(trade?: AnyTrade | Aggregator, inverted?: boolean, chainId?: ChainId): string {\n  if (!trade || !chainId) {\n    return ''\n  }\n  const nativeInput = trade.inputAmount.currency\n\n  const nativeOutput = trade.outputAmount.currency\n  return inverted\n    ? `${trade.executionPrice.invert().toSignificant(6)} ${nativeInput?.symbol} / ${nativeOutput?.symbol}`\n    : `${trade.executionPrice.toSignificant(6)} ${nativeOutput?.symbol} / ${nativeInput.symbol}`\n}\n\nexport function computePriceImpactWithoutFee(pairs: Pair[], priceImpact?: Percent): Percent | undefined {\n  const realizedLPFee: Fraction = computeFee(pairs)\n\n  // remove lp fees from price impact\n  const priceImpactWithoutFeeFraction = priceImpact ? priceImpact.subtract(realizedLPFee) : undefined\n\n  // the x*y=k impact\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\n    ? new Percent(priceImpactWithoutFeeFraction?.numerator, priceImpactWithoutFeeFraction?.denominator)\n    : undefined\n\n  return priceImpactWithoutFeePercent\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}