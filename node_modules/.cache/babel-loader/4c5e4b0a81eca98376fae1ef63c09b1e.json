{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { configureScope } from '@sentry/browser';\nvar ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nvar ACTION_BREADCRUMB_TYPE = 'info';\nvar defaultOptions = {\n  actionTransformer: function actionTransformer(action) {\n    return action;\n  },\n  stateTransformer: function stateTransformer(state) {\n    return state || null;\n  }\n};\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\n\nfunction createReduxEnhancer(enhancerOptions) {\n  // Note: We return an any type as to not have type conflicts.\n  var options = _objectSpread(_objectSpread({}, defaultOptions), enhancerOptions);\n\n  return function (next) {\n    return function (reducer, initialState) {\n      var sentryReducer = function sentryReducer(state, action) {\n        var newState = reducer(state, action);\n        configureScope(function (scope) {\n          /* Action breadcrumbs */\n          var transformedAction = options.actionTransformer(action);\n\n          if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n            scope.addBreadcrumb({\n              category: ACTION_BREADCRUMB_CATEGORY,\n              data: transformedAction,\n              type: ACTION_BREADCRUMB_TYPE\n            });\n          }\n          /* Set latest state to scope */\n\n\n          var transformedState = options.stateTransformer(newState);\n\n          if (typeof transformedState !== 'undefined' && transformedState !== null) {\n            scope.setContext('state', {\n              state: {\n                type: 'redux',\n                value: transformedState\n              }\n            });\n          } else {\n            scope.setContext('state', null);\n          }\n          /* Allow user to configure scope with latest state */\n\n\n          var configureScopeWithState = options.configureScopeWithState;\n\n          if (typeof configureScopeWithState === 'function') {\n            configureScopeWithState(scope, newState);\n          }\n        });\n        return newState;\n      };\n\n      return next(sentryReducer, initialState);\n    };\n  };\n}\n\nexport { createReduxEnhancer };","map":null,"metadata":{},"sourceType":"module"}