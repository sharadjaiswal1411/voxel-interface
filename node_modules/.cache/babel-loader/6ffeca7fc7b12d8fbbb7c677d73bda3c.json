{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { addTransaction, checkedSubgraph, checkedTransaction, clearAllTransactions, finalizeTransaction } from './actions';\n\nvar now = function now() {\n  return new Date().getTime();\n};\n\nexport var initialState = {};\nexport default createReducer(initialState, function (builder) {\n  return builder.addCase(addTransaction, function (transactions, _ref) {\n    var _transactions$chainId, _transactions$chainId2;\n\n    var _ref$payload = _ref.payload,\n        chainId = _ref$payload.chainId,\n        from = _ref$payload.from,\n        hash = _ref$payload.hash,\n        approval = _ref$payload.approval,\n        type = _ref$payload.type,\n        summary = _ref$payload.summary,\n        claim = _ref$payload.claim,\n        arbitrary = _ref$payload.arbitrary;\n\n    if ((_transactions$chainId = transactions[chainId]) !== null && _transactions$chainId !== void 0 && _transactions$chainId[hash]) {\n      throw Error('Attempted to add existing transaction.');\n    }\n\n    var txs = (_transactions$chainId2 = transactions[chainId]) !== null && _transactions$chainId2 !== void 0 ? _transactions$chainId2 : {};\n    txs[hash] = {\n      hash: hash,\n      approval: approval,\n      type: type,\n      summary: summary,\n      claim: claim,\n      arbitrary: arbitrary,\n      from: from,\n      addedTime: now()\n    };\n    transactions[chainId] = txs;\n  }).addCase(clearAllTransactions, function (transactions, _ref2) {\n    var chainId = _ref2.payload.chainId;\n    if (!transactions[chainId]) return;\n    transactions[chainId] = {};\n  }).addCase(checkedTransaction, function (transactions, _ref3) {\n    var _transactions$chainId3;\n\n    var _ref3$payload = _ref3.payload,\n        chainId = _ref3$payload.chainId,\n        hash = _ref3$payload.hash,\n        blockNumber = _ref3$payload.blockNumber;\n    var tx = (_transactions$chainId3 = transactions[chainId]) === null || _transactions$chainId3 === void 0 ? void 0 : _transactions$chainId3[hash];\n\n    if (!tx) {\n      return;\n    }\n\n    if (!tx.lastCheckedBlockNumber) {\n      tx.lastCheckedBlockNumber = blockNumber;\n    } else {\n      tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n    }\n  }).addCase(finalizeTransaction, function (transactions, _ref4) {\n    var _transactions$chainId4;\n\n    var _ref4$payload = _ref4.payload,\n        hash = _ref4$payload.hash,\n        chainId = _ref4$payload.chainId,\n        receipt = _ref4$payload.receipt,\n        needCheckSubgraph = _ref4$payload.needCheckSubgraph;\n    var tx = (_transactions$chainId4 = transactions[chainId]) === null || _transactions$chainId4 === void 0 ? void 0 : _transactions$chainId4[hash];\n\n    if (!tx) {\n      return;\n    }\n\n    tx.receipt = receipt;\n    tx.confirmedTime = now();\n    tx.needCheckSubgraph = needCheckSubgraph;\n  }).addCase(checkedSubgraph, function (transactions, _ref5) {\n    var _transactions$chainId5;\n\n    var _ref5$payload = _ref5.payload,\n        chainId = _ref5$payload.chainId,\n        hash = _ref5$payload.hash;\n    var tx = (_transactions$chainId5 = transactions[chainId]) === null || _transactions$chainId5 === void 0 ? void 0 : _transactions$chainId5[hash];\n\n    if (!tx) {\n      return;\n    }\n\n    tx.needCheckSubgraph = false;\n  });\n});","map":{"version":3,"names":["createReducer","addTransaction","checkedSubgraph","checkedTransaction","clearAllTransactions","finalizeTransaction","now","Date","getTime","initialState","builder","addCase","transactions","payload","chainId","from","hash","approval","type","summary","claim","arbitrary","Error","txs","addedTime","blockNumber","tx","lastCheckedBlockNumber","Math","max","receipt","needCheckSubgraph","confirmedTime"],"sources":["/Applications/XAMPP/voxel-interface/src/state/transactions/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\n\nimport {\n  SerializableTransactionReceipt,\n  addTransaction,\n  checkedSubgraph,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n} from './actions'\n\nconst now = () => new Date().getTime()\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  type?: string\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n  arbitrary: any // To store anything arbitrary, so it has any type\n  needCheckSubgraph?: boolean\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(\n      addTransaction,\n      (transactions, { payload: { chainId, from, hash, approval, type, summary, claim, arbitrary } }) => {\n        if (transactions[chainId]?.[hash]) {\n          throw Error('Attempted to add existing transaction.')\n        }\n        const txs = transactions[chainId] ?? {}\n        txs[hash] = { hash, approval, type, summary, claim, arbitrary, from, addedTime: now() }\n        transactions[chainId] = txs\n      },\n    )\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n      if (!transactions[chainId]) return\n      transactions[chainId] = {}\n    })\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n    })\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt, needCheckSubgraph } }) => {\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n      tx.needCheckSubgraph = needCheckSubgraph\n    })\n    .addCase(checkedSubgraph, (transactions, { payload: { chainId, hash } }) => {\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.needCheckSubgraph = false\n    }),\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}