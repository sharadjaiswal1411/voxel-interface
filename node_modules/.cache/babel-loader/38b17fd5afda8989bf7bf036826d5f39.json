{"ast":null,"code":"\"use strict\";\n\nvar _merge = _interopRequireDefault(require(\"merge\"));\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.clear = clear, exports.combineLoads = combineLoads, exports.load = load, exports.save = save;\n\nfunction _interopRequireDefault(a) {\n  return a && a.__esModule ? a : {\n    default: a\n  };\n}\n\nfunction _slicedToArray(a, b) {\n  return _arrayWithHoles(a) || _iterableToArrayLimit(a, b) || _unsupportedIterableToArray(a, b) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(a, b) {\n  if (a) {\n    if (\"string\" == typeof a) return _arrayLikeToArray(a, b);\n    var c = Object.prototype.toString.call(a).slice(8, -1);\n    return \"Object\" === c && a.constructor && (c = a.constructor.name), \"Map\" === c || \"Set\" === c ? Array.from(a) : \"Arguments\" === c || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c) ? _arrayLikeToArray(a, b) : void 0;\n  }\n}\n\nfunction _arrayLikeToArray(a, b) {\n  (null == b || b > a.length) && (b = a.length);\n\n  for (var c = 0, d = Array(b); c < b; c++) {\n    d[c] = a[c];\n  }\n\n  return d;\n}\n\nfunction _iterableToArrayLimit(a, b) {\n  var c = null == a ? null : \"undefined\" != typeof Symbol && a[Symbol.iterator] || a[\"@@iterator\"];\n\n  if (null != c) {\n    var d,\n        e,\n        f = [],\n        g = !0,\n        h = !1;\n\n    try {\n      for (c = c.call(a); !(g = (d = c.next()).done) && (f.push(d.value), !(b && f.length === b)); g = !0) {\n        ;\n      }\n    } catch (a) {\n      h = !0, e = a;\n    } finally {\n      try {\n        g || null == c[\"return\"] || c[\"return\"]();\n      } finally {\n        if (h) throw e;\n      }\n    }\n\n    return f;\n  }\n}\n\nfunction _arrayWithHoles(a) {\n  if (Array.isArray(a)) return a;\n}\n\nfunction _typeof(a) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (a) {\n    return typeof a;\n  } : function (a) {\n    return a && \"function\" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? \"symbol\" : typeof a;\n  }, _typeof(a);\n}\n\nfunction _defineProperty(a, b, c) {\n  return b in a ? Object.defineProperty(a, b, {\n    value: c,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : a[b] = c, a;\n}\n\nvar MODULE_NAME = \"[Redux-LocalStorage-Simple]\",\n    NAMESPACE_DEFAULT = \"redux_localstorage_simple\",\n    NAMESPACE_SEPARATOR_DEFAULT = \"_\",\n    STATES_DEFAULT = [],\n    IGNORE_STATES_DEFAULT = [],\n    DEBOUNCE_DEFAULT = 0,\n    IMMUTABLEJS_DEFAULT = !1,\n    DISABLE_WARNINGS_DEFAULT = !1,\n    debounceTimeouts = new Map(); // ---------------------------------------------------\n\n/* warn\r\n\r\n  DESCRIPTION\r\n  ----------\r\n  Write a warning to the console if warnings are enabled\r\n\r\n  PARAMETERS\r\n  ----------\r\n  @disableWarnings (Boolean) - If set to true then the warning is not written to the console\r\n  @warningMessage (String) - The message to write to the console\r\n\r\n*/\n\nfunction warnConsole(a) {\n  console.warn(MODULE_NAME, a);\n}\n\nfunction warnSilent() {// Empty\n}\n\nvar warn = function warn(a) {\n  return a ? warnSilent : warnConsole;\n}; // ---------------------------------------------------\n\n/* lensPath\r\n\r\n  DESCRIPTION\r\n  ----------\r\n  Gets inner data from an object based on a specified path\r\n\r\n  PARAMETERS\r\n  ----------\r\n  @path (Array of Strings) - Path used to get an object's inner data\r\n                              e.g. ['prop', 'innerProp']\r\n  @obj (Object) - Object to get inner data from\r\n\r\n  USAGE EXAMPLE\r\n  -------------\r\n  lensPath(\r\n    ['prop', 'innerProp'],\r\n    { prop: { innerProp: 123 } }\r\n  )\r\n\r\n    returns\r\n\r\n  123\r\n*/\n\n\nfunction lensPath(a, b) {\n  return void 0 === b ? null : 1 === a.length ? b[a[0]] : lensPath(a.slice(1), b[a[0]]);\n} // ---------------------------------------------------\n\n/* realiseObject\r\n\r\n  DESCRIPTION\r\n  ----------\r\n  Create an object from a specified path, with\r\n  the innermost property set with an initial value\r\n\r\n  PARAMETERS\r\n  ----------\r\n  @objectPath (String) - Object path e.g. 'myObj.prop1.prop2'\r\n  @objectInitialValue (Any, optional) - Value of the innermost property once object is created\r\n\r\n  USAGE EXAMPLE\r\n  -------------\r\n\r\n  realiseObject('myObj.prop1.prop2', 123)\r\n\r\n    returns\r\n\r\n  {\r\n    myObj: {\r\n      prop1: {\r\n          prop2: 123\r\n        }\r\n      }\r\n  }\r\n*/\n\n\nfunction realiseObject(a) {\n  function b(a, c) {\n    return 0 === a.length ? c : b(a.slice(1), _defineProperty({}, a[0], c));\n  }\n\n  var c = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {};\n  return b(a.split(\".\").reverse(), c);\n} // ---------------------------------------------------\n// SafeLocalStorage wrapper to handle the minefield of exceptions\n// that localStorage can throw. JSON.parse() is handled here as well.\n\n\nfunction SafeLocalStorage(a) {\n  this.warnFn = a || warnConsole;\n}\n\nObject.defineProperty(SafeLocalStorage.prototype, \"length\", {\n  get: function get() {\n    try {\n      return localStorage.length;\n    } catch (a) {\n      this.warnFn(a);\n    }\n\n    return 0;\n  },\n  configurable: !0,\n  enumerable: !0\n}), SafeLocalStorage.prototype.key = function (a) {\n  try {\n    return localStorage.key(a);\n  } catch (a) {\n    this.warnFn(a);\n  }\n\n  return null;\n}, SafeLocalStorage.prototype.setItem = function (a, b) {\n  try {\n    localStorage.setItem(a, JSON.stringify(b));\n  } catch (a) {\n    this.warnFn(a);\n  }\n}, SafeLocalStorage.prototype.getItem = function (a) {\n  try {\n    return JSON.parse(localStorage.getItem(a));\n  } catch (a) {\n    this.warnFn(a);\n  }\n\n  return null;\n}, SafeLocalStorage.prototype.removeItem = function (a) {\n  try {\n    localStorage.removeItem(a);\n  } catch (a) {\n    this.warnFn(a);\n  }\n}; // ---------------------------------------------------\n\n/**\r\n  Saves specified parts of the Redux state tree into localstorage\r\n  Note: this is Redux middleware. Read this for an explanation:\r\n  http://redux.js.org/docs/advanced/Middleware.html\r\n\r\n  PARAMETERS\r\n  ----------\r\n  @config (Object) - Contains configuration options (leave blank to save entire state tree to localstorage)\r\n\r\n            Properties:\r\n              states (Array of Strings, optional) - States to save e.g. ['user', 'products']\r\n              namespace (String, optional) - Namespace to add before your LocalStorage items\r\n              debounce (Number, optional) - Debouncing period (in milliseconds) to wait before saving to LocalStorage\r\n                                            Use this as a performance optimization if you feel you are saving\r\n                                            to LocalStorage too often. Recommended value: 500 - 1000 milliseconds\r\n\r\n  USAGE EXAMPLES\r\n  -------------\r\n\r\n    // save entire state tree - EASIEST OPTION\r\n    save()\r\n\r\n    // save specific parts of the state tree\r\n    save({\r\n      states: ['user', 'products']\r\n    })\r\n\r\n    // save the entire state tree under the namespace 'my_cool_app'. The key 'my_cool_app' will appear in LocalStorage\r\n    save({\r\n      namespace: 'my_cool_app'\r\n    })\r\n\r\n    // save the entire state tree only after a debouncing period of 500 milliseconds has elapsed\r\n    save({\r\n      debounce: 500\r\n    })\r\n\r\n    // save specific parts of the state tree with the namespace 'my_cool_app'. The keys 'my_cool_app_user' and 'my_cool_app_products' will appear in LocalStorage\r\n    save({\r\n        states: ['user', 'products'],\r\n        namespace: 'my_cool_app',\r\n        debounce: 500\r\n    })\r\n*/\n\nfunction save() {\n  var a = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {},\n      b = a.states,\n      c = void 0 === b ? STATES_DEFAULT : b,\n      d = a.ignoreStates,\n      e = void 0 === d ? IGNORE_STATES_DEFAULT : d,\n      f = a.namespace,\n      g = void 0 === f ? NAMESPACE_DEFAULT : f,\n      h = a.namespaceSeparator,\n      i = void 0 === h ? NAMESPACE_SEPARATOR_DEFAULT : h,\n      j = a.debounce,\n      k = void 0 === j ? DEBOUNCE_DEFAULT : j,\n      l = a.disableWarnings,\n      m = void 0 === l ? DISABLE_WARNINGS_DEFAULT : l;\n  return function (a) {\n    return function (b) {\n      return function (d) {\n        // Digs into rootState for the data to put in LocalStorage\n        function f(a, b) {\n          return 1 < a.split(\".\").length ? lensPath(a.split(\".\"), b) : lensPath([a], b);\n        } // Local function to avoid duplication of code above\n\n\n        function h() {\n          0 === c.length ? o.setItem(g, j) : c.forEach(function (a) {\n            var b = g + i + a,\n                c = f(a, j);\n            c ? o.setItem(b, c) : o.removeItem(b);\n          });\n        } // Bake disableWarnings into the warn function\n\n\n        var j,\n            l = warn(m),\n            n = b(d);\n        isArray(c) || (console.error(MODULE_NAME, \"'states' parameter in 'save()' method was passed a non-array value. Setting default value instead. Check your 'save()' method.\"), c = STATES_DEFAULT), isArray(e) || (console.error(MODULE_NAME, \"'ignoreStates' parameter in 'save()' method was passed a non-array value. Setting default value instead. Check your 'save()' method.\"), e = IGNORE_STATES_DEFAULT), 0 < e.length && (e = e.filter(function (a) {\n          return isString(a) ? a : void console.error(MODULE_NAME, \"'ignoreStates' array contains a non-string value. Ignoring this value. Check your 'ignoreStates' array.\");\n        })), isString(g) || (console.error(MODULE_NAME, \"'namespace' parameter in 'save()' method was passed a non-string value. Setting default value instead. Check your 'save()' method.\"), g = NAMESPACE_DEFAULT), isString(i) || (console.error(MODULE_NAME, \"'namespaceSeparator' parameter in 'save()' method was passed a non-string value. Setting default value instead. Check your 'save()' method.\"), i = NAMESPACE_SEPARATOR_DEFAULT), isInteger(k) || (console.error(MODULE_NAME, \"'debounce' parameter in 'save()' method was passed a non-integer value. Setting default value instead. Check your 'save()' method.\"), k = DEBOUNCE_DEFAULT), j = 0 < e.length ? handleIgnoreStates(e, a.getState()) : a.getState();\n        var o = new SafeLocalStorage(l); // Check to see whether to debounce LocalStorage saving\n\n        return k ? (debounceTimeouts.get(c + g) && clearTimeout(debounceTimeouts.get(c + g)), debounceTimeouts.set(c + g, setTimeout(function () {\n          h(c, g);\n        }, k))) : h(c, g), n;\n      };\n    };\n  };\n}\n/**\r\nLoads specified states from localstorage into the Redux state tree.\r\nPARAMETERS\r\n----------\r\n@config (Object) - Contains configuration options (leave blank to load entire state tree, if it was saved previously that is)\r\nProperties:\r\nstates (Array of Strings, optional) - Parts of state tree to load e.g. ['user', 'products']\r\nnamespace (String, optional) - Namespace required to retrieve your LocalStorage items, if any\r\nUsage examples:\r\n// load entire state tree - EASIEST OPTION\r\nload()\r\n// load specific parts of the state tree\r\nload({\r\nstates: ['user', 'products']\r\n})\r\n// load the entire state tree which was previously saved with the namespace \"my_cool_app\"\r\nload({\r\nnamespace: 'my_cool_app'\r\n})\r\n// load specific parts of the state tree which was previously saved with the namespace \"my_cool_app\"\r\nload({\r\nstates: ['user', 'products'],\r\nnamespace: 'my_cool_app'\r\n})\r\n*/\n\n\nfunction load() {\n  var a = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {},\n      b = a.states,\n      c = void 0 === b ? STATES_DEFAULT : b,\n      d = a.immutablejs,\n      e = void 0 === d ? IMMUTABLEJS_DEFAULT : d,\n      f = a.namespace,\n      g = void 0 === f ? NAMESPACE_DEFAULT : f,\n      h = a.namespaceSeparator,\n      i = void 0 === h ? NAMESPACE_SEPARATOR_DEFAULT : h,\n      j = a.preloadedState,\n      k = void 0 === j ? {} : j,\n      l = a.disableWarnings,\n      m = void 0 === l ? DISABLE_WARNINGS_DEFAULT : l,\n      n = warn(m);\n  isArray(c) || (console.error(MODULE_NAME, \"'states' parameter in 'load()' method was passed a non-array value. Setting default value instead. Check your 'load()' method.\"), c = STATES_DEFAULT), isString(g) || (console.error(MODULE_NAME, \"'namespace' parameter in 'load()' method was passed a non-string value. Setting default value instead. Check your 'load()' method.\"), g = NAMESPACE_DEFAULT), isString(i) || (console.error(MODULE_NAME, \"'namespaceSeparator' parameter in 'load()' method was passed a non-string value. Setting default value instead. Check your 'load()' method.\"), i = NAMESPACE_SEPARATOR_DEFAULT), !0 === e && n(\"Support for Immutable.js data structures has been deprecated as of version 2.0.0. Please use version 1.4.0 if you require this functionality.\");\n  var o = new SafeLocalStorage(n),\n      p = k; // Load all of the namespaced Redux data from LocalStorage into local Redux state tree\n\n  if (0 === c.length) {\n    var q = o.getItem(g);\n    q && (p = q);\n  } else // Load only specified states into the local Redux state tree\n    c.forEach(function (a) {\n      var b = g + i + a,\n          c = o.getItem(b);\n      c ? p = _merge[\"default\"].recursive(p, realiseObject(a, c)) : n(\"Invalid load '\" + b + \"' provided. Check your 'states' in 'load()'. If this is your first time running this app you may see this message. To disable it in future use the 'disableWarnings' flag, see documentation.\");\n    });\n\n  return p;\n}\n/**\r\nCombines multiple 'load' method calls to return a single state for use in Redux's createStore method.\r\nUse this when parts of the loading process need to be handled differently e.g. some parts of your state tree use different namespaces\r\nPARAMETERS\r\n----------\r\n@loads - 'load' method calls passed into this method as normal arguments\r\nUsage example:\r\n// Load parts of the state tree saved with different namespaces\r\ncombineLoads(\r\nload({ states: ['user'], namespace: 'account_stuff' }),\r\nload({ states: ['products', 'categories'], namespace: 'site_stuff' )\r\n)\r\n*/\n\n\nfunction combineLoads() {\n  for (var a = {}, b = arguments.length, c = Array(b), d = 0; d < b; d++) {\n    c[d] = arguments[d];\n  }\n\n  return c.forEach(function (b) {\n    for (var c in isObject(b) || (console.error(MODULE_NAME, \"One or more loads provided to 'combineLoads()' is not a valid object. Ignoring the invalid load/s. Check your 'combineLoads()' method.\"), b = {}), b) {\n      a[c] = b[c];\n    }\n  }), a;\n}\n/**\r\nClears all Redux state tree data from LocalStorage\r\nRemember to provide a namespace if you used one during the save process\r\nPARAMETERS\r\n----------\r\n@config (Object) -Contains configuration options (leave blank to clear entire state tree from LocalStorage, if it was saved without a namespace)\r\nProperties:\r\nnamespace (String, optional) - Namespace that you used during the save process\r\nUsage example:\r\n// clear all Redux state tree data saved without a namespace\r\nclear()\r\n// clear Redux state tree data saved with a namespace\r\nclear({\r\nnamespace: 'my_cool_app'\r\n})\r\n*/\n\n\nfunction clear() {\n  var a = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {},\n      b = a.namespace,\n      c = void 0 === b ? NAMESPACE_DEFAULT : b,\n      d = a.disableWarnings,\n      e = void 0 === d ? DISABLE_WARNINGS_DEFAULT : d,\n      f = warn(e);\n  isString(c) || (console.error(MODULE_NAME, \"'namespace' parameter in 'clear()' method was passed a non-string value. Setting default value instead. Check your 'clear()' method.\"), c = NAMESPACE_DEFAULT);\n\n  for (var g, h = new SafeLocalStorage(f), i = h.length, j = 0; j < i; j++) {\n    g = h.key(j), g && g.slice(0, c.length) === c && h.removeItem(g);\n  }\n} // ---------------------------------------------------\n// Utility functions\n\n\nfunction isArray(a) {\n  return \"[object Array]\" === Object.prototype.toString.call(a);\n}\n\nfunction isString(a) {\n  return \"string\" == typeof a;\n}\n\nfunction isInteger(a) {\n  return \"number\" == typeof a && isFinite(a) && Math.floor(a) === a;\n}\n\nfunction isObject(a) {\n  return null !== a && \"object\" === _typeof(a);\n} // Removes ignored states from the main state object\n\n\nfunction handleIgnoreStates(a, b) {\n  var c = Object.entries(b).reduce(function (c, d) {\n    var e = _slicedToArray(d, 2),\n        f = e[0],\n        g = e[1];\n\n    return -1 === a.indexOf(f) && (c[f] = b[f]), c;\n  }, {});\n  return c;\n}","map":null,"metadata":{},"sourceType":"script"}