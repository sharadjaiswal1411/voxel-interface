{"ast":null,"code":"/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() {\n    this.constructor = child;\n  }\n\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.location = location;\n  this.name = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function (expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function literal(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n    \"class\": function _class(expectation) {\n      var escapedParts = \"\",\n          i;\n\n      for (i = 0; i < expectation.parts.length; i++) {\n        escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);\n      }\n\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n    any: function any(expectation) {\n      return \"any character\";\n    },\n    end: function end(expectation) {\n      return \"end of input\";\n    },\n    other: function other(expectation) {\n      return expectation.description;\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n\n  function classEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\\]/g, '\\\\]').replace(/\\^/g, '\\\\^').replace(/-/g, '\\\\-').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i,\n        j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n      peg$startRuleFunctions = {\n    start: peg$parsestart\n  },\n      peg$startRuleFunction = peg$parsestart,\n      peg$c0 = \"#\",\n      peg$c1 = peg$literalExpectation(\"#\", false),\n      peg$c2 = function peg$c2() {\n    return inPlural[0];\n  },\n      peg$c3 = function peg$c3() {\n    return {\n      type: 'octothorpe'\n    };\n  },\n      peg$c4 = function peg$c4(str) {\n    return str.join('');\n  },\n      peg$c5 = \"{\",\n      peg$c6 = peg$literalExpectation(\"{\", false),\n      peg$c7 = \"}\",\n      peg$c8 = peg$literalExpectation(\"}\", false),\n      peg$c9 = function peg$c9(arg) {\n    return {\n      type: 'argument',\n      arg: arg\n    };\n  },\n      peg$c10 = \",\",\n      peg$c11 = peg$literalExpectation(\",\", false),\n      peg$c12 = \"select\",\n      peg$c13 = peg$literalExpectation(\"select\", false),\n      peg$c14 = function peg$c14(arg, m) {\n    if (options.strict) {\n      inPlural.unshift(false);\n    }\n\n    return m;\n  },\n      peg$c15 = function peg$c15(arg, cases) {\n    if (options.strict) inPlural.shift();\n    return {\n      type: 'select',\n      arg: arg,\n      cases: cases\n    };\n  },\n      peg$c16 = \"plural\",\n      peg$c17 = peg$literalExpectation(\"plural\", false),\n      peg$c18 = \"selectordinal\",\n      peg$c19 = peg$literalExpectation(\"selectordinal\", false),\n      peg$c20 = function peg$c20(arg, m) {\n    inPlural.unshift(true);\n    return m;\n  },\n      peg$c21 = function peg$c21(arg, type, offset, cases) {\n    var ls = (type === 'selectordinal' ? options.ordinal : options.cardinal) || ['zero', 'one', 'two', 'few', 'many', 'other'];\n    if (ls && ls.length) cases.forEach(function (c) {\n      if (isNaN(c.key) && ls.indexOf(c.key) < 0) throw new Error('Invalid key `' + c.key + '` for argument `' + arg + '`.' + ' Valid ' + type + ' keys for this locale are `' + ls.join('`, `') + '`, and explicit keys like `=0`.');\n    });\n    inPlural.shift();\n    return {\n      type: type,\n      arg: arg,\n      offset: offset || 0,\n      cases: cases\n    };\n  },\n      peg$c22 = function peg$c22(arg, key, param) {\n    return {\n      type: 'function',\n      arg: arg,\n      key: key,\n      param: param\n    };\n  },\n      peg$c23 = peg$otherExpectation(\"identifier\"),\n      peg$c24 = /^[^\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029!-\\/:-@[-\\^`{-~\\xA1-\\xA7\\xA9\\xAB\\xAC\\xAE\\xB0\\xB1\\xB6\\xBB\\xBF\\xD7\\xF7\\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E\\uFD3F\\uFE45\\uFE46]/,\n      peg$c25 = peg$classExpectation([[\"\\t\", \"\\r\"], \" \", \"\\x85\", \"\\u200E\", \"\\u200F\", \"\\u2028\", \"\\u2029\", [\"!\", \"/\"], [\":\", \"@\"], [\"[\", \"^\"], \"`\", [\"{\", \"~\"], [\"\\xA1\", \"\\xA7\"], \"\\xA9\", \"\\xAB\", \"\\xAC\", \"\\xAE\", \"\\xB0\", \"\\xB1\", \"\\xB6\", \"\\xBB\", \"\\xBF\", \"\\xD7\", \"\\xF7\", [\"\\u2010\", \"\\u2027\"], [\"\\u2030\", \"\\u203E\"], [\"\\u2041\", \"\\u2053\"], [\"\\u2055\", \"\\u205E\"], [\"\\u2190\", \"\\u245F\"], [\"\\u2500\", \"\\u2775\"], [\"\\u2794\", \"\\u2BFF\"], [\"\\u2E00\", \"\\u2E7F\"], [\"\\u3001\", \"\\u3003\"], [\"\\u3008\", \"\\u3020\"], \"\\u3030\", \"\\uFD3E\", \"\\uFD3F\", \"\\uFE45\", \"\\uFE46\"], true, false),\n      peg$c26 = function peg$c26(key, tokens) {\n    return {\n      key: key,\n      tokens: tokens\n    };\n  },\n      peg$c27 = function peg$c27(tokens) {\n    return tokens;\n  },\n      peg$c28 = peg$otherExpectation(\"plural offset\"),\n      peg$c29 = \"offset\",\n      peg$c30 = peg$literalExpectation(\"offset\", false),\n      peg$c31 = \":\",\n      peg$c32 = peg$literalExpectation(\":\", false),\n      peg$c33 = function peg$c33(d) {\n    return d;\n  },\n      peg$c34 = \"=\",\n      peg$c35 = peg$literalExpectation(\"=\", false),\n      peg$c36 = \"number\",\n      peg$c37 = peg$literalExpectation(\"number\", false),\n      peg$c38 = \"date\",\n      peg$c39 = peg$literalExpectation(\"date\", false),\n      peg$c40 = \"time\",\n      peg$c41 = peg$literalExpectation(\"time\", false),\n      peg$c42 = \"spellout\",\n      peg$c43 = peg$literalExpectation(\"spellout\", false),\n      peg$c44 = \"ordinal\",\n      peg$c45 = peg$literalExpectation(\"ordinal\", false),\n      peg$c46 = \"duration\",\n      peg$c47 = peg$literalExpectation(\"duration\", false),\n      peg$c48 = function peg$c48(key) {\n    if (options.strict || /^\\d/.test(key)) return false;\n\n    switch (key.toLowerCase()) {\n      case 'select':\n      case 'plural':\n      case 'selectordinal':\n        return false;\n\n      default:\n        return true;\n    }\n  },\n      peg$c49 = function peg$c49(key) {\n    return key;\n  },\n      peg$c50 = function peg$c50(tokens) {\n    return !options.strict;\n  },\n      peg$c51 = function peg$c51(tokens) {\n    return {\n      tokens: tokens\n    };\n  },\n      peg$c52 = function peg$c52(parts) {\n    return {\n      tokens: [parts.join('')]\n    };\n  },\n      peg$c53 = peg$otherExpectation(\"a valid (strict) function parameter\"),\n      peg$c54 = /^[^'{}]/,\n      peg$c55 = peg$classExpectation([\"'\", \"{\", \"}\"], true, false),\n      peg$c56 = function peg$c56(p) {\n    return p.join('');\n  },\n      peg$c57 = \"'\",\n      peg$c58 = peg$literalExpectation(\"'\", false),\n      peg$c59 = function peg$c59(quoted) {\n    return quoted;\n  },\n      peg$c60 = function peg$c60(p) {\n    return '{' + p.join('') + '}';\n  },\n      peg$c61 = peg$otherExpectation(\"doubled apostrophe\"),\n      peg$c62 = \"''\",\n      peg$c63 = peg$literalExpectation(\"''\", false),\n      peg$c64 = function peg$c64() {\n    return \"'\";\n  },\n      peg$c65 = /^[^']/,\n      peg$c66 = peg$classExpectation([\"'\"], true, false),\n      peg$c67 = \"'{\",\n      peg$c68 = peg$literalExpectation(\"'{\", false),\n      peg$c69 = function peg$c69(str) {\n    return \"{\" + str.join('');\n  },\n      peg$c70 = \"'}\",\n      peg$c71 = peg$literalExpectation(\"'}\", false),\n      peg$c72 = function peg$c72(str) {\n    return \"}\" + str.join('');\n  },\n      peg$c73 = peg$otherExpectation(\"escaped string\"),\n      peg$c74 = \"'#\",\n      peg$c75 = peg$literalExpectation(\"'#\", false),\n      peg$c76 = function peg$c76(str) {\n    return \"#\" + str.join('');\n  },\n      peg$c77 = function peg$c77(quotedOcto) {\n    return quotedOcto[0];\n  },\n      peg$c78 = peg$otherExpectation(\"plain char\"),\n      peg$c79 = /^[^{}#\\0-\\x08\\x0E-\\x1F\\x7F]/,\n      peg$c80 = peg$classExpectation([\"{\", \"}\", \"#\", [\"\\0\", \"\\b\"], [\"\\x0E\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c81 = function peg$c81(octo) {\n    return !inPlural[0];\n  },\n      peg$c82 = function peg$c82(octo) {\n    return octo;\n  },\n      peg$c83 = peg$otherExpectation(\"integer\"),\n      peg$c84 = /^[0-9]/,\n      peg$c85 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c86 = peg$otherExpectation(\"white space\"),\n      peg$c87 = /^[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/,\n      peg$c88 = peg$classExpectation([[\"\\t\", \"\\r\"], \" \", \"\\x85\", \"\\u200E\", \"\\u200F\", \"\\u2028\", \"\\u2029\"], false, false),\n      peg$currPos = 0,\n      peg$savedPos = 0,\n      peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }],\n      peg$maxFailPos = 0,\n      peg$maxFailExpected = [],\n      peg$silentFails = 0,\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos],\n        p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails = peg$computePosDetails(endPos);\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\n  }\n\n  function peg$parsestart() {\n    var s0, s1;\n    s0 = [];\n    s1 = peg$parsetoken();\n\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsetoken();\n    }\n\n    return s0;\n  }\n\n  function peg$parsetoken() {\n    var s0, s1, s2;\n    s0 = peg$parseargument();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseselect();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseplural();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunction();\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n\n            if (input.charCodeAt(peg$currPos) === 35) {\n              s1 = peg$c0;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c1);\n              }\n            }\n\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s2 = peg$c2();\n\n              if (s2) {\n                s2 = void 0;\n              } else {\n                s2 = peg$FAILED;\n              }\n\n              if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c3();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = [];\n              s2 = peg$parsechar();\n\n              if (s2 !== peg$FAILED) {\n                while (s2 !== peg$FAILED) {\n                  s1.push(s2);\n                  s2 = peg$parsechar();\n                }\n              } else {\n                s1 = peg$FAILED;\n              }\n\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c4(s1);\n              }\n\n              s0 = s1;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseargument() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c5;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c6);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseid();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 125) {\n              s5 = peg$c7;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c8);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c9(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c5;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c6);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseid();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c10;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c11);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n\n                if (input.substr(peg$currPos, 6) === peg$c12) {\n                  s8 = peg$c12;\n                  peg$currPos += 6;\n                } else {\n                  s8 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c13);\n                  }\n                }\n\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = s7;\n                  s8 = peg$c14(s3, s8);\n                }\n\n                s7 = s8;\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s9 = peg$c10;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c11);\n                      }\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        s11 = [];\n                        s12 = peg$parseselectCase();\n\n                        if (s12 !== peg$FAILED) {\n                          while (s12 !== peg$FAILED) {\n                            s11.push(s12);\n                            s12 = peg$parseselectCase();\n                          }\n                        } else {\n                          s11 = peg$FAILED;\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n\n                          if (s12 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                              s13 = peg$c7;\n                              peg$currPos++;\n                            } else {\n                              s13 = peg$FAILED;\n\n                              if (peg$silentFails === 0) {\n                                peg$fail(peg$c8);\n                              }\n                            }\n\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c15(s3, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseplural() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c5;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c6);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseid();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c10;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c11);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n\n                if (input.substr(peg$currPos, 6) === peg$c16) {\n                  s8 = peg$c16;\n                  peg$currPos += 6;\n                } else {\n                  s8 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c17);\n                  }\n                }\n\n                if (s8 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13) === peg$c18) {\n                    s8 = peg$c18;\n                    peg$currPos += 13;\n                  } else {\n                    s8 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c19);\n                    }\n                  }\n                }\n\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = s7;\n                  s8 = peg$c20(s3, s8);\n                }\n\n                s7 = s8;\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s9 = peg$c10;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c11);\n                      }\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseoffset();\n\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          s12 = [];\n                          s13 = peg$parsepluralCase();\n\n                          if (s13 !== peg$FAILED) {\n                            while (s13 !== peg$FAILED) {\n                              s12.push(s13);\n                              s13 = peg$parsepluralCase();\n                            }\n                          } else {\n                            s12 = peg$FAILED;\n                          }\n\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse_();\n\n                            if (s13 !== peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 125) {\n                                s14 = peg$c7;\n                                peg$currPos++;\n                              } else {\n                                s14 = peg$FAILED;\n\n                                if (peg$silentFails === 0) {\n                                  peg$fail(peg$c8);\n                                }\n                              }\n\n                              if (s14 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c21(s3, s7, s11, s12);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefunction() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c5;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c6);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseid();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c10;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c11);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsefunctionKey();\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsefunctionParam();\n\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 125) {\n                        s10 = peg$c7;\n                        peg$currPos++;\n                      } else {\n                        s10 = peg$FAILED;\n\n                        if (peg$silentFails === 0) {\n                          peg$fail(peg$c8);\n                        }\n                      }\n\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c22(s3, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseid() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (peg$c24.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c25);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n\n        if (peg$c24.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c25);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c23);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseselectCase() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseid();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsecaseTokens();\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c26(s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralCase() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsepluralKey();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsecaseTokens();\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c26(s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecaseTokens() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c5;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c6);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse_();\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$currPos;\n        peg$silentFails++;\n\n        if (input.charCodeAt(peg$currPos) === 123) {\n          s5 = peg$c5;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c6);\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s5 !== peg$FAILED) {\n          peg$currPos = s4;\n          s4 = void 0;\n        } else {\n          s4 = peg$FAILED;\n        }\n\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsetoken();\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsetoken();\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 125) {\n              s5 = peg$c7;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c8);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c27(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseoffset() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 6) === peg$c29) {\n        s2 = peg$c29;\n        peg$currPos += 6;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c30);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s4 = peg$c31;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c32);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsedigits();\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c33(s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c28);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralKey() {\n    var s0, s1, s2;\n    s0 = peg$parseid();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 61) {\n        s1 = peg$c34;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c35);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsedigits();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c33(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefunctionKey() {\n    var s0, s1, s2, s3, s4, s5;\n\n    if (input.substr(peg$currPos, 6) === peg$c36) {\n      s0 = peg$c36;\n      peg$currPos += 6;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c37);\n      }\n    }\n\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 4) === peg$c38) {\n        s0 = peg$c38;\n        peg$currPos += 4;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c39);\n        }\n      }\n\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c40) {\n          s0 = peg$c40;\n          peg$currPos += 4;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c41);\n          }\n        }\n\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8) === peg$c42) {\n            s0 = peg$c42;\n            peg$currPos += 8;\n          } else {\n            s0 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c43);\n            }\n          }\n\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7) === peg$c44) {\n              s0 = peg$c44;\n              peg$currPos += 7;\n            } else {\n              s0 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c45);\n              }\n            }\n\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 8) === peg$c46) {\n                s0 = peg$c46;\n                peg$currPos += 8;\n              } else {\n                s0 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c47);\n                }\n              }\n\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$currPos;\n                peg$silentFails++;\n\n                if (input.substr(peg$currPos, 6) === peg$c12) {\n                  s2 = peg$c12;\n                  peg$currPos += 6;\n                } else {\n                  s2 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c13);\n                  }\n                }\n\n                peg$silentFails--;\n\n                if (s2 === peg$FAILED) {\n                  s1 = void 0;\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$FAILED;\n                }\n\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$currPos;\n                  peg$silentFails++;\n\n                  if (input.substr(peg$currPos, 6) === peg$c16) {\n                    s3 = peg$c16;\n                    peg$currPos += 6;\n                  } else {\n                    s3 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c17);\n                    }\n                  }\n\n                  peg$silentFails--;\n\n                  if (s3 === peg$FAILED) {\n                    s2 = void 0;\n                  } else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                  }\n\n                  if (s2 !== peg$FAILED) {\n                    s3 = peg$currPos;\n                    peg$silentFails++;\n\n                    if (input.substr(peg$currPos, 13) === peg$c18) {\n                      s4 = peg$c18;\n                      peg$currPos += 13;\n                    } else {\n                      s4 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c19);\n                      }\n                    }\n\n                    peg$silentFails--;\n\n                    if (s4 === peg$FAILED) {\n                      s3 = void 0;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n\n                    if (s3 !== peg$FAILED) {\n                      s4 = peg$parseid();\n\n                      if (s4 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s5 = peg$c48(s4);\n\n                        if (s5) {\n                          s5 = void 0;\n                        } else {\n                          s5 = peg$FAILED;\n                        }\n\n                        if (s5 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c49(s4);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefunctionParam() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 44) {\n        s2 = peg$c10;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c11);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsetoken();\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsetoken();\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s4 = peg$c50(s3);\n\n          if (s4) {\n            s4 = void 0;\n          } else {\n            s4 = peg$FAILED;\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c51(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c10;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c11);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsestrictFunctionParamPart();\n\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsestrictFunctionParamPart();\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c52(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestrictFunctionParamPart() {\n    var s0, s1, s2, s3;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (peg$c54.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c55);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n\n        if (peg$c54.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c55);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c56(s1);\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedoubleapos();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s1 = peg$c57;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c58);\n          }\n        }\n\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseinapos();\n\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s3 = peg$c57;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c58);\n              }\n            }\n\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c59(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c5;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c6);\n            }\n          }\n\n          if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parsestrictFunctionParamPart();\n\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$parsestrictFunctionParamPart();\n            }\n\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 125) {\n                s3 = peg$c7;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c8);\n                }\n              }\n\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c60(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c53);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedoubleapos() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c62) {\n      s1 = peg$c62;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c63);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c64();\n    }\n\n    s0 = s1;\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c61);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinapos() {\n    var s0, s1, s2;\n    s0 = peg$parsedoubleapos();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = [];\n\n      if (peg$c65.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c66);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n\n          if (peg$c65.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c66);\n            }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c4(s1);\n      }\n\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequotedCurly() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c67) {\n      s1 = peg$c67;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c68);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseinapos();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseinapos();\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c57;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c58);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c69(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 2) === peg$c70) {\n        s1 = peg$c70;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c71);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseinapos();\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseinapos();\n        }\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s3 = peg$c57;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c58);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c72(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted() {\n    var s0, s1, s2, s3, s4, s5;\n    peg$silentFails++;\n    s0 = peg$parsequotedCurly();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n\n      if (input.substr(peg$currPos, 2) === peg$c74) {\n        s3 = peg$c74;\n        peg$currPos += 2;\n      } else {\n        s3 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c75);\n        }\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parseinapos();\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parseinapos();\n        }\n\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s5 = peg$c57;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c58);\n            }\n          }\n\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s2;\n            s3 = peg$c76(s4);\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s3 = peg$c2();\n\n        if (s3) {\n          s3 = void 0;\n        } else {\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c77(s1);\n      }\n\n      s0 = s1;\n\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s0 = peg$c57;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c58);\n          }\n        }\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c73);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseplainChar() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (peg$c79.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c80);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c78);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0, s1, s2;\n    s0 = peg$parsedoubleapos();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n\n        if (input.charCodeAt(peg$currPos) === 35) {\n          s1 = peg$c0;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c1);\n          }\n        }\n\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$c81(s1);\n\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c82(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseplainChar();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (peg$c84.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c85);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n\n        if (peg$c84.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c85);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c83);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (peg$c87.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c88);\n      }\n    }\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n\n      if (peg$c87.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c88);\n        }\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c86);\n      }\n    }\n\n    return s0;\n  }\n\n  var inPlural = [false];\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse: peg$parse\n};","map":null,"metadata":{},"sourceType":"script"}