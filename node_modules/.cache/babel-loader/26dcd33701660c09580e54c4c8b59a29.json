{"ast":null,"code":"import _toConsumableArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { isMatchingPattern, addInstrumentationHandler, isInstanceOf, BAGGAGE_HEADER_NAME, mergeAndSerializeBaggage } from '@sentry/utils';\nimport { hasTracingEnabled, getActiveTransaction } from '../utils.js';\nvar DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\n/** Options for Request Instrumentation */\n\nvar defaultRequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS\n};\n/** Registers span creators for xhr and fetch requests  */\n\nfunction instrumentOutgoingRequests(_options) {\n  var _defaultRequestInstru = _objectSpread(_objectSpread({}, defaultRequestInstrumentationOptions), _options),\n      traceFetch = _defaultRequestInstru.traceFetch,\n      traceXHR = _defaultRequestInstru.traceXHR,\n      tracingOrigins = _defaultRequestInstru.tracingOrigins,\n      shouldCreateSpanForRequest = _defaultRequestInstru.shouldCreateSpanForRequest; // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n\n\n  var urlMap = {};\n\n  var defaultShouldCreateSpan = function defaultShouldCreateSpan(url) {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n\n    var origins = tracingOrigins;\n    urlMap[url] = origins.some(function (origin) {\n      return isMatchingPattern(url, origin);\n    }) && !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  }; // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n\n\n  var shouldCreateSpan = defaultShouldCreateSpan;\n\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = function shouldCreateSpan(url) {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  var spans = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler('fetch', function (handlerData) {\n      fetchCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler('xhr', function (handlerData) {\n      xhrCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n}\n/**\n * Create and track fetch request spans\n */\n\n\nfunction fetchCallback(handlerData, shouldCreateSpan, spans) {\n  if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp) {\n    var spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n    var span = spans[spanId];\n\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        span.setHttpStatus(handlerData.response.status);\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n\n      span.finish();\n      delete spans[spanId];\n    }\n\n    return;\n  }\n\n  var activeTransaction = getActiveTransaction();\n\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: _objectSpread(_objectSpread({}, handlerData.fetchData), {}, {\n        type: 'fetch'\n      }),\n      description: \"\".concat(handlerData.fetchData.method, \" \").concat(handlerData.fetchData.url),\n      op: 'http.client'\n    });\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n    var request = handlerData.args[0] = handlerData.args[0];\n    var options = handlerData.args[1] = handlerData.args[1] || {};\n    options.headers = addTracingHeaders(request, activeTransaction.getBaggage(), span, options);\n  }\n}\n\nfunction addTracingHeaders(request, incomingBaggage, span, options) {\n  var headers = options.headers;\n\n  if (isInstanceOf(request, Request)) {\n    headers = request.headers;\n  }\n\n  if (headers) {\n    if (typeof headers.append === 'function') {\n      headers.append('sentry-trace', span.toTraceparent());\n      headers.append(BAGGAGE_HEADER_NAME, mergeAndSerializeBaggage(incomingBaggage, headers.get(BAGGAGE_HEADER_NAME)));\n    } else if (Array.isArray(headers)) {\n      var _headers$find = headers.find(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            _ = _ref2[1];\n\n        return key === BAGGAGE_HEADER_NAME;\n      }),\n          _headers$find2 = _slicedToArray(_headers$find, 2),\n          headerBaggageString = _headers$find2[1];\n\n      headers = [].concat(_toConsumableArray(headers), [['sentry-trace', span.toTraceparent()], [BAGGAGE_HEADER_NAME, mergeAndSerializeBaggage(incomingBaggage, headerBaggageString)]]);\n    } else {\n      headers = _objectSpread(_objectSpread({}, headers), {}, {\n        'sentry-trace': span.toTraceparent(),\n        baggage: mergeAndSerializeBaggage(incomingBaggage, headers.baggage)\n      });\n    }\n  } else {\n    headers = {\n      'sentry-trace': span.toTraceparent(),\n      baggage: mergeAndSerializeBaggage(incomingBaggage)\n    };\n  }\n\n  return headers;\n}\n/**\n * Create and track xhr request spans\n */\n\n\nfunction xhrCallback(handlerData, shouldCreateSpan, spans) {\n  if (!hasTracingEnabled() || handlerData.xhr && handlerData.xhr.__sentry_own_request__ || !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))) {\n    return;\n  }\n\n  var xhr = handlerData.xhr.__sentry_xhr__; // check first if the request has finished and is tracked by an existing span which should now end\n\n  if (handlerData.endTimestamp) {\n    var spanId = handlerData.xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n    var span = spans[spanId];\n\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n      delete spans[spanId];\n    }\n\n    return;\n  } // if not, create a new span to track it\n\n\n  var activeTransaction = getActiveTransaction();\n\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: _objectSpread(_objectSpread({}, xhr.data), {}, {\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url\n      }),\n      description: \"\".concat(xhr.method, \" \").concat(xhr.url),\n      op: 'http.client'\n    });\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n        var headerBaggageString = handlerData.xhr.getRequestHeader && handlerData.xhr.getRequestHeader(BAGGAGE_HEADER_NAME);\n        handlerData.xhr.setRequestHeader(BAGGAGE_HEADER_NAME, mergeAndSerializeBaggage(activeTransaction.getBaggage(), headerBaggageString));\n      } catch (_) {// Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n\nexport { DEFAULT_TRACING_ORIGINS, defaultRequestInstrumentationOptions, fetchCallback, instrumentOutgoingRequests, xhrCallback };","map":null,"metadata":{},"sourceType":"module"}