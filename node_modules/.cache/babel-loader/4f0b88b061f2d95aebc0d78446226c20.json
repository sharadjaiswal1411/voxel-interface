{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { VersionUpgrade, getVersionUpgrade } from '@uniswap/token-lists';\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { UNSUPPORTED_LIST_URLS } from 'constants/lists';\nimport { useAllLists } from 'state/lists/hooks';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback';\nimport useInterval from '../../hooks/useInterval';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport { acceptListUpdate } from './actions';\nimport { useActiveListUrls } from './hooks';\nexport default function Updater() {\n  _s();\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      library = _useActiveWeb3React.library;\n\n  var dispatch = useDispatch();\n  var isWindowVisible = useIsWindowVisible(); // get all loaded lists, and the active urls\n\n  var lists = useAllLists();\n  var activeListUrls = useActiveListUrls(); //todo: check if this is needed?\n\n  var fetchList = useFetchListCallback();\n  var fetchAllListsCallback = useCallback(function () {\n    if (!isWindowVisible) return;\n    Object.keys(lists).forEach(function (url) {\n      return fetchList(url).catch(function (error) {\n        return console.debug('interval list fetching error', error);\n      });\n    });\n  }, [fetchList, isWindowVisible, lists]); // fetch all lists every 10 minutes, but only after we initialize library\n\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null); // whenever a list is not loaded and not loading, try again to load it\n\n  useEffect(function () {\n    Object.keys(lists).forEach(function (listUrl) {\n      var list = lists[listUrl];\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(function (error) {\n          return console.debug('list added fetching error', error);\n        });\n      }\n    });\n  }, [dispatch, fetchList, library, lists]); // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n\n  useEffect(function () {\n    UNSUPPORTED_LIST_URLS.forEach(function (listUrl) {\n      var list = lists[listUrl];\n\n      if (!list || !list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(function (error) {\n          return console.debug('list added fetching error', error);\n        });\n      }\n    });\n  }, [dispatch, fetchList, library, lists]); // automatically update lists if versions are minor/patch\n\n  useEffect(function () {\n    Object.keys(lists).forEach(function (listUrl) {\n      var list = lists[listUrl];\n\n      if (list.current && list.pendingUpdate) {\n        var bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version);\n\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl));\n        }\n      }\n    });\n  }, [dispatch, lists, activeListUrls]);\n  return null;\n}\n\n_s(Updater, \"I1iFT2RDIG1/hcA6LHHc2M8zQu4=\", false, function () {\n  return [useActiveWeb3React, useDispatch, useIsWindowVisible, useAllLists, useActiveListUrls, useFetchListCallback, useInterval];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"names":["VersionUpgrade","getVersionUpgrade","useCallback","useEffect","useDispatch","UNSUPPORTED_LIST_URLS","useAllLists","useActiveWeb3React","useFetchListCallback","useInterval","useIsWindowVisible","acceptListUpdate","useActiveListUrls","Updater","library","dispatch","isWindowVisible","lists","activeListUrls","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","MAJOR"],"sources":["/Applications/XAMPP/voxel-interface/src/state/lists/updater.ts"],"sourcesContent":["import { VersionUpgrade, getVersionUpgrade } from '@uniswap/token-lists'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { UNSUPPORTED_LIST_URLS } from 'constants/lists'\nimport { useAllLists } from 'state/lists/hooks'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { AppDispatch } from '../index'\nimport { acceptListUpdate } from './actions'\nimport { useActiveListUrls } from './hooks'\n\nexport default function Updater(): null {\n  const { library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const isWindowVisible = useIsWindowVisible()\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists()\n  const activeListUrls = useActiveListUrls() //todo: check if this is needed?\n\n  const fetchList = useFetchListCallback()\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    Object.keys(lists).forEach(url =>\n      fetchList(url).catch(error => console.debug('interval list fetching error', error)),\n    )\n  }, [fetchList, isWindowVisible, lists])\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    UNSUPPORTED_LIST_URLS.forEach(listUrl => {\n      const list = lists[listUrl]\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl))\n        }\n      }\n    })\n  }, [dispatch, lists, activeListUrls])\n\n  return null\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}