{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { parse } from 'qs';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateUserDarkMode } from '../state/user/actions';\nexport default function DarkModeQueryParamReader(_ref) {\n  _s();\n\n  var search = _ref.location.search;\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (!search) return;\n    if (search.length < 2) return;\n    var parsed = parse(search, {\n      parseArrays: false,\n      ignoreQueryPrefix: true\n    });\n    var theme = parsed.theme;\n    if (typeof theme !== 'string') return;\n\n    if (theme.toLowerCase() === 'light') {\n      dispatch(updateUserDarkMode({\n        userDarkMode: false\n      }));\n    } else if (theme.toLowerCase() === 'dark') {\n      dispatch(updateUserDarkMode({\n        userDarkMode: true\n      }));\n    }\n  }, [dispatch, search]);\n  return null;\n}\n\n_s(DarkModeQueryParamReader, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = DarkModeQueryParamReader;\n\nvar _c;\n\n$RefreshReg$(_c, \"DarkModeQueryParamReader\");","map":{"version":3,"names":["parse","useEffect","useDispatch","updateUserDarkMode","DarkModeQueryParamReader","search","location","dispatch","length","parsed","parseArrays","ignoreQueryPrefix","theme","toLowerCase","userDarkMode"],"sources":["/Applications/XAMPP/voxel-interface/src/theme/DarkModeQueryParamReader.tsx"],"sourcesContent":["import { parse } from 'qs'\nimport { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport { AppDispatch } from '../state'\nimport { updateUserDarkMode } from '../state/user/actions'\n\nexport default function DarkModeQueryParamReader({ location: { search } }: RouteComponentProps): null {\n  const dispatch = useDispatch<AppDispatch>()\n\n  useEffect(() => {\n    if (!search) return\n    if (search.length < 2) return\n\n    const parsed = parse(search, {\n      parseArrays: false,\n      ignoreQueryPrefix: true,\n    })\n\n    const theme = parsed.theme\n\n    if (typeof theme !== 'string') return\n\n    if (theme.toLowerCase() === 'light') {\n      dispatch(updateUserDarkMode({ userDarkMode: false }))\n    } else if (theme.toLowerCase() === 'dark') {\n      dispatch(updateUserDarkMode({ userDarkMode: true }))\n    }\n  }, [dispatch, search])\n\n  return null\n}\n"],"mappings":";;AAAA,SAASA,KAAT,QAAsB,IAAtB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAIA,SAASC,kBAAT,QAAmC,uBAAnC;AAEA,eAAe,SAASC,wBAAT,OAAuF;EAAA;;EAAA,IAAvCC,MAAuC,QAAnDC,QAAmD,CAAvCD,MAAuC;EACpG,IAAME,QAAQ,GAAGL,WAAW,EAA5B;EAEAD,SAAS,CAAC,YAAM;IACd,IAAI,CAACI,MAAL,EAAa;IACb,IAAIA,MAAM,CAACG,MAAP,GAAgB,CAApB,EAAuB;IAEvB,IAAMC,MAAM,GAAGT,KAAK,CAACK,MAAD,EAAS;MAC3BK,WAAW,EAAE,KADc;MAE3BC,iBAAiB,EAAE;IAFQ,CAAT,CAApB;IAKA,IAAMC,KAAK,GAAGH,MAAM,CAACG,KAArB;IAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;;IAE/B,IAAIA,KAAK,CAACC,WAAN,OAAwB,OAA5B,EAAqC;MACnCN,QAAQ,CAACJ,kBAAkB,CAAC;QAAEW,YAAY,EAAE;MAAhB,CAAD,CAAnB,CAAR;IACD,CAFD,MAEO,IAAIF,KAAK,CAACC,WAAN,OAAwB,MAA5B,EAAoC;MACzCN,QAAQ,CAACJ,kBAAkB,CAAC;QAAEW,YAAY,EAAE;MAAhB,CAAD,CAAnB,CAAR;IACD;EACF,CAlBQ,EAkBN,CAACP,QAAD,EAAWF,MAAX,CAlBM,CAAT;EAoBA,OAAO,IAAP;AACD;;GAxBuBD,wB;UACLF,W;;;KADKE,wB"},"metadata":{},"sourceType":"module"}