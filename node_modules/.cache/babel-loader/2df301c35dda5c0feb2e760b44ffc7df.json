{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assert_1 = require(\"@0x/assert\");\n\nvar utils_1 = require(\"@0x/utils\");\n\nvar EthereumTx = require(\"ethereumjs-tx\");\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar types_1 = require(\"../types\");\n\nvar base_wallet_subprovider_1 = require(\"./base_wallet_subprovider\");\n/**\n * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.\n * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and handles\n * all requests with the supplied Ethereum private key.\n */\n\n\nvar PrivateKeyWalletSubprovider =\n/** @class */\nfunction (_super) {\n  __extends(PrivateKeyWalletSubprovider, _super);\n  /**\n   * Instantiates a PrivateKeyWalletSubprovider.\n   * @param privateKey The corresponding private key to an Ethereum address\n   * @return PrivateKeyWalletSubprovider instance\n   */\n\n\n  function PrivateKeyWalletSubprovider(privateKey) {\n    var _this = this;\n\n    assert_1.assert.isString('privateKey', privateKey);\n    _this = _super.call(this) || this;\n    _this._privateKeyBuffer = Buffer.from(privateKey, 'hex');\n    _this._address = \"0x\" + ethUtil.privateToAddress(_this._privateKeyBuffer).toString('hex');\n    return _this;\n  }\n  /**\n   * Retrieve the account associated with the supplied private key.\n   * This method is implicitly called when issuing a `eth_accounts` JSON RPC request\n   * via your providerEngine instance.\n   * @return An array of accounts\n   */\n\n\n  PrivateKeyWalletSubprovider.prototype.getAccountsAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , [this._address]];\n      });\n    });\n  };\n  /**\n   * Sign a transaction with the private key. If you've added this Subprovider to your\n   * app's provider, you can simply send an `eth_sendTransaction` JSON RPC request, and\n   * this method will be called auto-magically. If you are not using this via a ProviderEngine\n   * instance, you can call it directly.\n   * @param txParams Parameters of the transaction to sign\n   * @return Signed transaction hex string\n   */\n\n\n  PrivateKeyWalletSubprovider.prototype.signTransactionAsync = function (txParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tx, rawTx;\n      return __generator(this, function (_a) {\n        PrivateKeyWalletSubprovider._validateTxParams(txParams);\n\n        if (txParams.from !== undefined && txParams.from.toLowerCase() !== this._address.toLowerCase()) {\n          throw new Error(\"Requested to sign transaction with address: \" + txParams.from + \", instantiated with address: \" + this._address);\n        }\n\n        tx = new EthereumTx(txParams);\n        tx.sign(this._privateKeyBuffer);\n        rawTx = \"0x\" + tx.serialize().toString('hex');\n        return [2\n        /*return*/\n        , rawTx];\n      });\n    });\n  };\n  /**\n   * Sign a personal Ethereum signed message. The signing address will be calculated from the private key.\n   * The address must be provided it must match the address calculated from the private key.\n   * If you've added this Subprovider to your app's provider, you can simply send an `eth_sign`\n   * or `personal_sign` JSON RPC request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param data Hex string message to sign\n   * @param address Address of the account to sign with\n   * @return Signature hex string (order: rsv)\n   */\n\n\n  PrivateKeyWalletSubprovider.prototype.signPersonalMessageAsync = function (data, address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var dataBuff, msgHashBuff, sig, rpcSig;\n      return __generator(this, function (_a) {\n        if (data === undefined) {\n          throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);\n        }\n\n        assert_1.assert.isHexString('data', data);\n        assert_1.assert.isETHAddressHex('address', address);\n\n        if (address !== this._address) {\n          throw new Error(\"Requested to sign message with address: \" + address + \", instantiated with address: \" + this._address);\n        }\n\n        dataBuff = ethUtil.toBuffer(data);\n        msgHashBuff = ethUtil.hashPersonalMessage(dataBuff);\n        sig = ethUtil.ecsign(msgHashBuff, this._privateKeyBuffer);\n        rpcSig = ethUtil.toRpcSig(sig.v, sig.r, sig.s);\n        return [2\n        /*return*/\n        , rpcSig];\n      });\n    });\n  };\n  /**\n   * Sign an EIP712 Typed Data message. The signing address will be calculated from the private key.\n   * The address must be provided it must match the address calculated from the private key.\n   * If you've added this Subprovider to your app's provider, you can simply send an `eth_signTypedData`\n   * JSON RPC request, and this method will be called auto-magically.\n   * If you are not using this via a ProviderEngine instance, you can call it directly.\n   * @param address Address of the account to sign with\n   * @param data the typed data object\n   * @return Signature hex string (order: rsv)\n   */\n\n\n  PrivateKeyWalletSubprovider.prototype.signTypedDataAsync = function (address, typedData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var dataBuff, sig, rpcSig;\n      return __generator(this, function (_a) {\n        if (typedData === undefined) {\n          throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignTypedData);\n        }\n\n        assert_1.assert.isETHAddressHex('address', address);\n\n        if (address !== this._address) {\n          throw new Error(\"Requested to sign message with address: \" + address + \", instantiated with address: \" + this._address);\n        }\n\n        dataBuff = utils_1.signTypedDataUtils.generateTypedDataHash(typedData);\n        sig = ethUtil.ecsign(dataBuff, this._privateKeyBuffer);\n        rpcSig = ethUtil.toRpcSig(sig.v, sig.r, sig.s);\n        return [2\n        /*return*/\n        , rpcSig];\n      });\n    });\n  };\n\n  return PrivateKeyWalletSubprovider;\n}(base_wallet_subprovider_1.BaseWalletSubprovider);\n\nexports.PrivateKeyWalletSubprovider = PrivateKeyWalletSubprovider;","map":null,"metadata":{},"sourceType":"script"}