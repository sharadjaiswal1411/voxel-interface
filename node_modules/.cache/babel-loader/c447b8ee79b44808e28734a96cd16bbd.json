{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Applications/XAMPP/voxel-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\nvar _s = $RefreshSig$();\n\nimport useSWR from 'swr';\nimport { TRENDING_SOON_SUPPORTED_NETWORKS } from 'constants/index';\nimport { TrueSightTimeframe } from 'pages/TrueSight/index';\nexport default function useGetTrendingSoonData(filter, maxItems) {\n  _s();\n\n  var _filter$selectedToken, _filter$selectedToken2, _filter$selectedTag;\n\n  var _useSWR = useSWR(\"\".concat(process.env.REACT_APP_TRUESIGHT_API, \"/api/v1/trending-soon?timeframe=\").concat(filter.timeframe === TrueSightTimeframe.ONE_DAY ? '24h' : '7d', \"&page_number=0&page_size=\").concat(maxItems, \"&search_token_id=\").concat((_filter$selectedToken = (_filter$selectedToken2 = filter.selectedTokenData) === null || _filter$selectedToken2 === void 0 ? void 0 : _filter$selectedToken2.token_id) !== null && _filter$selectedToken !== void 0 ? _filter$selectedToken : '', \"&search_token_tag=\").concat((_filter$selectedTag = filter.selectedTag) !== null && _filter$selectedTag !== void 0 ? _filter$selectedTag : ''), /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n      var response, json, result, selectedNetworkKey, filteredTokens;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(url);\n\n            case 2:\n              response = _context.sent;\n\n              if (!response.ok) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              json = _context.sent;\n              result = json.data; // Sort platforms\n\n              result.tokens = result.tokens.map(function (token) {\n                var priorityNetworks = Object.keys(TRENDING_SOON_SUPPORTED_NETWORKS);\n                var platforms = new Map();\n\n                for (var i = 0; i < priorityNetworks.length; i++) {\n                  var network = priorityNetworks[i];\n                  var address = token.platforms[network];\n\n                  if (address) {\n                    platforms.set(network, address);\n                  }\n                }\n\n                return _objectSpread(_objectSpread({}, token), {}, {\n                  platforms: platforms\n                });\n              }); // Filter network in frontend\n\n              if (filter.selectedNetwork) {\n                selectedNetworkKey = Object.keys(TRENDING_SOON_SUPPORTED_NETWORKS).find(function (key) {\n                  return TRENDING_SOON_SUPPORTED_NETWORKS[key] === filter.selectedNetwork;\n                });\n                filteredTokens = result.tokens.filter(function (tokenData) {\n                  return tokenData.present_on_chains.includes(selectedNetworkKey);\n                });\n                result = {\n                  total_number_tokens: filteredTokens.length,\n                  tokens: filteredTokens\n                };\n              }\n\n              return _context.abrupt(\"return\", result);\n\n            case 13:\n              throw Error(response.statusText);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  return {\n    isLoading: !data && !error,\n    data: data,\n    error: error\n  };\n}\n\n_s(useGetTrendingSoonData, \"r2QYs02BSrn+Eu/1uMGZi8N+HnQ=\", false, function () {\n  return [useSWR];\n});","map":{"version":3,"names":["useSWR","TRENDING_SOON_SUPPORTED_NETWORKS","TrueSightTimeframe","useGetTrendingSoonData","filter","maxItems","process","env","REACT_APP_TRUESIGHT_API","timeframe","ONE_DAY","selectedTokenData","token_id","selectedTag","url","fetch","response","ok","json","result","data","tokens","map","token","priorityNetworks","Object","keys","platforms","Map","i","length","network","address","set","selectedNetwork","selectedNetworkKey","find","key","filteredTokens","tokenData","present_on_chains","includes","total_number_tokens","Error","statusText","error","isLoading"],"sources":["/Applications/XAMPP/voxel-interface/src/pages/TrueSight/hooks/useGetTrendingSoonData.ts"],"sourcesContent":["import useSWR from 'swr'\n\nimport { TRENDING_SOON_SUPPORTED_NETWORKS } from 'constants/index'\nimport { TrueSightFilter, TrueSightTimeframe } from 'pages/TrueSight/index'\n\nexport interface TrueSightTokenData {\n  token_id: number\n  id_of_sources: {\n    CoinGecko: string\n    CoinMarketCap: string\n  }\n  order: number\n  name: string\n  symbol: string\n  rank: number | undefined // Trending soon only\n\n  // a Map keeps the order of keys as we add them\n  // a regular object doesn't\n  platforms: Map<string, string>\n  present_on_chains: string[]\n  predicted_date: number | undefined // Trending soon only\n  market_cap: number\n  number_holders: number\n  trading_volume: number\n  price: number\n  social_urls: {\n    [p: string]: string\n  }\n  tags: string[] | null\n  discovered_on: number\n  logo_url: string\n  official_web: string\n  price_change_percentage_24h: number\n  discovered_details:\n    | {\n        price_discovered: number\n        trading_volume_discovered: number\n        market_cap_discovered: number\n        number_holders_discovered: number\n      }\n    | undefined // Trending only\n}\n\nexport interface TrueSightTokenResponse {\n  total_number_tokens: number\n  tokens: TrueSightTokenData[]\n}\n\nexport default function useGetTrendingSoonData(filter: TrueSightFilter, maxItems: number) {\n  const { data, error } = useSWR(\n    `${process.env.REACT_APP_TRUESIGHT_API}/api/v1/trending-soon?timeframe=${\n      filter.timeframe === TrueSightTimeframe.ONE_DAY ? '24h' : '7d'\n    }&page_number=0&page_size=${maxItems}&search_token_id=${\n      filter.selectedTokenData?.token_id ?? ''\n    }&search_token_tag=${filter.selectedTag ?? ''}`,\n    async (url: string) => {\n      const response = await fetch(url)\n      if (response.ok) {\n        const json = await response.json()\n        let result: TrueSightTokenResponse = json.data\n\n        // Sort platforms\n        result.tokens = result.tokens.map(token => {\n          const priorityNetworks = Object.keys(TRENDING_SOON_SUPPORTED_NETWORKS)\n          const platforms = new Map<string, string>()\n          for (let i = 0; i < priorityNetworks.length; i++) {\n            const network = priorityNetworks[i]\n            const address = (token.platforms as unknown as { [p: string]: string })[network]\n            if (address) {\n              platforms.set(network, address)\n            }\n          }\n          return {\n            ...token,\n            platforms,\n          }\n        })\n\n        // Filter network in frontend\n        if (filter.selectedNetwork) {\n          const selectedNetworkKey = Object.keys(TRENDING_SOON_SUPPORTED_NETWORKS).find(\n            (key: string) => TRENDING_SOON_SUPPORTED_NETWORKS[key] === filter.selectedNetwork,\n          )\n          const filteredTokens = result.tokens.filter(tokenData =>\n            tokenData.present_on_chains.includes(selectedNetworkKey as string),\n          )\n          result = {\n            total_number_tokens: filteredTokens.length,\n            tokens: filteredTokens,\n          }\n        }\n        return result\n      } else {\n        throw Error(response.statusText)\n      }\n    },\n  )\n\n  return { isLoading: !data && !error, data, error }\n}\n"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,KAAnB;AAEA,SAASC,gCAAT,QAAiD,iBAAjD;AACA,SAA0BC,kBAA1B,QAAoD,uBAApD;AA6CA,eAAe,SAASC,sBAAT,CAAgCC,MAAhC,EAAyDC,QAAzD,EAA2E;EAAA;;EAAA;;EACxF,cAAwBL,MAAM,WACzBM,OAAO,CAACC,GAAR,CAAYC,uBADa,6CAE1BJ,MAAM,CAACK,SAAP,KAAqBP,kBAAkB,CAACQ,OAAxC,GAAkD,KAAlD,GAA0D,IAFhC,sCAGAL,QAHA,iFAI1BD,MAAM,CAACO,iBAJmB,2DAI1B,uBAA0BC,QAJA,yEAIY,EAJZ,sDAKPR,MAAM,CAACS,WALA,qEAKe,EALf;IAAA,sEAM5B,iBAAOC,GAAP;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACyBC,KAAK,CAACD,GAAD,CAD9B;;YAAA;cACQE,QADR;;cAAA,KAEMA,QAAQ,CAACC,EAFf;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAGuBD,QAAQ,CAACE,IAAT,EAHvB;;YAAA;cAGUA,IAHV;cAIQC,MAJR,GAIyCD,IAAI,CAACE,IAJ9C,EAMI;;cACAD,MAAM,CAACE,MAAP,GAAgBF,MAAM,CAACE,MAAP,CAAcC,GAAd,CAAkB,UAAAC,KAAK,EAAI;gBACzC,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYzB,gCAAZ,CAAzB;gBACA,IAAM0B,SAAS,GAAG,IAAIC,GAAJ,EAAlB;;gBACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,gBAAgB,CAACM,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;kBAChD,IAAME,OAAO,GAAGP,gBAAgB,CAACK,CAAD,CAAhC;kBACA,IAAMG,OAAO,GAAIT,KAAK,CAACI,SAAP,CAAwDI,OAAxD,CAAhB;;kBACA,IAAIC,OAAJ,EAAa;oBACXL,SAAS,CAACM,GAAV,CAAcF,OAAd,EAAuBC,OAAvB;kBACD;gBACF;;gBACD,uCACKT,KADL;kBAEEI,SAAS,EAATA;gBAFF;cAID,CAde,CAAhB,CAPJ,CAuBI;;cACA,IAAIvB,MAAM,CAAC8B,eAAX,EAA4B;gBACpBC,kBADoB,GACCV,MAAM,CAACC,IAAP,CAAYzB,gCAAZ,EAA8CmC,IAA9C,CACzB,UAACC,GAAD;kBAAA,OAAiBpC,gCAAgC,CAACoC,GAAD,CAAhC,KAA0CjC,MAAM,CAAC8B,eAAlE;gBAAA,CADyB,CADD;gBAIpBI,cAJoB,GAIHnB,MAAM,CAACE,MAAP,CAAcjB,MAAd,CAAqB,UAAAmC,SAAS;kBAAA,OACnDA,SAAS,CAACC,iBAAV,CAA4BC,QAA5B,CAAqCN,kBAArC,CADmD;gBAAA,CAA9B,CAJG;gBAO1BhB,MAAM,GAAG;kBACPuB,mBAAmB,EAAEJ,cAAc,CAACR,MAD7B;kBAEPT,MAAM,EAAEiB;gBAFD,CAAT;cAID;;cAnCL,iCAoCWnB,MApCX;;YAAA;cAAA,MAsCUwB,KAAK,CAAC3B,QAAQ,CAAC4B,UAAV,CAtCf;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAN4B;;IAAA;MAAA;IAAA;EAAA,IAA9B;EAAA,IAAQxB,IAAR,WAAQA,IAAR;EAAA,IAAcyB,KAAd,WAAcA,KAAd;;EAiDA,OAAO;IAAEC,SAAS,EAAE,CAAC1B,IAAD,IAAS,CAACyB,KAAvB;IAA8BzB,IAAI,EAAJA,IAA9B;IAAoCyB,KAAK,EAALA;EAApC,CAAP;AACD;;GAnDuB1C,sB;UACEH,M"},"metadata":{},"sourceType":"module"}